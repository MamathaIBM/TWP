// Connecting to mariadb
var Excel = require('exceljs');
const config = require('./Config.json');
var xl = require('excel4node'); 
var express = require('express');
var request = require("request");
var mariadb = require('mariadb');
var cors = require ('cors');
var bodyParser = require('body-parser');
var https = require ('https');
var mysql = require ('mysql');
var fs = require('fs');
var moment = require('moment'); 
var app = express();
var XLSX = require('xlsx');
var PptxGenJS = require("pptxgenjs");
var roundTo = require('round-to');
var arraySort = require('array-sort');
let finalresponse='';
let fileAppimport = '';
let fileTrainee= '';
let SevenkeyAccount = '';
let SevenkeyTransition = '';
let LastweekOverRAG = '';
let CurweekOverRAG = '';
let CurweekTrend = '';
let CurweekSummary = '';
let CurweekProgress = '';
let NextweekPlan = '';
let ArrayEmail_check = [];
let ArrayNotesID_check = [];
let arrTrainee = []; 
let SevenkeyArr = [];
let ScopeKeyArr = [];
let TeamkeyArr = [];
let RiskskeyArr = [];
let OrgkeyArr = [];
let WorkkeyArr = [];
let BuskeyArr = [];
let FinkeyArr = [];
let TRantionTeamList =[];
let Del_StatusArr = [];
let Key_RiskArr = [];
let Key_IssueArr = [];
let Key_ActionArr = [];
let Key_DependenciesArr = [];
let RiskArr=[];
let Detailval=[];

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));
app.use(cors());

var pool = mariadb.createPool({
    // connectionLimit: 5,
    // host: 'inmbzp7149.in.dst.ibm.com',
    // port : 3307,
    // user: 'root',
    // password: 'Mariadb_1234',
    // database: 'twp',
    // timezone: 'local'
    connectionLimit: config.Server_mariadb_System.connectionLimit,
    host: config.Server_mariadb_System.host,
    port : config.Server_mariadb_System.dbPort,
    user: config.Server_mariadb_System.user,
    password: config.Server_mariadb_System.password,
    database: config.Server_mariadb_System.schema,
    timezone: config.Server_mariadb_System.timezone
});


 https.createServer(
    {
      key: fs.readFileSync(config.keys.key),
      cert: fs.readFileSync(config.keys.cert),
      secureOptions: require('constants').SSL_OP_NO_TLSv1_1 | require('constants').SSL_OP_NO_TLSv1,
 }, app).listen(config.Server_mariadb_System.Server_mariadb_Port);

//  app.listen(3000)
console.log (" listening to  port "+config.Server_mariadb_System.Server_mariadb_Port )


// Code for Stake holder information

app.get("/ExecutionView",(req,res)=>{

    pool.getConnection(function(err, connection) {
        if (err) {
          return console.error('error: ' + err.message);
        }    
    var id = req.params.Id;
    queryExeView = "select * from executionaccounts" ;
    connection.query(queryExeView,(err,ExecutionviewResult,fields)=>{
        if (err){
            res.send({"Fetch" : "Fail" })
        }else{
            res.send(ExecutionviewResult)
        }
        connection.release();    
        res.end(finalresponse); 
    });
    });
})

app.get('/stakeholderSelect/:Id',(req,res)=>{
    var id = req.params.Id;
    queryStHolSel = "select * from stakeholder where IntegrationID ='"+id +"'" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryStHolSel).then((stakeresult) => {
              
              res.send(stakeresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
})

app.post('/stakeholderSave',(req,res)=>{
    var AppUNID = null;
    var IntegrationID = req.body.IntegrationID ;
    var ResourceName =req.body.ResourceName.replace(/'/g, "\\'");
    var EmailId = req.body.EmailId;
    var Role = req.body.Role;
    var createdBy = req.body.createdBy;
    var modifiedBy = req.body.modifiedBy;
    var dt=moment(new Date());
    var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
    var modifiedDate =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
    var USER_ROLE_ID = req.body.USER_ROLE_ID;

   querystakeholderSave ="insert into stakeholder values ("+AppUNID +",'"+ IntegrationID + "','"+ ResourceName + 
   "','"+ EmailId + "','"+ Role
   + "','"+ createdBy +"','"+ modifiedBy +"','"+ createdDate +"','"+ modifiedDate +"','"+USER_ROLE_ID+"')"
    pool.getConnection().then(conn => {        
          conn.query(querystakeholderSave).then((stakeresult) => {
            
              res.send({"save" : "Success"} )
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"save" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

})


app.put('/stakeholderUpdate',(req,res)=>{
  var AppUNID = req.body.AppUNID;
  var IntegrationID = req.body.IntegrationID ;
  var ResourceName =req.body.ResourceName.replace(/'/g, "\\'");
  var EmailId = req.body.EmailId;
  var Role = req.body.Role;
  var modifiedBy = req.body.modifiedBy;
  var USER_ROLE_ID = req.body.USER_ROLE_ID;
  var dt=moment(new Date());
  var modifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");

  querystakeholderUpdate ="Update stakeholder SET IntegrationID='"+
  IntegrationID+"',ResourceName='"+ResourceName+"',EmailId='"+EmailId
  +"',modifiedBy='"+modifiedBy
  +"',modifiedDate='"+modifiedDate+    
  "',Role='"+Role+
  "',USER_ROLE_ID='"+USER_ROLE_ID+
  "' where AppUNID='"+AppUNID+"'"
  // //console.log(query);

  pool.getConnection().then(conn => {        
      conn.query(querystakeholderUpdate).then((stakeresult) => {

          res.send({"insert" : "success"} )
          conn.end();
        })
        .catch(err => {
          //handle error
          //console.log("fail")
          res.send({"insert" : "Fail" })
          conn.end();
        })

    }).catch(err => {
      //console.log("not")
      //not connected
    });

});

app.delete('/stakeholderDelete/:AppUNID',(req,res)=>{  
    
    var AppUNID = req.params.AppUNID;    
    querystakeholderDelete = "DELETE FROM stakeholder WHERE (AppUNID ='" + AppUNID+"')"
    // //console.log(querystakeholderDelete)
    
    pool.getConnection().then(conn => {        
        conn.query(querystakeholderDelete).then((stakeresult) => {
          
            res.send({"Delete" : "success"} )
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Delete" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });

    
})


//========================================Stakeholders============================================

// Getting  Owning TTS keywords profiles
app.get("/OwnTTSKeyword",async(req,res)=>{
    queryOwnTTSKeyword = "select * from adminprofile WHERE FieldCategoryName='OwningTTS' ORDER BY Categoryvalues ASC" ; 

        pool.getConnection().then(conn => {        
          conn.query(queryOwnTTSKeyword).then((OwnTTSKeywordResult) => {            
              res.send(OwnTTSKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting  sector keywords profiles
app.get("/SectorKeyword", async(req,res)=>{
    querySectorKeyword = "select * from adminprofile WHERE FieldCategoryName='Sector' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(querySectorKeyword).then((SectorKeywordResult) => {
             
              res.send(SectorKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

//Industry start
// Getting  Industry_Comm keywords profiles
app.get("/IndComKeyword",async(req,res)=>{   
    queryIndComKeyword = "select * from adminprofile WHERE FieldCategoryName='Communication' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIndComKeyword).then((IndComKeywordResult) => {
            
              res.send(IndComKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });


});

// Getting  Industry_Dis keywords profiles
app.get("/IndDisKeyword",async(req,res)=>{
    queryIndDisKeyword = "select * from adminprofile WHERE FieldCategoryName='Distribution' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIndDisKeyword).then((IndDisKeywordResult) => {
             
              res.send(IndDisKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

});

// Getting  Industry_Industrial keywords profiles
app.get("/IndIndKeyword",async(req,res)=>{
    queryIndIndKeyword = "select * from adminprofile WHERE FieldCategoryName='Industrial' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIndIndKeyword).then((IndIndKeywordResult) => {
            
              res.send(IndIndKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting  Industry_Public keywords profiles
app.get("/IndPubKeyword",async(req,res)=>{
    queryIndPubKeyword = "select * from adminprofile WHERE FieldCategoryName='Public' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIndPubKeyword).then((IndPubKeywordResult) => {
              
              res.send(IndPubKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting  Industry_FSS keywords profiles
app.get("/IndFSSKeyword",async(req,res)=>{
    queryIndFSSKeyword = "select * from adminprofile WHERE FieldCategoryName='Financial Services' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIndFSSKeyword).then((IndFSSKeywordResult) => {
             
              res.send(IndFSSKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

});

// Getting  Incumbent Vendor keywords profiles
app.get("/IncumbentVendorkeyword",(req,res)=>{
    queryIncumbentVendorkeyword = "select * from adminprofile WHERE FieldCategoryName='IncumbentVendor' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIncumbentVendorkeyword).then((IncumbentVendorkeywordResult) => {
             
              res.send(IncumbentVendorkeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

});
// Getting  Owning TTS keywords profiles
app.get("/IOTKeyword",(req,res)=>{
    queryIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='IOT' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryIOTKeyword).then((IOTKeywordResult) => {
            
              res.send(IOTKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

//Getting CIC Locations List
app.get("/CICLocationsKeyword",(req,res)=>{

queryCICLocationsKeyword = "select * from adminprofile WHERE FieldCategoryName='CICLocations' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
      conn.query(queryCICLocationsKeyword).then((CICLocationsKeywordResult) => {        
          res.send(CICLocationsKeywordResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })          
    }).catch(err => {
      //not connected
    });
}); 

  //Getting APIOT Keywords
app.get("/APIOTKeyword",(req,res)=>{

queryAPIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='AP IOT' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
      conn.query(queryAPIOTKeyword).then((queryAPIOTKeywordResult) => {          
          res.send(queryAPIOTKeywordResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })          
    }).catch(err => {
      //not connected
    });
}); 

//Getting EuropeIOT Keywords
app.get("/EuropeIOTKeyword",(req,res)=>{

queryEuropeIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='Europe IOT' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
      conn.query(queryEuropeIOTKeyword).then((queryEuropeIOTKeywordResult) => {          
          res.send(queryEuropeIOTKeywordResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })          
    }).catch(err => {
      //not connected
    });
});

//Getting GCG IOT Keywords
app.get("/GCGIOTKeyword",(req,res)=>{

  queryGCGIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='GCG IOT' ORDER BY Categoryvalues ASC" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryGCGIOTKeyword).then((queryGCGIOTKeywordResult) => {          
            res.send(queryGCGIOTKeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
}); 

//Getting JAPAN IOT Keywords
app.get("/JAPANIOTKeyword",(req,res)=>{

  queryJAPANIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='JAPAN IOT' ORDER BY Categoryvalues ASC" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryJAPANIOTKeyword).then((queryJAPANIOTKeywordResult) => {          
            res.send(queryJAPANIOTKeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
}); 

//Getting MEA IOT Keywords
app.get("/MEAIOTKeyword",(req,res)=>{

  queryMEAIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='MEA IOT' ORDER BY Categoryvalues ASC" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryMEAIOTKeyword).then((queryMEAIOTKeywordResult) => {          
            res.send(queryMEAIOTKeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
});
//Getting NAIOT Keywords
app.get("/NAIOTKeyword",(req,res)=>{

queryNAIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='NA IOT' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
      conn.query(queryNAIOTKeyword).then((queryNAIOTKeywordResult) => {          
          res.send(queryNAIOTKeywordResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })          
    }).catch(err => {
      //not connected
    });
});

//Getting LAIOT Keywords
app.get("/LAIOTKeyword",(req,res)=>{

queryLAIOTKeyword = "select * from adminprofile WHERE FieldCategoryName='LA IOT' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
      conn.query(queryLAIOTKeyword).then((queryLAIOTKeywordResult) => {          
          res.send(queryLAIOTKeywordResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })          
    }).catch(err => {
      //not connected
    });
}); 

// Getting Transition Type keywords profiles
app.get("/TransitionTypeKeyword",async(req,res)=>{
  queryTranTypeKeyword = "select * from adminprofile WHERE FieldCategoryName='Transition Type' ORDER BY Categoryvalues ASC" ; 

      pool.getConnection().then(conn => {        
        conn.query(queryTranTypeKeyword).then((queryTranTypeKeywordResult) => {            
            res.send(queryTranTypeKeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting Transition Scope keywords profiles
app.get("/TransitionScopeKeyword",async(req,res)=>{
  queryTranScopeKeyword = "select * from adminprofile WHERE FieldCategoryName='Transition Scope' ORDER BY Categoryvalues ASC" ; 

      pool.getConnection().then(conn => {        
        conn.query(queryTranScopeKeyword).then((queryTranScopeResult) => {            
            res.send(queryTranScopeResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting Steady State Scope keywords profiles
app.get("/StStateScopeKeyword",async(req,res)=>{
  queryStStateScopeKeyword = "select * from adminprofile WHERE FieldCategoryName='Steady State Scope'" ; 

      pool.getConnection().then(conn => {        
        conn.query(queryStStateScopeKeyword).then((queryStStateScopeResult) => {            
            res.send(queryStStateScopeResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

//Getting ServiceLine Keywords
app.get("/ServiceLineKeyword",(req,res)=>{

  queryServiceLineKeyword = "select * from adminprofile WHERE FieldCategoryName='ServiceLine' ORDER BY Categoryvalues ASC" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryServiceLineKeyword).then((queryServiceLineKeywordResult) => {          
            res.send(queryServiceLineKeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
  }); 

// Getting  Transition Status keywords profiles
app.get("/Transtatuskeyword",(req,res)=>{
    queryTranstatuskeyword = "select * from adminprofile WHERE FieldCategoryName='TransitionStatus' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryTranstatuskeyword).then((TranstatuskeywordResult) => {
             
              res.send(TranstatuskeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
}); 

// Getting  Existing Transition Duplicate check
app.get("/TransProfileDuplicate",(req,res)=>{
    var IntegrationID=req.query.IntegrationID;  
    queryTransProfileDuplicate = "select * from transitionprofile WHERE IntegrationID='"+IntegrationID+"'" ; 
    pool.getConnection().then(conn => {        
          conn.query(queryTransProfileDuplicate).then((TranstatuskeywordResult) => {
              
              res.send(TranstatuskeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
}); 



//ndustry End


// Getting  Solution Year keywords profiles
app.get("/SolYearKeyword",async(req,res)=>{
    querySolYearKeyword = "select * from adminprofile WHERE FieldCategoryName='SolYear' ORDER BY Categoryvalues ASC" ; 
    pool.getConnection().then(conn => {        
          conn.query(querySolYearKeyword).then((SolYearKeywordResult) => {
              
              res.send(SolYearKeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting Complexity  keywords profiles
app.get("/ComplexityKeyword",async(req,res)=>{
    queryComplexityKeyword = "select * from adminprofile WHERE FieldCategoryName='Complexity' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryComplexityKeyword).then((ComplexityKeyword) => {
            
              res.send(ComplexityKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting Criticality keywords profiles
app.get("/CriticalityKeyword",async(req,res)=>{
    queryCriticalityKeyword = "select * from adminprofile WHERE FieldCategoryName='Criticality' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryCriticalityKeyword).then((CriticalityKeyword) => {
              
              res.send(CriticalityKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting Technology keywords profiles
app.get("/TechnologyKeyword",(req,res)=>{
    queryTechnologyKeyword = "select * from adminprofile WHERE FieldCategoryName='Technology' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryTechnologyKeyword).then((TechnologyKeyword) => {
              
              res.send(TechnologyKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});


// Getting Vendor keywords profiles
app.get("/VendorKeyword",(req,res)=>{
    queryVendorKeyword = "select * from adminprofile WHERE FieldCategoryName='Vendor' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryVendorKeyword).then((VendorKeyword) => {
             
              res.send(VendorKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

// Getting Vendor keywords profiles
app.get("/app_CategoryKeyword",(req,res)=>{
    queryapp_CategoryKeyword ="select * from adminprofile WHERE FieldCategoryName='app_Category' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryapp_CategoryKeyword).then((app_CategoryKeyword) => {
            
            res.send(app_CategoryKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting Application Parameter keywords profiles
app.get("/appsizeKeyword",(req,res)=>{
  queryappsizeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Size' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappsizeKeyword).then((appsizeKeyword) => {
            
            res.send(appsizeKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});


// Getting Application Parameter keywords profiles
app.get("/appFunctionsValueKeyword",(req,res)=>{
  queryappFunctionsValueKeyword ="select * from adminprofile WHERE FieldCategoryName='Function Points' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappFunctionsValueKeyword).then((appFunctionsValueKeyword) => {
            
            res.send(appFunctionsValueKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting Application Parameter keywords profiles
app.get("/appLinesValueKeyword",(req,res)=>{
  queryappLinesValueKeyword ="select * from adminprofile WHERE FieldCategoryName='Lines of code' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappLinesValueKeyword).then((appLinesValueKeyword) => {
            
            res.send(appLinesValueKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});


// Getting  EngagementProfileData
app.get("/EngProfileData",(req, res)=> { 

  let NewExeArr = [];
 NewExeArr.push({Field: 'ClientName' ,Value:req.query.Account_Name},
 {Field: 'OwningTTS' ,Value:req.query.OwningTTS} ,
 {Field: 'Sector' ,Value:req.query.Sector} ,
 {Field: 'Industry' ,Value:req.query.Industry} ,
 {Field: 'Solyear' ,Value: req.query.Solyear} ,
 {Field: 'SiebelNo' ,Value:req.query.SiebelNo} ,
  );

        var qryvarb = "select * from engagementprofile WHERE ";
        var j=0;

        for (let i= 1; i< NewExeArr.length+1 ;i++) { 
         if (i ===1 ) {
          if (NewExeArr[i-1].Value !== "undefined" && NewExeArr[i-1].Value !== "") { 

            if(j == 0){ 
              qryvarb = qryvarb+"("+NewExeArr[i-1].Field+" LIKE '%"+NewExeArr[i-1].Value+"%')";
              j=j+1;
            }
            else{
               qryvarb = qryvarb+" AND ("+NewExeArr[i-1].Field+"LIKE '%"+NewExeArr[i-1].Value+"%')";
            }
        }
         } else {
          if (NewExeArr[i-1].Value !== "undefined" && NewExeArr[i-1].Value !== "") { 

            if(j == 0){ 
              qryvarb = qryvarb+"("+NewExeArr[i-1].Field+"='"+NewExeArr[i-1].Value+"')";
              j=j+1;
            }
            else{
               qryvarb = qryvarb+" AND ("+NewExeArr[i-1].Field+"='"+NewExeArr[i-1].Value+"')";
            }
        }
         }
         }    
         //console.log(qryvarb)  
 pool.getConnection().then(conn => {        
    conn.query(qryvarb).then((EngProfileDataResult) => {

        res.send(EngProfileDataResult)
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"Fetch" : "Fail" })
        conn.end();
      })

  }).catch(err => {
    //not connected
  });

});
//end  

// Getting all Transition Executions

app.get('/AllProfiles/:OwningOrg',(req,res)=>{
  //  queryAllProfiles = "select * from transitionprofile";
  var OwningOrg = req.params.OwningOrg; 
  var Geo= "";

  var str=OwningOrg.split(',')
  for (let i= 0; i< str.length ;i++) {  
    if ( Geo === "") {
      Geo= "'"+str[i] +"'"
    } else {
      Geo= Geo +",'"+str[i] +"'"
    }


    }  

 queryAllProfiles = "select ClientName,IntegrationID,SiebelOppNo,Sector,Industry,TransitionStatus,"+
" TRANSITION_ID,USER_NAME,USER_FULLNAME  from"+
" ("+
" SELECT tp.ClientName as ClientName, tp.IntegrationID as IntegrationID,"+
" tp.SiebelOppNo as SiebelOppNo, tp.Sector as Sector,tp.Industry as Industry,"+
" tp.TransitionStatus as TransitionStatus"+
" FROM transitionprofile tp where tp.Geo in (" +Geo+") order by tp.Geo)"+
" as t1"+
" left join"+
" (SELECT"+
" TRANSITION_ID ,group_concat(USER_NAME) as USER_NAME ,group_concat(USER_FULLNAME) as USER_FULLNAME from"+
 " user_transition ut where USER_TYPE = 'Transition' group by TRANSITION_ID)"+
 " as t2"+
 " on t1.IntegrationID = t2.TRANSITION_ID"

    pool.getConnection().then(conn => {        
          conn.query(queryAllProfiles).then((AllExecutionResult) => {

              res.send(AllExecutionResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })

        }).catch(err => {
          //not connected
        });

});


// app.get("/AllProfiles",(req,res)=>{
//   //  queryAllProfiles = "select * from transitionprofile";
//   queryAllProfiles = "SELECT tp.ClientName, tp.IntegrationID, tp.SiebelOppNo, tp.Sector,"+
//   "tp.Industry, tp.TransitionStatus, ut.TRANSITION_ID, "+
//   "GROUP_CONCAT(ut.USER_NAME) AS USER_NAME, GROUP_CONCAT(ut.USER_FULLNAME) AS USER_FULLNAME "+
//   "FROM transitionprofile tp "+
//   "LEFT OUTER JOIN user_transition ut ON tp.IntegrationID=ut.TRANSITION_ID and USER_TYPE ='Transition'"+
//   " GROUP BY TRANSITION_ID ";
//     pool.getConnection().then(conn => {        
//           conn.query(queryAllProfiles).then((AllExecutionResult) => {
              
//               res.send(AllExecutionResult)
//               conn.end();
//             })
//             .catch(err => {
//               //handle error
//               res.send({"Fetch" : "Fail" })
//               conn.end();
//             })
            
//         }).catch(err => {
//           //not connected
//         });

// });



// Getting Active Transition Executions
app.get("/ActiveProfiles/:USER_ID",(req,res)=>{

  UserIDArray = [];
  var USER_ID = req.params.USER_ID

queryUserIDProfiles = "select TRANSITION_ID from user_transition WHERE USER_ID="+USER_ID;
pool.getConnection().then(conn => {        
  conn.query(queryUserIDProfiles).then((queryUserIDProfilesResult) => {
   var transIDProfiles = JSON.parse(JSON.stringify(queryUserIDProfilesResult));
   for (let i= 1; i< transIDProfiles.length+1 ;i++) {           
    UserIDArray.push(transIDProfiles[i-1].TRANSITION_ID);
  }
  var UserID = UserIDArray.join("','");
  queryTranistionProfiles = "SELECT * FROM transitionprofile WHERE TransitionStatus='Active' and IntegrationID IN ('"+UserID+"')";
  pool.getConnection().then(conn => {        
    conn.query(queryTranistionProfiles).then((queryTranistionProfilesResult) => {
      res.send(queryTranistionProfilesResult)
         conn.end();
      })
        .catch(err => {
           //handle error
           res.send({"Fetch" : "Fail" })
           conn.end();
        })          
      }).catch(err => {
        //not connected
      });        
          // res.send(queryUserIDProfilesResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })

    }).catch(err => {
      //not connected
    });
});
//==========================================================================================================================

//===========================Application information============================

// Getting Complexity  keywords profiles
app.get("/ComplexityKeyword",async(req,res)=>{
  
    queryComplexityKeyword = "select * from adminprofile WHERE FieldCategoryName='Complexity' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryComplexityKeyword).then((ComplexityKeyword) => {          
              res.send(ComplexityKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting Criticality keywords profiles
  app.get("/CriticalityKeyword",async(req,res)=>{
    
    queryCriticalityKeyword = "select * from adminprofile WHERE FieldCategoryName='Criticality' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryCriticalityKeyword).then((CriticalityKeyword) => {            
              res.send(CriticalityKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting Technology keywords profiles
  app.get("/TechnologyKeyword",(req,res)=>{
   
    queryTechnologyKeyword = "select * from adminprofile WHERE FieldCategoryName='Technology' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryTechnologyKeyword).then((TechnologyKeyword) => {            
              res.send(TechnologyKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting Vendor keywords profiles
  app.get("/VendorKeyword",(req,res)=>{
   
    queryVendorKeyword = "select * from adminprofile WHERE FieldCategoryName='Vendor' ORDER BY Categoryvalues ASC"; 
    pool.getConnection().then(conn => {        
          conn.query(queryVendorKeyword).then((VendorKeyword) => {           
              res.send(VendorKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting Vendor keywords profiles
  app.get("/app_CategoryKeyword",(req,res)=>{
   
    queryapp_CategoryKeyword ="select * from adminprofile WHERE FieldCategoryName='app_Category' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryapp_CategoryKeyword).then((app_CategoryKeyword) => {          
            res.send(app_CategoryKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })        
      }).catch(err => {
        //not connected
      });
  });
  
  // Getting Application Parameter keywords profiles
  app.get("/appsizeKeyword",(req,res)=>{
  
  queryappsizeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Size' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappsizeKeyword).then((appsizeKeyword) => {          
            res.send(appsizeKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })        
      }).catch(err => {
        //not connected
      });
  });
  
  // Getting Application Parameter keywords profiles
  app.get("/appFunctionsValueKeyword",(req,res)=>{
  
  queryappFunctionsValueKeyword ="select * from adminprofile WHERE FieldCategoryName='Function Points' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappFunctionsValueKeyword).then((appFunctionsValueKeyword) => {          
            res.send(appFunctionsValueKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })        
      }).catch(err => {
        //not connected
      });
  });
  
  // Getting Application Parameter keywords profiles
  app.get("/appLinesValueKeyword",(req,res)=>{
  
  queryappLinesValueKeyword ="select * from adminprofile WHERE FieldCategoryName='Lines of code' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappLinesValueKeyword).then((appLinesValueKeyword) => {          
            res.send(appLinesValueKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })        
      }).catch(err => {
        //not connected
      });
  });
  
  // Getting Application TYpe keywords profiles
  app.get("/appApplicationTypeKeyword",(req,res)=>{
  
  queryappApplicationTypeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Type' ORDER BY Categoryvalues ASC";
    pool.getConnection().then(conn => {        
        conn.query(queryappApplicationTypeKeyword).then((appApplicationTypeKeyword) => {            
            res.send(appApplicationTypeKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
  });
  
  //Getting Application Boolean Value Keywords.
  app.get("/CommonBooleanKeyword",async(req,res)=>{
  
  queryCommonBooleanKeyword = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
      pool.getConnection().then(conn => {        
        conn.query(queryCommonBooleanKeyword).then((queryCommonBooleanRes) => {
            res.send(queryCommonBooleanRes)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
      }).catch(err => {
        //not connected
      });
  });
  
  app.get('/getApplnInfo/:Id',(req,res)=>{
      // pool.getConnection(function(err, connection) {
      //     if (err) {
      //       return console.error('error: ' + err.message);
      //     }
      // var id = req.params.Id;
      // query = "select * from application_information where IntegrationID ='"+id +"'" ;    
      // connection.query(query,(err,ApplicationInformationResult,fields )=>{
      //     if (err){
      //         res.send({"Fetch" : "Fail" })
      //     }else{
      //         res.send(ApplicationInformationResult);
      //     }       
      //     connection.release();   
      //     res.end(finalresponse); 
      // });
      // });
  
  var id = req.params.Id;
  querygetApplnInfo =  "select * from application_information where IntegrationID ='"+id +"'" ;  
  pool.getConnection().then(conn => {        
        conn.query(querygetApplnInfo).then((ApplicationInformationResult) => {
            
            res.send(ApplicationInformationResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
  })
  // Getting  Duplicate Check for Application Info tab
app.get("/DuplicateAPPInfo",(req,res)=>{

  var AppName = req.query.AppName ; 
  var IntegrationID = req.query.IntegrationID;

  //var arr = Delivval.toString().trim();
  queryDuplicateAPPInfo="SELECT * FROM application_information "+
  "where IntegrationID='"+IntegrationID+"' and AppName='"+AppName+"'";

   pool.getConnection().then(conn => {        
    conn.query(queryDuplicateAPPInfo).then((queryDuplicateAPPInfoRes) => {
     res.send(queryDuplicateAPPInfoRes)
     conn.end();
    })
    .catch(err => {
      //handle error
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
  }).catch(err => {
    //not connected
  });  
});

app.post('/appInfoSave',(req,res)=>{
  var AppUNID = null;
  var AppId=req.body.AppId;     
  var AppName=req.body.AppName;    
  var Technology=req.body.Technology;  
  var OTec=req.body.OtherTechonology; 
  var OtherTechonology=OTec.replace(/'/g, "\\'");
  var Complexity=req.body.Complexity;
  var Criticality=req.body.Criticality;
  var Vendor=req.body.Vendor;
  var OVen=req.body.OtherVendor;
  var OtherVendor=OVen.replace(/'/g, "\\'");
  var app_Category=req.body.appCategory;
  var AppSizeParameter=req.body.appSizeParameter;
  var AppSizeValue=req.body.appSizeValue;
  var AppDescription=req.body.AppDescription;
  var appApplicationType=req.body.appApplicationType;
  var AppServiceAgreement=req.body.AppServiceAgreement;
  var AppRemark=req.body.AppRemark;
  var createdBy=req.body.createdBy;
  var modifiedBy=req.body.modifiedBy;
  var dt=moment(new Date());
  var createdDate = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var modifiedDate = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var IntegrationID=req.body.IntegrationID;

  queryappInfoSave ="insert into application_information values ("+AppUNID+",'"
  + AppId+"','"
  + AppName+"','"
  +Technology+"','"
  +OtherTechonology+"','"
  + Complexity+"','"
  + Criticality+"','"
  +Vendor+"','"
  +OtherVendor+"','"
  + app_Category+"','"
  + createdBy+"','"
  + modifiedBy+"','"
  +createdDate+"','"
  +modifiedDate+"','"
  + IntegrationID+"','"
  + AppSizeParameter+"','"
  + AppSizeValue+"','"
  + appApplicationType+"','"
  + AppDescription+"','"
  + AppServiceAgreement+"','"
  + AppRemark+"')";

  pool.getConnection().then(conn => {        
  conn.query(queryappInfoSave).then((appInfosave) => {     
  res.send({"save" : "success"} )
  conn.end();
  })
  .catch(err => {
  //handle error
  res.send({"save" : "Fail" })
  conn.end();
  })
  }).catch(err => {
  //not connected
  });
});

app.put('/appInfoUpdate',(req,res)=>{
   
    var AppUNID = req.body.AppUNID;
        var AppId = req.body.AppId;
        var AppName = req.body.AppName ;
        var Technology =req.body.Technology;   
        var OTec=req.body.OtherTechonology; 
        var OtherTechonology=OTec.replace(/'/g, "\\'");
        var Complexity = req.body.Complexity;
        var Criticality = req.body.Criticality;
        var Vendor = req.body.Vendor;
        var OVen=req.body.OtherVendor;
        var OtherVendor=OVen.replace(/'/g, "\\'");
        var app_Category = req.body.appCategory; 
        var AppSizeParameter = req.body.appSizeParameter;
        var AppSizeValue = req.body.appSizeValue; 
        var modifiedBy = req.body.modifiedBy;  
        var AppDescription = req.body.AppDescription;
        var appApplicationType = req.body.appApplicationType;
        var AppServiceAgreement = req.body.AppServiceAgreement;
        var AppRemark = req.body.AppRemark;
        var dt=moment(new Date());
        var modifiedDate = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        var IntegrationID = req.body.IntegrationID;

        queryappInfoUpdate = "Update application_information SET AppId='"+AppId
        +"',AppName='"+AppName
        +"',Technology='"+Technology
        +"',OtherTechonology='"+OtherTechonology
        +"',Complexity='"+Complexity
        +"',Criticality='"+Criticality
        +"',Vendor='"+Vendor
        +"',OtherVendor='"+OtherVendor
        +"',appCategory='"+app_Category
        +"',AppSizeParameter='"+AppSizeParameter
        +"',AppSizeValue='"+AppSizeValue
        +"',modifiedDate='"+modifiedDate
        +"',modifiedBy='"+modifiedBy
        +"',AppDescription='"+AppDescription
        +"',appApplicationType='"+appApplicationType
        +"',AppServiceAgreement='"+AppServiceAgreement
        +"',AppRemark='"+AppRemark
        +"' where AppUNID='"+AppUNID+"'";

    pool.getConnection().then(conn => {        
        conn.query(queryappInfoUpdate).then((AppInfoUpdatedata) => {
           
            res.send({"insert" : "success"} )
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"insert" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

 app.delete('/appInfoDelete/:AppUNID', (req, res) => {
    var AppUNID = req.params.AppUNID;
    const Table = [{
            "TableName": "readiness_question_tracker",
            "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
            "UITable": "* Manage Sprint >> Health & Readiness Tracking"
        },
        {
          "TableName": "application_servers",
          "CoulmnName": "AppUNID",
          "UITable": "* Master >> Application Servers"
        },
        {
            "TableName": "raid",
            "CoulmnName": "AppUNID",
            "UITable": "* Manage Sprint >> RAID"
        },
        {
          "TableName": "sprintscope",
          "CoulmnName": "AppUNID",
          "UITable": "* Transition Plan >> Sprint Execution Plan >> Sprint scope"
        },
        {
          "TableName": "app_trainee_map",
          "CoulmnName": "APP_ID",
          "UITable": "* Master >> App Vs Trainee Mapping"
        }
    ];

    const Result = ['Application can not be deleted as Application mapped to below functionalities:',
        ''
    ];

    deleteCheck(Table, Result, AppUNID,'application')

    setTimeout(() => {
        if (Result.length === 2) {
            pool.getConnection().then(conn => {
                queryappInfoDelete = "DELETE FROM application_information WHERE AppUNID ='" + AppUNID + "'";
                conn.query(queryappInfoDelete).then((stakeholderDeletedata) => {

                        res.send({
                            "Delete": "success"
                        })
                        conn.end();
                    })
                    .catch(err => {
                        //handle error
                        res.send({
                            "Delete": "Fail"
                        })
                        conn.end();
                    })

            }).catch(err => {
                //not connected
            });
        } else {
            res.send({
                "Delete": Result
            })
        }
    }, 1000);

});
app.get('/getexcelAppInfo' ,(req,res)=>{
  var wb = new xl.Workbook();
// const filename = "SampleAppInfo-"+new Date().getTime()+".csv";
const filename = "SampleAppInfo.csv";

// Add Worksheets to the workbook
var ws = wb.addWorksheet('Data');
//var ws2 = wb.addWorksheet('Instructions'); 
const ws2 = wb.addWorksheet('Instructions', {
  sheetProtection: {
    selectLockedCells: true,
  },
  sheetView: {   
    showGridLines: false, // Flag indicating whether the sheet should have gridlines enabled or disabled during view
}
});

res.setHeader('Content-Type', 'application/octet-stream');
res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
wb.write(filename); 

querySampleComplexityKeyword = "select * from adminprofile WHERE FieldCategoryName='Complexity' ORDER BY Categoryvalues ASC"; 
pool.getConnection().then(conn => {        
conn.query(querySampleComplexityKeyword).then((SampleComplexity) => {
           var  SampleComplexityVal=JSON.parse(JSON.stringify(SampleComplexity));
                for( let i=1; i< SampleComplexityVal.length+1; i++){
           //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
          ws2.cell(i, 10).string(SampleComplexityVal[i-1]["Categoryvalues"]); // j Column
         ws2.column(10).hide();
         wb.write(filename);
          }                        
conn.end();
});       
});

querySampleCriticalityKeyword = "select * from adminprofile WHERE FieldCategoryName='Criticality' ORDER BY Categoryvalues ASC"; 
pool.getConnection().then(conn => {        
conn.query(querySampleCriticalityKeyword).then((SampleCriticality) => {
          var  SampleCriticalityVal=JSON.parse(JSON.stringify(SampleCriticality));
               for( let i=1; i< SampleCriticalityVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 11).string(SampleCriticalityVal[i-1]["Categoryvalues"]); // K Column
        ws2.column(11).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleTechnologyKeyword = "select * from adminprofile WHERE FieldCategoryName='Technology' ORDER BY Categoryvalues ASC"; 
pool.getConnection().then(conn => {        
conn.query(querySampleTechnologyKeyword).then((SampleTechnology) => {
          var  SampleTechnologyVal=JSON.parse(JSON.stringify(SampleTechnology));
               for( let i=1; i< SampleTechnologyVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 12).string(SampleTechnologyVal[i-1]["Categoryvalues"]); // L Column
        ws2.column(12).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleVendorKeyword = "select * from adminprofile WHERE FieldCategoryName='Vendor' ORDER BY Categoryvalues ASC"; 
pool.getConnection().then(conn => {        
conn.query(querySampleVendorKeyword).then((SampleVendor) => {
          var  SampleVendorVal=JSON.parse(JSON.stringify(SampleVendor));
               for( let i=1; i< SampleVendorVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 13).string(SampleVendorVal[i-1]["Categoryvalues"]); // M Column
        ws2.column(13).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleapp_CategoryKeyword ="select * from adminprofile WHERE FieldCategoryName='app_Category' ORDER BY Categoryvalues ASC";
pool.getConnection().then(conn => {        
conn.query(querySampleapp_CategoryKeyword).then((Sampleapp_Category) => {
          var  Sampleapp_CategoryVal=JSON.parse(JSON.stringify(Sampleapp_Category));
               for( let i=1; i< Sampleapp_CategoryVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 14).string(Sampleapp_CategoryVal[i-1]["Categoryvalues"]); // N Column
        ws2.column(14).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleappsizeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Size' ORDER BY Categoryvalues ASC";
pool.getConnection().then(conn => {        
conn.query(querySampleappsizeKeyword).then((Sampleappsize) => {
          var  SampleappsizeVal=JSON.parse(JSON.stringify(Sampleappsize));
               for( let i=1; i< SampleappsizeVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 15).string(SampleappsizeVal[i-1]["Categoryvalues"]); // O Column
        ws2.column(15).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleappFunctionsKeyword ="select * from adminprofile WHERE FieldCategoryName='Function Points' ORDER BY Categoryvalues ASC";
pool.getConnection().then(conn => {        
conn.query(querySampleappFunctionsKeyword).then((SampleappFunctions) => {
          var  SampleappFunctionsVal=JSON.parse(JSON.stringify(SampleappFunctions));
               for( let i=1; i< SampleappFunctionsVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 16).string(SampleappFunctionsVal[i-1]["Categoryvalues"]); // P Column
        ws2.column(16).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleappLinesKeyword ="select * from adminprofile WHERE FieldCategoryName='Lines of code' ORDER BY Categoryvalues ASC";
pool.getConnection().then(conn => {        
conn.query(querySampleappLinesKeyword).then((SampleappLines) => {
          var  SampleappLinesVal=JSON.parse(JSON.stringify(SampleappLines));
               for( let i=1; i< SampleappLinesVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 17).string(SampleappLinesVal[i-1]["Categoryvalues"]); // Q Column
        ws2.column(17).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

querySampleAppTypeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Type' ORDER BY Categoryvalues ASC";
pool.getConnection().then(conn => {        
conn.query(querySampleAppTypeKeyword).then((SampleAppType) => {
          var  SampleAppTypeVal=JSON.parse(JSON.stringify(SampleAppType));
               for( let i=1; i< SampleAppTypeVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 18).string(SampleAppTypeVal[i-1]["Categoryvalues"]); // R Column
        ws2.column(18).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

ws2.cell(1, 20).string("Not Available")
ws2.column(20).hide();
wb.write(filename);

querySampleBooleanKeyword = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
pool.getConnection().then(conn => {        
conn.query(querySampleBooleanKeyword).then((SampleBoolean) => {
          var  SampleBooleanVal=JSON.parse(JSON.stringify(SampleBoolean));
               for( let i=1; i< SampleBooleanVal.length+1; i++){
          //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
         ws2.cell(i, 19).string(SampleBooleanVal[i-1]["Categoryvalues"]); // S Column
        ws2.column(19).hide();
        wb.write(filename);
         }                        
conn.end();
});       
});

ws2.cell(1, 1).string("Note: Please do not do any changes for 2nd row in the Data Sheet.");
ws2.cell(2, 1).string("Note: Please do not do any modifications / delete any data in the Instructions Sheet.");
// ws2.mergeCells('A1:D1');
// ws2.mergeCells('A2:D2');
ws2.cell(1, 1, 1, 4,true).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
},
font: {
  name: 'Arial',
   size: 10 ,
  bold: true,
  color: '#FF0000',
  },
});
ws2.cell(2, 1, 2, 4,true).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
},
font: {
  name: 'Arial',
   size: 10 ,
  bold: true,
  color: '#FF0000',
  },
});

const data = [
{   "ColumnName": "Column Name",   "Format": "Format",    "Example": "Example",  "MandatoryColumns": "Mandatory Columns"},          
{   "ColumnName": "AppId",   "Format": "Application ID",    "Example": "App1234" ,   "MandatoryColumns": "Mandatory"},
{   "ColumnName": "AppName",   "Format": "Application Name",    "Example": "UBC",   "MandatoryColumns": "Mandatory"},
{   "ColumnName": "appApplicationType",   "Format": "'Custom' or 'Package Application Services' or '3rd Party Software'",   "Example": "Custom",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "appSizeParameter",   "Format": "'Line of Code' or 'Function Point'",    "Example": "Function Point",   "MandatoryColumns": "Mandatory"},
{   "ColumnName": "appSizeValue",   "Format": "'NA' or '< 100' or '101 to 500 FPs' or '501 to 1500 FPs' or '> 4000 FPs' or '1501 to 4000 FPs'",    "Example": "< 100",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "Complexity",   "Format": "'High' or 'Medium' or 'Low'",    "Example": "Medium",   "MandatoryColumns": "Mandatory"},
{   "ColumnName": "Criticality",   "Format": "'High' or 'Medium' or 'Low'",    "Example": "Medium",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "appCategory",   "Format": "'Bronze' or 'Silver' or 'Gold'",    "Example": "Gold",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "Technology",   "Format": "DotNet, JAVA, Oracle, SAP,Other",    "Example": "JAVA",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "OtherTechonology",   "Format": "If Technology='Other'",    "Example": "Other Techonology",  "MandatoryColumns": "Mandatory If Technology is 'Other'"}, 
{   "ColumnName": "Vendor",   "Format": "'Cognizant' or 'TCS' or 'Infosys' or 'Other'",    "Example": "Cognizant",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "OtherVendor",   "Format": "If Vendor= 'Other'",    "Example": "Other Vendor Name",  "MandatoryColumns": "Mandatory If Vendor is 'Other'"},
{   "ColumnName": "Service Agreement",   "Format": "'Yes' or 'No'",    "Example": "Yes",  "MandatoryColumns": "Mandatory"},
{   "ColumnName": "Remark",   "Format": "If there is any Remark",    "Example": "Remark",  "MandatoryColumns": "Optional"},
{   "ColumnName": "AppDescription",   "Format": "Application Description",    "Example": "Application Description",  "MandatoryColumns": "Optional"}
];
ws2.column(1).setWidth(20);
ws2.column(2).setWidth(60);
ws2.column(3).setWidth(30);
ws2.column(4).setWidth(30);

var myStyle = wb.createStyle({
fill: {
type: 'pattern',
patternType: 'solid',
bgColor: '#1D3649',
fgColor: '#1D3649',
},
font: {
name: 'Arial',
 size: 10 ,
bold: true,
color: 'FFFFFF',
},
alignment: {
horizontal: 'center',
vertical: 'center',
wrapText: true,
},
});
ws2.cell( 4, 1).style(myStyle);
ws2.cell( 4, 2).style(myStyle);
ws2.cell( 4, 3).style(myStyle);
ws2.cell( 4, 4).style(myStyle);
for (let i = 0; i < data.length; i += 1) {
 ws2.cell(i + 4, 1).string(data[i].ColumnName);
 ws2.cell(i + 4, 2).string(data[i].Format);
 ws2.cell(i + 4, 3).string(data[i].Example);
 ws2.cell(i + 4, 4).string(data[i].MandatoryColumns);
}
ws2.cell(4, 1, 19, 4).style({border: {
                         left: { style: 'thin'},        
                         right: { style: 'thin'},  
                         top: { style: 'thin'},  
                         bottom: { style: 'thin'} 
                       }
});

//worksheet1 data populate
const sheet1data = [
{ header: 'AppId',  width: 15 },
{ header: 'AppName',  width: 20 },
{ header: 'appApplicationType',  width: 18},
{ header: 'AppSizeParameter', width: 18},
{ header: 'AppSizeValue', width: 19},
{ header: 'Complexity', width: 10},
{ header: 'Criticality', width: 10},
{ header: 'appCategory',  width: 15 },
{ header: 'Technology',  width: 20 },
{ header: 'OtherTechonology',  width: 20},
{ header: 'Vendor', width: 20},
{ header: 'OtherVendor', width: 20 },
{ header: 'AppServiceAgreement', width: 19},
{ header: 'AppRemark', width: 25},
{ header: 'AppDescription',  width: 25},
];


ws.row(2).hide();
var sheet1Row =1;
for (let i = 0; i < sheet1data.length; i += 1) {
ws.cell( sheet1Row, i+1).string(sheet1data[i].header);
ws.cell( sheet1Row , i+1).style(myStyle);
ws.column(i+1).setWidth(sheet1data[i].width);
}

//for loop
ws.cell(1, 1, 1, 15).style({border: {
                                    left: { style: 'thin'},        
                                    right: { style: 'thin'},  
                                    top: { style: 'thin'},  
                                    bottom: { style: 'thin'} 
                                  }
});

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Application Type',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'C3:C100',
formulas: ['=OFFSET(Instructions!$R$1,0,0,COUNTA(Instructions!$R:$R),1)']
});                             

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Application Size',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'D3:D100',
formulas: ['=OFFSET(Instructions!$O$1,0,0,COUNTA(Instructions!$O:$O),1)']
});    

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Application Size Value',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'E3:E100',
formulas: ['=IF(D3="","",IF(D3="Not Available",OFFSET(Instructions!$T$1,0,0,COUNTA(Instructions!$T:$T),1),IF(D3="Lines of code",OFFSET(Instructions!$Q$1,0,0,COUNTA(Instructions!$Q:$Q),1),OFFSET(Instructions!$P$1,0,0,COUNTA(Instructions!$P:$P),1))))']
});    

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Complexity',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'F3:F100',
formulas: ['=OFFSET(Instructions!$J$1,0,0,COUNTA(Instructions!$J:$J),1)']
});   

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Criticality',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'G3:G100',
formulas: ['=OFFSET(Instructions!$K$1,0,0,COUNTA(Instructions!$K:$K),1)']
});  

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Category',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'H3:H100',
formulas: ['=OFFSET(Instructions!$N$1,0,0,COUNTA(Instructions!$N:$N),1)']
});  

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Technology',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'I3:I100',
formulas: ['=OFFSET(Instructions!$L$1,0,0,COUNTA(Instructions!$L:$L),1)']
});  

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Incumbent Service Provider',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'K3:K100',
formulas: ['=OFFSET(Instructions!$M$1,0,0,COUNTA(Instructions!$M:$M),1)']
});  

ws.addDataValidation({
type: 'list',
allowBlank: true,
prompt: 'Service Agreement',
error: 'Invalid choice was chosen',
showDropDown: true,
sqref: 'M3:M100',
formulas: ['=OFFSET(Instructions!$S$1,0,0,COUNTA(Instructions!$S:$S),1)']
});  

var myStyle1 = wb.createStyle({
fill: {
type: 'pattern',
patternType: 'solid',
bgColor: '00FF00',
fgColor: '00FF00',
},
});     
wb.write(filename);
setTimeout(() => { 
  // wb.write(filename);
var filePath = __dirname+'\\'+filename;
res.setHeader('Content-Type', 'application/octet-stream');
res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
// setTimeout(()=>{
//   try {
//       // //console.log('remove' +filePath)
//    fs.unlinkSync(filePath)
//    //file removed
//  } catch(err) {
//    console.error(err)
//  }
//   }, 6000)
return res.sendFile(filePath);
}, 4000) 
}); 

function ApplicationInfoExcel(activities,filenameApp,arrayAppName,arrayAppType,arraySize,arraySizevalfun,arraySizevalLines,arrayComplexity,arrayCriticality,arrayCategory,arrayTechnology,arrayVendor,arraySerAgree){
    
  var wb = new xl.Workbook();
  // const filenameApp = "SampleAppInfo.csv";
  
  // Add Worksheets to the workbook
  var ws = wb.addWorksheet('Data');
  var ws2 = wb.addWorksheet('Instructions');
  
  // res.setHeader('Content-Type', 'application/octet-stream');
  // res.setHeader('Content-Disposition', 'attachment; filename=' + filenameApp);
  wb.write(filenameApp); 
  // //console.log("filenameApp"+filenameApp)

querySampleAppTypeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Type' ORDER BY Categoryvalues ASC";
 pool.getConnection().then(conn => {        
   conn.query(querySampleAppTypeKeyword).then((SampleAppType) => {
              var  SampleAppTypeVal=JSON.parse(JSON.stringify(SampleAppType));
                   for( let i=1; i< SampleAppTypeVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 10).string(SampleAppTypeVal[i-1]["Categoryvalues"]); // J Column
             arrayAppType.push(SampleAppTypeVal[i-1]["Categoryvalues"])
            ws2.column(10).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleappsizeKeyword ="select * from adminprofile WHERE FieldCategoryName='Application Size' ORDER BY Categoryvalues ASC";
 pool.getConnection().then(conn => {        
   conn.query(querySampleappsizeKeyword).then((Sampleappsize) => {
              var  SampleappsizeVal=JSON.parse(JSON.stringify(Sampleappsize));
                   for( let i=1; i< SampleappsizeVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 11).string(SampleappsizeVal[i-1]["Categoryvalues"]); // K Column
             arraySize.push(SampleappsizeVal[i-1]["Categoryvalues"])
            ws2.column(11).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleappFunctionsKeyword ="select * from adminprofile WHERE FieldCategoryName='Function Points' ORDER BY Categoryvalues ASC";
 pool.getConnection().then(conn => {        
   conn.query(querySampleappFunctionsKeyword).then((SampleappFunctions) => {
              var  SampleappFunctionsVal=JSON.parse(JSON.stringify(SampleappFunctions));
                   for( let i=1; i< SampleappFunctionsVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 12).string(SampleappFunctionsVal[i-1]["Categoryvalues"]); // L Column
             arraySizevalfun.push(SampleappFunctionsVal[i-1]["Categoryvalues"])
            ws2.column(12).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleappLinesKeyword ="select * from adminprofile WHERE FieldCategoryName='Lines of code' ORDER BY Categoryvalues ASC";
 pool.getConnection().then(conn => {        
   conn.query(querySampleappLinesKeyword).then((SampleappLines) => {
              var  SampleappLinesVal=JSON.parse(JSON.stringify(SampleappLines));
                   for( let i=1; i< SampleappLinesVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 13).string(SampleappLinesVal[i-1]["Categoryvalues"]); // M Column
             arraySizevalLines.push(SampleappLinesVal[i-1]["Categoryvalues"])
            ws2.column(13).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

  querySampleComplexityKeyword = "select * from adminprofile WHERE FieldCategoryName='Complexity' ORDER BY Categoryvalues ASC"; 
  pool.getConnection().then(conn => {        
    conn.query(querySampleComplexityKeyword).then((SampleComplexity) => {
               var  SampleComplexityVal=JSON.parse(JSON.stringify(SampleComplexity));
                    for( let i=1; i< SampleComplexityVal.length+1; i++){
               //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
              ws2.cell(i, 14).string(SampleComplexityVal[i-1]["Categoryvalues"]); // N Column
              arrayComplexity.push(SampleComplexityVal[i-1]["Categoryvalues"]) 
             ws2.column(14).hide();
             wb.write(filenameApp);
              }                        
    conn.end();
  });       
 });

 querySampleCriticalityKeyword = "select * from adminprofile WHERE FieldCategoryName='Criticality' ORDER BY Categoryvalues ASC"; 
 pool.getConnection().then(conn => {        
   conn.query(querySampleCriticalityKeyword).then((SampleCriticality) => {
              var  SampleCriticalityVal=JSON.parse(JSON.stringify(SampleCriticality));
                   for( let i=1; i< SampleCriticalityVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 15).string(SampleCriticalityVal[i-1]["Categoryvalues"]); // O Column
             arrayCriticality.push(SampleCriticalityVal[i-1]["Categoryvalues"]) 
            ws2.column(15).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleapp_CategoryKeyword ="select * from adminprofile WHERE FieldCategoryName='app_Category' ORDER BY Categoryvalues ASC";
 pool.getConnection().then(conn => {        
   conn.query(querySampleapp_CategoryKeyword).then((Sampleapp_Category) => {
              var  Sampleapp_CategoryVal=JSON.parse(JSON.stringify(Sampleapp_Category));
                   for( let i=1; i< Sampleapp_CategoryVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 16).string(Sampleapp_CategoryVal[i-1]["Categoryvalues"]); // P Column
             arrayCategory.push(Sampleapp_CategoryVal[i-1]["Categoryvalues"])
            ws2.column(16).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

 querySampleTechnologyKeyword = "select * from adminprofile WHERE FieldCategoryName='Technology' ORDER BY Categoryvalues ASC"; 
 pool.getConnection().then(conn => {        
   conn.query(querySampleTechnologyKeyword).then((SampleTechnology) => {
              var  SampleTechnologyVal=JSON.parse(JSON.stringify(SampleTechnology));
                   for( let i=1; i< SampleTechnologyVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 17).string(SampleTechnologyVal[i-1]["Categoryvalues"]); // Q Column
             arrayTechnology.push(SampleTechnologyVal[i-1]["Categoryvalues"])              
            ws2.column(17).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleVendorKeyword = "select * from adminprofile WHERE FieldCategoryName='Vendor' ORDER BY Categoryvalues ASC"; 
 pool.getConnection().then(conn => {        
   conn.query(querySampleVendorKeyword).then((SampleVendor) => {
              var  SampleVendorVal=JSON.parse(JSON.stringify(SampleVendor));
                   for( let i=1; i< SampleVendorVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 18).string(SampleVendorVal[i-1]["Categoryvalues"]); // R Column
             arrayVendor.push(SampleVendorVal[i-1]["Categoryvalues"])
            ws2.column(18).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

querySampleBooleanKeyword = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
 pool.getConnection().then(conn => {        
   conn.query(querySampleBooleanKeyword).then((SampleBoolean) => {
              var  SampleBooleanVal=JSON.parse(JSON.stringify(SampleBoolean));
                   for( let i=1; i< SampleBooleanVal.length+1; i++){
              //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
             ws2.cell(i, 19).string(SampleBooleanVal[i-1]["Categoryvalues"]); // S Column
             arraySerAgree.push(SampleBooleanVal[i-1]["Categoryvalues"])
            ws2.column(19).hide();
            wb.write(filenameApp);
             }                        
   conn.end();
 });       
});

var ImportIntegrationID = activities[activities.length-1]["App_IntegrationID"];


queryAppInfoAppNames = "select * from application_information WHERE IntegrationID='"+ImportIntegrationID+"'" ; 
pool.getConnection().then(conn => {        
   conn.query(queryAppInfoAppNames).then((queryAppInfoAppNamesRes) => {
              var DataAppNames=JSON.parse(JSON.stringify(queryAppInfoAppNamesRes));
                   for( let i=1; i< DataAppNames.length+1; i++){              
                    arrayAppName.push(DataAppNames[i-1]["AppName"])
                   }                    
   conn.end();
 });       
});


const data = [
  {   "ColumnName": "Column Name",   "Format": "Format",    "Example": "Example"},          
  {   "ColumnName": "AppId",   "Format": "Application ID",    "Example": "App1234"},
  {   "ColumnName": "AppName",   "Format": "Application Name",    "Example": "UBC"},
  {   "ColumnName": "appApplicationType",   "Format": "'Custom' or 'Package Application Services' or '3rd Party Software'",   "Example": "Custom"},
  {   "ColumnName": "appSizeParameter",   "Format": "'Line of Code' or 'Function Point'",    "Example": "Function Point"},
  {   "ColumnName": "appSizeValue",   "Format": "'NA' or '< 100' or '101 to 500 FPs' or '501 to 1500 FPs' or '> 4000 FPs' or '1501 to 4000 FPs'",    "Example": "< 100"},
  {   "ColumnName": "Complexity",   "Format": "'High' or 'Medium' or 'Low'",    "Example": "Medium"},
  {   "ColumnName": "Criticality",   "Format": "'High' or 'Medium' or 'Low'",    "Example": "Medium"},
  {   "ColumnName": "appCategory",   "Format": "'Bronze' or 'Silver' or 'Gold'",    "Example": "Gold"},
  {   "ColumnName": "Technology",   "Format": "DotNet, JAVA, Oracle, SAP,Other",    "Example": "JAVA"},
  {   "ColumnName": "OtherTechonology",   "Format": "If Technology='Other'",    "Example": "Other Techonology"}, 
  {   "ColumnName": "Vendor",   "Format": "'Cognizant' or 'TCS' or 'Infosys' or 'Other'",    "Example": "Cognizant"},
  {   "ColumnName": "OtherVendor",   "Format": "If Vendor= 'Other'",    "Example": "Other Vendor Name"},
  {   "ColumnName": "AppServiceAgreement",   "Format": "'Yes' or 'No'",    "Example": "Yes"},
  {   "ColumnName": "AppRemark",   "Format": "If there is any Remark",    "Example": "Remark"},
  {   "ColumnName": "AppDescription",   "Format": "Application Description",    "Example": "Application Description"}
];
 ws2.column(1).setWidth(20);
 ws2.column(2).setWidth(60);
 ws2.column(3).setWidth(30);

 var myStyle = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#1D3649',
    fgColor: '#1D3649',
  },
  font: {
    name: 'Arial',
     size: 10 ,
    bold: true,
    color: 'FFFFFF',
  },
  alignment: {
  horizontal: 'center',
  vertical: 'center',
  },
});
ws2.cell( 1, 1).style(myStyle);
  ws2.cell( 1, 2).style(myStyle);
  ws2.cell( 1, 3).style(myStyle);
  for (let i = 0; i < data.length; i += 1) {
     ws2.cell(i + 1, 1).string(data[i].ColumnName);
     ws2.cell(i + 1, 2).string(data[i].Format);
     ws2.cell(i + 1, 3).string(data[i].Example);
  }
  ws2.cell(1, 1, 16, 3).style({border: {
                             left: { style: 'thin'},        
                             right: { style: 'thin'},  
                             top: { style: 'thin'},  
                             bottom: { style: 'thin'} 
                           }
  });
  
//worksheet1 data populate
const sheet1data = [
  { header: 'AppId',  width: 15 },
  { header: 'AppName',  width: 20 },
  { header: 'appApplicationType',  width: 18},
  { header: 'AppSizeParameter', width: 18},
  { header: 'AppSizeValue', width: 19},
  { header: 'Complexity', width: 10},
  { header: 'Criticality', width: 10},
  { header: 'appCategory',  width: 15 },
  { header: 'Technology',  width: 20 },
  { header: 'OtherTechonology',  width: 20},
  { header: 'Vendor', width: 20},
  { header: 'OtherVendor', width: 20 },
  { header: 'AppServiceAgreement', width: 19},
  { header: 'AppRemark', width: 25},
  { header: 'AppDescription',  width: 25},
];

var Sheet1Row = 1;
var cnt = 1;
for (let i = 0; i < sheet1data.length; i += 1) {
 ws.cell( Sheet1Row, i+1).string(sheet1data[i].header);
 ws.cell( Sheet1Row, i+1).style(myStyle);
 ws.column(i+1).setWidth(sheet1data[i].width);
 ws.cell( Sheet1Row, i+18).string(sheet1data[i].header);
 ws.cell( Sheet1Row, i+18).style(myStyle);
 ws.column(i+18).setWidth(sheet1data[i].width);
}

var myStyleRed = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#ffbf00',
  fgColor: '#ffbf00',
  },
  font: {
    name: 'Arial',
     size: 10 ,
    bold: true,
    color: '#FF0000',
  },
  alignment: {
  // horizontal: 'center',
  vertical: 'center',
  //MergeCell: true,
  },
});

var Sheetcount=activities.length;
Sheetcount=Sheetcount+1;
ws.cell(1, 1, Sheetcount,sheet1data.length).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
}
});
const Range= 'R3:AF'+Sheetcount
ws.cell( 2, 1, 2, 15,true).formula('IF(COUNTIF('+Range+',"No")>0,"Please validate the data","")')
ws.cell( 2, 1).style(myStyleRed);
ws.row(2).setHeight(20);

setTimeout(() => {

for( var i=0; i< activities.length-1; i++){
  Sheet1Row = i+3;
  var count = i+3;
  if (activities[i]["AppId"] !== undefined){
    ws.cell( Sheet1Row, 1).string(activities[i]["AppId"]);
  }

  if (activities[i]["AppName"] !== undefined){
    ws.cell( Sheet1Row, 2).string(activities[i]["AppName"]); 
    if (arrayAppName.includes(activities[i]["AppName"]) === true){
      ws.cell(Sheet1Row, 2).style(myStyle1);
     }      
    arrayAppName.push(activities[i]["AppName"])
  }
  
  if (activities[i]["appApplicationType"] !== undefined){
    ws.cell( Sheet1Row, 3).string(activities[i]["appApplicationType"]);
  }
  if (activities[i]["AppSizeParameter"] !== undefined){
    ws.cell( Sheet1Row, 4).string(activities[i]["AppSizeParameter"]);
  }
  if (activities[i]["AppSizeValue"] !== undefined){
    ws.cell( Sheet1Row, 5).string(activities[i]["AppSizeValue"]);
  }
  if (activities[i]["Complexity"] !== undefined){
    ws.cell( Sheet1Row, 6).string(activities[i]["Complexity"]);
  }
  if (activities[i]["Criticality"] !== undefined){
    ws.cell( Sheet1Row, 7).string(activities[i]["Criticality"]);
  }
  if (activities[i]["appCategory"] !== undefined){
    ws.cell( Sheet1Row, 8).string(activities[i]["appCategory"]);
  }
  if (activities[i]["Technology"] !== undefined){
    ws.cell( Sheet1Row, 9).string(activities[i]["Technology"]);
  }
  if (activities[i]["OtherTechonology"] !== undefined){
    ws.cell( Sheet1Row, 10).string(activities[i]["OtherTechonology"]);
  }
  if (activities[i]["Vendor"] !== undefined){
    ws.cell( Sheet1Row, 11).string(activities[i]["Vendor"]);
  }
  if (activities[i]["OtherVendor"] !== undefined){
    ws.cell( Sheet1Row, 12).string(activities[i]["OtherVendor"]);
  }
  if (activities[i]["AppServiceAgreement"] !== undefined){
    ws.cell( Sheet1Row, 13).string(activities[i]["AppServiceAgreement"]);
  }
  if (activities[i]["AppRemark"] !== undefined){
    ws.cell( Sheet1Row, 14).string(activities[i]["AppRemark"]);
  }
  if (activities[i]["AppDescription"] !== undefined){
    ws.cell( Sheet1Row, 15).string(activities[i]["AppDescription"]);
  }
  
  ws.cell( count, 18).formula('=IF(A'+Sheet1Row+'="","No","Yes")');
  //ws.cell( count, 19).formula('=IF(B'+Sheet1Row+'="","No","Yes")');
  ws.cell( count, 19).formula('=IF(B'+Sheet1Row+'="","No",IF(COUNTIF(Data!$B:$B,TRIM(B'+Sheet1Row+'))>1,"No","Yes"))');
  ws.cell( count, 20).formula('=IF(SUMPRODUCT((--EXACT(C'+Sheet1Row+',OFFSET(Instructions!$J$1,0,0,COUNTA(Instructions!$J:$J),1))))=0,"No","Yes")');
  ws.cell( count, 21).formula('=IF(SUMPRODUCT((--EXACT(D'+Sheet1Row+',OFFSET(Instructions!$K$1,0,0,COUNTA(Instructions!$K:$K),1))))=0,"No","Yes")');  
 ws.cell( count, 22).formula('=IF(E'+Sheet1Row+'="","No",IF(D'+Sheet1Row+'="Lines of code",IF(SUMPRODUCT((--EXACT(E'+Sheet1Row+',OFFSET(Instructions!$M$1,0,0,COUNTA(Instructions!$M:$M),1))))=0,"No","Yes"),IF(SUMPRODUCT((--EXACT(E'+Sheet1Row+',OFFSET(Instructions!$L$1,0,0,COUNTA(Instructions!$L:$L),1))))=0,"No","Yes")))');  
  ws.cell(count, 23).formula('=IF(SUMPRODUCT((--EXACT(F'+Sheet1Row+',OFFSET(Instructions!$N$1,0,0,COUNTA(Instructions!$N:$N),1))))=0,"No","Yes")');  
  ws.cell( count, 24).formula('=IF(SUMPRODUCT((--EXACT(G'+Sheet1Row+',OFFSET(Instructions!$O$1,0,0,COUNTA(Instructions!$O:$O),1))))=0,"No","Yes")');  
  ws.cell( count, 25).formula('=IF(SUMPRODUCT((--EXACT(H'+Sheet1Row+',OFFSET(Instructions!$P$1,0,0,COUNTA(Instructions!$P:$P),1))))=0,"No","Yes")');  
  ws.cell( count, 26).formula('=IF(SUMPRODUCT((--EXACT(I'+Sheet1Row+',OFFSET(Instructions!Q$1,0,0,COUNTA(Instructions!$Q:$Q),1))))=0,"No","Yes")');  
  ws.cell( count, 27).formula('=IF(AND(I'+Sheet1Row+'="Other",J'+Sheet1Row+'="")=TRUE,"No","Yes")');
  ws.cell( count, 28).formula('=IF(SUMPRODUCT((--EXACT(K'+Sheet1Row+',OFFSET(Instructions!$R$1,0,0,COUNTA(Instructions!$R:$R),1))))=0,"No","Yes")');
  ws.cell( count, 29).formula('=IF(AND(K'+Sheet1Row+'="Other",L'+Sheet1Row+'="")=TRUE,"No","Yes")');
 ws.cell( count, 30).formula('=IF(SUMPRODUCT((--EXACT(M'+Sheet1Row+',OFFSET(Instructions!$S$1,0,0,COUNTA(Instructions!$S:$S),1))))=0,"No","Yes")');
  
    //  wb.write(filenameApp);
}  

},1000)

for( var i=18; i< 33; i++){
  ws.column(i).hide();
 }

// addDataValidation
let DVcellnum ='';
 for (let col = 3; col <= 13; col ++) {
   if (col >5 && col <10) {
    DVcellnum =8+col;
   } else if (col >12) {
    DVcellnum =6+col; 
  } else {
    DVcellnum =7+col;
   }
  if(col === 5){
        ws.addDataValidation({
      type: 'list',
      allowBlank: true,
      prompt: 'Application Type',
      error: 'Invalid choice was chosen',
      showDropDown: true,
      sqref: 'E3:E100',
      formulas: ['=IF(D3="","",IF(D3="Lines of code",OFFSET(Instructions!$M$1,0,0,COUNTA(Instructions!$M:$M),1),OFFSET(Instructions!$L$1,0,0,COUNTA(Instructions!$L:$L),1)))'] 
    }); 

  } 
if((col !== 5) && (col !== 10) && (col !== 12)){
   WsDataRange =xl.getExcelCellRef(3, col)+":"+xl.getExcelCellRef( 100, col); 

  const DVcellalpha = xl.getExcelAlpha(DVcellnum);
  // //console.log('OFFSET(Instructions!$'+DVcellalpha+'$1,0,0,COUNTA(Instructions!$'+DVcellalpha+':$'+DVcellalpha+'),1)')
  ws.addDataValidation({
    type: 'list',
    allowBlank: true,
    // prompt: 'Application Type',
    error: 'Invalid choice was chosen',
    showDropDown: true,
    sqref: WsDataRange,
    formulas: ['=OFFSET(Instructions!$'+DVcellalpha+'$1,0,0,COUNTA(Instructions!$'+DVcellalpha+':$'+DVcellalpha+'),1)'] 
  }); 
}
}

var myStyle1 = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#ffbf00',
    fgColor: '#ffbf00',
  },
 });  

 //ConditionalFormattingRule for all the Rows.
 for (let col = 1; col <= 15; col ++) {
   WsRange =xl.getExcelCellRef(3, col)+":"+xl.getExcelCellRef( Sheetcount, col);  
   const cellnum =col+17;  
   const cellrange =xl.getExcelCellRef(3, cellnum); 
   ws.addConditionalFormattingRule(WsRange, {
    type: 'expression', // the conditional formatting type
    priority: 1, // rule priority order (required)
    //formula: 'COUNTIF(OFFSET(Instructions!$J$1,0,0,COUNTA(Instructions!$J:$J),1),C3)=0', // formula that returns nonzero or 0
    formula: 'IF('+cellrange+'="No",TRUE,FALSE)',
    style: myStyle1, // a style object containing styles to apply
  });
}

setTimeout(() => { 
  var filePath = __dirname+'\\'+filenameApp;
wb.write(filePath);
}, 18000) 
}

app.post('/ImportAppInfo',(req,res)=>{

  var arrayAppType = []; 
  var arrayAppName = []; 
  var arraySize = [];
  var arraySizevalfun = []; 
  var arraySizevalLines = []; 
  var arrayComplexity = []; 
  var arrayCriticality = [];
  var arrayCategory = []; 
  var arrayTechnology = []; 
  var arrayVendor = [];
  var arraySerAgree = []; 
  var FalgViewAppExcel='No';
  var endres = true;
  
  var activities = JSON.parse(JSON.stringify(req.body));
  
  var LAST_UPDATED_BY = activities[activities.length-1]["LAST_UPDATED_BY"];
  fileAppimport = "ImportAppInfo-"+LAST_UPDATED_BY.replace(/\s/g,'')+".csv"
  
  ApplicationInfoExcel(activities,fileAppimport,arrayAppName,arrayAppType,arraySize,arraySizevalfun,arraySizevalLines,arrayComplexity,arrayCriticality,arrayCategory,arrayTechnology,arrayVendor,arraySerAgree);
  
  setTimeout(() => {
    var filePath = __dirname+'\\'+fileAppimport;
  
  res.setHeader('Content-Type', 'application/octet-stream');
  res.setHeader('Content-Disposition', 'attachment; filename=' + fileAppimport);
  
  var workbook = new Excel.Workbook();
  setTimeout(() => {
  workbook.xlsx.readFile(filePath).then(function () {
  var worksheet=workbook.getWorksheet('Data');
  var worksheet1=workbook.getWorksheet('Instructions');
  
  for (let Sh1Row=3; Sh1Row<=worksheet.rowCount;Sh1Row++){
 
  var AppType =worksheet.getRow(Sh1Row).getCell(3).value
  var Size =worksheet.getRow(Sh1Row).getCell(4).value
  var Sizevalue =worksheet.getRow(Sh1Row).getCell(5).value
  var Complexity =worksheet.getRow(Sh1Row).getCell(6).value
  var Criticality =worksheet.getRow(Sh1Row).getCell(7).value
  var Category =worksheet.getRow(Sh1Row).getCell(8).value
  var Technology =worksheet.getRow(Sh1Row).getCell(9).value
  var Vendor =worksheet.getRow(Sh1Row).getCell(11).value
  var SerAgree =worksheet.getRow(Sh1Row).getCell(13).value

  if ((worksheet.getRow(Sh1Row).getCell(1).value === null) || (worksheet.getRow(Sh1Row).getCell(2).value === null) || (worksheet.getRow(Sh1Row).getCell(3).value === null)) {
    FalgViewAppExcel='Yes'
  }
  
  for (let i = 0; i < arrayAppName.length; i++) {
    for (let j = i + 1 ; j < arrayAppName.length; j++) {
         if (arrayAppName[i] === arrayAppName[j]) {
          FalgViewAppExcel='Yes'
         }
     }
  }
//  if (worksheet.getRow(Sh1Row).getCell(19).value === 'No'){
//    FalgViewAppExcel='Yes'
//  }
  
   if (arrayAppType.includes(AppType) === false){
    FalgViewAppExcel='Yes'
   }
  
   if (arraySize.includes(Size) === false){
    FalgViewAppExcel='Yes'
   }
  
  //  if (arraySizeval.includes(Sizevalue) === false){
  //   // //console.log('Skill '+skill);
  //   FalgViewAppExcel='Yes'
  //  }

   if (arrayComplexity.includes(Complexity) === false){
    // //console.log('Role '+ Role);
      FalgViewAppExcel='Yes'
   }
  
   if (arrayCriticality.includes(Criticality) === false){
    // //console.log('Travel '+Travel);
    FalgViewAppExcel='Yes'
   }
  
   if (arrayCategory.includes(Category) === false){
    // //console.log('Skill '+skill);
    FalgViewAppExcel='Yes'
   }

   if (arrayTechnology.includes(Technology) === false){
    // //console.log('Skill '+skill);
    FalgViewAppExcel='Yes'
   }

   if (arrayVendor.includes(Vendor) === false){
    // //console.log('Skill '+skill);
    FalgViewAppExcel='Yes'
   }

   if (arraySerAgree.includes(SerAgree) === false){
    // //console.log('Skill '+skill);
      FalgViewAppExcel='Yes'
   }
  }
  }), 20000});
 }, 24000) 

 
  setTimeout(() => {
    // console.log("FalgViewAppExcel"+FalgViewAppExcel)
    // console.log("endres"+endres)
  if((FalgViewAppExcel === 'Yes')){
    endres = false;
    // //console.log("endres"+endres)
  }else{

      var App_IntegrationID = activities.App_IntegrationID
      App_IntegrationID = activities[activities.length-1]["App_IntegrationID"]
      CREATED_BY = activities[activities.length-1]["CREATED_BY"];
      LAST_UPDATED_BY = activities[activities.length-1]["LAST_UPDATED_BY"];

    pool.getConnection().then(conn => { 
    for( var i=0; i< activities.length-1; i++){
      var AppUNID = null;
      var AppId = activities[i]["AppId"];
      var AppName =activities[i]["AppName"];  
      var Technology =activities[i]["Technology"]; 
      if(Technology === 'Other'){
        var OtherTechonology =activities[i]["OtherTechonology"];  
      }else {
        var OtherTechonology =''; 
      }     
      var Complexity = activities[i]["Complexity"];
      var Criticality = activities[i]["Criticality"];
      var Vendor = activities[i]["Vendor"];
      if(Vendor === 'Other'){
        var OtherVendor =activities[i]["OtherVendor"];  
      }else {
        var OtherVendor =''; 
      }      
      var app_Category =activities[i]["appCategory"];
      var AppSizeParameter = activities[i]["AppSizeParameter"];
      var AppSizeValue =activities[i]["AppSizeValue"];
      var AppDescription = activities[i]["AppDescription"];
      if(AppDescription === undefined){
        AppDescription = '';
      } 
      var appApplicationType = activities[i]["appApplicationType"];
      var AppServiceAgreement = activities[i]["AppServiceAgreement"];
      var AppRemark = activities[i]["AppRemark"];
      if(AppRemark === undefined){
        AppRemark = '';
      } 
      var createdBy = CREATED_BY;
      var modifiedBy = LAST_UPDATED_BY;
      var dt=moment(new Date());
      var createdDate = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
      var modifiedDate = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
      var IntegrationID = App_IntegrationID;
  
      queryUploadAppInfo ="insert into application_information values ("+AppUNID +",'"
      + AppId + "','"
      + AppName +"','"
      +Technology+"','"
      +OtherTechonology+"','"
      + Complexity + "','"
      + Criticality +"','"
      +Vendor+"','"
      +OtherVendor+"','"
      + app_Category + "','"
      + createdBy + "','"
      + modifiedBy +"','"
      +createdDate+"','"
      +modifiedDate+"','"
      + IntegrationID +"','"
      + AppSizeParameter + "','"
      + AppSizeValue + "','"
      + appApplicationType + "','"
      + AppDescription + "','"
      + AppServiceAgreement + "','"
      + AppRemark + "')";
          conn.query(queryUploadAppInfo).then((queryUploadAppInfoResults) => {         
        // res.send({"save" : "Success"} )
        conn.end();
  
          })
          .catch(err => {
          //handle error
          // res.send({"insert" : "Fail" })
          endres = false;  
          conn.end();
          })   
    } 
    });     
  }

  if(endres === true){
    res.send({"insert":"success"}); 
    }else {    
     setTimeout(() => { 
      var filePath = __dirname+'\\'+fileAppimport;
       
       res.setHeader('Content-Type', 'application/octet-stream');
       res.setHeader('Content-Disposition', 'attachment; filename=' + fileAppimport);
       res.send({"Filepath": filePath});
      //  res.redirect('/api/getuser?filename='+fileAppimport);       
       }, 22000) 
    }  
  }, 25000)
});  
  
  app.get('/ViewUploadeAppInfo/:USername', (req, res)=>{
  
    var USername = req.params.USername;   
    //console.log("enter in view"); 
    //console.log(USername);
    // var fileAppimport = req.query.filename;
    // //console.log(fileAppimport);
    fileAppimport = "ImportAppInfo-"+USername.replace(/\s/g,'')+".csv"
    var filePath = __dirname+'\\'+fileAppimport;
    //console.log("filePath"+filePath) 
   res.setHeader('Content-Type', 'application/octet-stream');
   res.setHeader('Content-Disposition', 'attachment; filename=' + fileAppimport);
   setTimeout(()=>{
    try {
        // //console.log('remove' +filePath)
     fs.unlinkSync(filePath)
     //file removed
   } catch(err) {
     console.error(err)
   }
    }, 4000)
   return res.sendFile(filePath);
  }); 
  
  //===========================Application information ends============================

//====================================== Application servers=========================================================

app.get('/getappServer/:Id', (req,res)=>{
   var id = req.params.Id;
    querygetappServer = "select * from application_servers where IntegrationID ='"+id +"'" ;
    pool.getConnection().then(conn => {        
          conn.query(querygetappServer).then((stakeresult) => {
           
              res.send(stakeresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

});

app.post('/appServerSave',(req,res)=>{
    var appServerUNID = null;
    var AppName = req.body.AppName ;
    var Environment =req.body.Environment;    
    var serverType = req.body.serverType;
    var serverName = req.body.serverName;
    var createdBy = req.body.createdBy;
    var modifiedBy = req.body.modifiedBy;
    var dt=moment(new Date());
    var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
    var modifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
    var IntegrationID = req.body.IntegrationID;
    var AppServer_Remarks = req.body.AppServer_Remarks;

    queryappServerSave ="insert into application_servers values ("+appServerUNID + ",'"+ AppName +"','"+Environment+"','"
    + serverType + "','"+ serverName + "','"+ createdBy + "','"+ modifiedBy +"','"
    +createdDate+"','"+modifiedDate+"','"+ IntegrationID +"','"+ AppServer_Remarks +"')";
    pool.getConnection().then(conn => {        
        conn.query(queryappServerSave).then((Applicationservesave) => {
          
            res.send({"save" : "success"} )
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"save" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})

app.put('/appServerUpdate',(req,res)=>{    
    var appServerUNID = req.body.appServerUNID;
    var AppName = req.body.AppName ;
    var Environment =req.body.Environment;    
    var serverType = req.body.serverType;
    var serverName = req.body.serverName;
    var modifiedBy = req.body.modifiedBy;  
    var dt=moment(new Date());
    var modifiedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
    var IntegrationID = req.body.IntegrationID;
    var AppServer_Remarks = req.body.AppServer_Remarks;

    queryappServerUpdate = "Update application_servers SET AppName='"+AppName+
    "',Environment='"+Environment+"',serverType='"+serverType+
    "',serverName='"+serverName+"',modifiedDate='"+modifiedDate+
    "',modifiedBy='"+modifiedBy+
    "',AppServer_Remarks='"+AppServer_Remarks+
    "' where appServerUNID="+appServerUNID;
  
    pool.getConnection().then(conn => {        
        conn.query(queryappServerUpdate).then((ApplicationServerUpdatedata) => {
           
            res.send({"insert" : "success"} )
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"insert" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})


app.delete('/appServerDelete/:appServerUNID',(req,res)=>{   
    var appServerUNID = req.params.appServerUNID;    
    
    queryappServerDelete ="DELETE FROM application_servers WHERE appServerUNID ='" + appServerUNID+"'";
    pool.getConnection().then(conn => {        
        conn.query(queryappServerDelete).then((ApplicationserverDeletedata) => {
           
            res.send({"Delete" : "success"} )
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Delete" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
} )

app.get('/getAppName/:Id',(req,res)=>{
    var id = req.params.Id;
    querygetAppName = "select AppName from application_information where IntegrationID ='"+id +"'" ;
    pool.getConnection().then(conn => {        
          conn.query(querygetAppName).then((ApplicationInforesult) => {
             
              res.send(ApplicationInforesult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
})

app.get('/getEnvironment',(req,res)=>{
    querygetEnvironment = "select * from adminprofile where FieldCategoryName ='Environment' ORDER BY Categoryvalues ASC" ; 
    // //console.log(query)  
    pool.getConnection().then(conn => {        
          conn.query(querygetEnvironment).then((getEnvironmentresult) => {
            //  //console.log(getEnvironmentresult); // { affectedRows: 1, insertId: 1, warningStatus: 0 }
              res.send(getEnvironmentresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });


});

app.get('/getServerType',(req,res)=>{
    var id = req.params.Id;
    querygetServerType = "select * from adminprofile where FieldCategoryName ='ServerType' ORDER BY Categoryvalues ASC" ; 
    // //console.log(query)  
    pool.getConnection().then(conn => {        
          conn.query(querygetServerType).then((getServerTyperesult) => {
           //   //console.log(getServerTyperesult); // { affectedRows: 1, insertId: 1, warningStatus: 0 }
              res.send(getServerTyperesult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

app.get('/getServerName',(req,res)=>{
    querygetServerName = "select * from adminprofile where FieldCategoryName ='ServerName' ORDER BY Categoryvalues ASC" ;
    pool.getConnection().then(conn => {        
          conn.query(querygetServerName).then((adminprofileresult) => {
            //  //console.log(adminprofileresult); // { affectedRows: 1, insertId: 1, warningStatus: 0 }
              res.send(adminprofileresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

//====================================== Application servers=========================================================

//====================================== New Transition =============================================================

//Edit Profile
app.get('/getNewProfile/:IntegrationID',(req,res)=>{
    var IntegrationID = req.params.IntegrationID;
    querygetNewProfile = "select * from transitionprofile where IntegrationID='"+IntegrationID+"'"; 
    pool.getConnection().then(conn => {        
          conn.query(querygetNewProfile).then((getNewProfileresult) => {
             
              res.send(getNewProfileresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});

//Duplicate Check for Siebel No. - Start
app.get("/DuplicateSeibelCheck",(req,res)=>{

  var SiebelOppNo = req.query.SiebelOppNo;

  if((SiebelOppNo === 'TBD') || (SiebelOppNo === 'NA')){
    res.send({"length" : 0 })
  }else{

  var queryDuplicateSeibelCheck="select * from transitionprofile WHERE (SiebelOppNo='"+SiebelOppNo+"')"

  pool.getConnection().then(conn => {        
        conn.query(queryDuplicateSeibelCheck).then((queryDuplicateSeibelCheckResult) => {

            res.send(queryDuplicateSeibelCheckResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      }); 
   }   
  });
//Duplicate Check for Siebel No. - End

//Save New Profile
app.post("/SaveNewProfile",function(req,res){
  
var IntegrationID=req.body.IntegrationID
var ClientName=req.body.ClientName
var TransitionName=req.body.TransitionName
var dt=moment(req.body.TransStartDt);
var TransStartDt=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var dt=moment(req.body.TransEndDt);
var TransEndDt=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var Sector=req.body.Sector
var Industry=req.body.Industry
var ServiceLine=req.body.ServiceLine
var ProjectID=req.body.ProjectID
var Geo=req.body.Geo
var CountriesInvolved=req.body.CountriesInvolved
var CICLocations=req.body.CICLocations
var IncumbentVendor=req.body.IncumbentVendor
var NumberofFTE=req.body.NumberofFTE
var NoAppinScope=req.body.NoAppinScope
var IOT=req.body.IOT
var SiebelOppNo=req.body.SiebelOppNo
var TransitionTier=req.body.TransitionTier
var TCV=req.body.TCV
var OtherVendor=req.body.OtherVendor
var CreatedBy = req.body.CreatedBy
var dt=moment(new Date());
var CreatedDate=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var ModifiedBy = req.body.ModifiedBy
var dt=moment(new Date());
var ModifiedDate=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var TransitionStatus = req.body.TransitionStatus
var TransitionType = req.body.TransitionType
var TransitionScope = req.body.TransitionScope
var SteadyStateScope = req.body.SteadyStateScope
var ContractDuration = req.body.ContractDuration

querySaveNewProfile="insert into transitionprofile value('"
+IntegrationID+"','"
+ClientName+"','"
+TransitionName+"','"
+TransStartDt+"','"
+TransEndDt+"','"
+Sector+"','"
+Industry+"','"
+ServiceLine+"','"
+ProjectID+"','"
+Geo+"','"
+CountriesInvolved+"','"
+CICLocations+"','"
+IncumbentVendor+"','"
+NumberofFTE+"','"
+NoAppinScope+"','"
+IOT+"','"
+SiebelOppNo+"','"
+TransitionTier+"','"
+TCV+"','"
+OtherVendor+"','"
+CreatedBy+"','"
+CreatedDate+"','"
+ModifiedBy+"','"
+ModifiedDate+"','"
+TransitionStatus+"','"
+TransitionType+"','"
+TransitionScope+"','"
+SteadyStateScope+"','"
+ContractDuration+"')"
pool.getConnection().then(conn => {        
    conn.query(querySaveNewProfile).then((result) => {
      
        res.send({"RecordSave" : "Sucess"} )
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"RecordSave" : "Fail" })
        conn.end();
      })
      
  }).catch(err => {
    //not connected
  });
 });
 
app.put("/UpdateNewProfile",function(req,res){
var IntegrationID=req.body.IntegrationID
var ClientName=req.body.ClientName
var TransitionName=req.body.TransitionName
var dt=moment(req.body.TransStartDt);
var TransStartDt=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var dt=moment(req.body.TransEndDt);
var TransEndDt=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var Sector=req.body.Sector
var Industry=req.body.Industry
var ServiceLine=req.body.ServiceLine
var ProjectID=req.body.ProjectID
var Geo=req.body.Geo
var CountriesInvolved=req.body.CountriesInvolved
var CICLocations=req.body.CICLocations
var IncumbentVendor=req.body.IncumbentVendor
var NumberofFTE=req.body.NumberofFTE
var NoAppinScope=req.body.NoAppinScope
var IOT=req.body.IOT
var SiebelOppNo=req.body.SiebelOppNo
var TransitionTier=req.body.TransitionTier
var TCV=req.body.TCV
var OtherVendor=req.body.OtherVendor
var ModifiedBy = req.body.ModifiedBy
var dt=moment(new Date());
var ModifiedDate=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var TransitionStatus = req.body.TransitionStatus
var TransitionType = req.body.TransitionType
var TransitionScope = req.body.TransitionScope
var SteadyStateScope = req.body.SteadyStateScope
var ContractDuration = req.body.ContractDuration


queryUpdateNewProfile ="Update transitionprofile SET ClientName='"+ClientName
    +"',TransitionName='"+TransitionName
    +"',TransStartDt='"+TransStartDt
    +"',TransEndDt='"+TransEndDt
    +"',Sector='"+Sector
    +"',Industry='"+Industry
    +"',ServiceLine='"+ServiceLine
    +"',ProjectID='"+ProjectID
    +"',Geo='"+Geo
    +"',CountriesInvolved='"+CountriesInvolved
    +"',CICLocations='"+CICLocations
    +"',IncumbentVendor='"+IncumbentVendor
    +"',ModifiedBy='"+ModifiedBy
    +"',ModifiedDate='"+ModifiedDate
    +"',NoAppinScope='"+NoAppinScope
    +"',IOT='"+IOT
    +"',SiebelOppNo='"+SiebelOppNo
    +"',TransitionTier='"+TransitionTier
    +"',TCV='"+TCV
    +"',OtherVendor='"+OtherVendor
    +"',NumberofFTE='"+NumberofFTE
    +"',TransitionStatus='"+TransitionStatus
    +"',TransitionType='"+TransitionType
    +"',TransitionScope='"+TransitionScope
    +"',SteadyStateScope='"+SteadyStateScope
    +"',ContractDuration='"+ContractDuration
    +"' where IntegrationID='"+IntegrationID+"'"
pool.getConnection().then(conn => {        
    conn.query(queryUpdateNewProfile).then((result) => {
       
        res.send({"RecordSave" : "Sucess"} )
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"RecordSave" : "Fail" })
        conn.end();
      })
      
  }).catch(err => {
    //not connected
  });


 });
// End     

app.get("/getUserRolesProfile/:UserID",(req,res)=>{

  UserIDRoles = [];
  var USER_ID = req.params.UserID

queryGetUserRoleID = "select ROLE_ID from user_role WHERE USER_ID="+USER_ID;
pool.getConnection().then(conn => {        
  conn.query(queryGetUserRoleID).then((queryGetUserRoleIDResult) => {
   var UserRoleIDProfiles = JSON.parse(JSON.stringify(queryGetUserRoleIDResult));
   for (let i= 1; i< UserRoleIDProfiles.length+1 ;i++) {           
    UserIDRoles.push(UserRoleIDProfiles[i-1].ROLE_ID);
  }
  var UserIDRolesArr = UserIDRoles.join("','");
  queryUserProfilesRole = "SELECT * FROM role WHERE ROLE_ID IN ('"+UserIDRolesArr+"')";
  pool.getConnection().then(conn => {        
    conn.query(queryUserProfilesRole).then((queryUserProfilesRoleResult) => {
      res.send(queryUserProfilesRoleResult)
         conn.end();
      })
        .catch(err => {
           //handle error
           res.send({"Fetch" : "Fail" })
           conn.end();
        })          
      }).catch(err => {
        //not connected
      });        
          // res.send(queryUserIDProfilesResult)
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })

    }).catch(err => {
      //not connected
    });
});
//====================================== New Transition =========================================================

//========================== Contratula Deliverables ========================== 
app.get("/getDelVal/:CDName",(req,res)=>{

  var CDName = req.params.CDName;

if (CDName=== 'Standard Deliverables'){
  CDName='StandardDeliverables'
}else if(CDName=== 'Standard Tools'){
    CDName='StandardTools'
}
  querygetDelVal= "select * from adminprofile WHERE FieldCategoryName='"+CDName+"'";
  //console.log(queryUserOrgCheck)
  pool.getConnection().then(conn => {        
        conn.query(querygetDelVal).then((querygetDelValKeyword) => {
            res.send(querygetDelValKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

});

 // Getting  DeliverablesNames keywords profiles
 app.get("/CDMandatoryFields",(req,res)=>{
  queryCDManFLDKeyword = "select * from adminprofile WHERE FieldCategoryName='CDMandatoryFields' ORDER BY Categoryvalues ASC";
  pool.getConnection().then(conn => {        
        conn.query(queryCDManFLDKeyword).then((queryCDManFLDResult) => {
         
            res.send(queryCDManFLDResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
  
});

// save Contratula Deliverables
app.post("/CDSave",function(req, res){
  
  var endres = true;
  var IntegrationID=req.body.IntigrationID
  var DeliverableName=req.body.DeliverableName
  var ContractDoc_OwnerNM=req.body.ContractDoc_OwnerNM.replace(/'/g, "\\'");
  var ContractDoc_Owneremail=req.body.ContractDoc_Owneremail
  var CreatedBy = req.body.CreatedBy
  var dt=moment(new Date());
  var CreatedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  var ModifiedBy = req.body.ModifiedBy
  var ModifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  var ContractDeliver_Status = null;
  var ContractDeliver_Comments = '';
  

  if((req.body.DeliverableValueText !== '')){

      var DeliverableValues=req.body.DeliverableValueText   

      queryCDSaveText="insert into contractualdeliverables value('"
      +IntegrationID+"','"
      +DeliverableName+"','"
      +DeliverableValues+"',"
      +null+",'"
      +CreatedBy+"','"
      +CreatedDate+"','"
      +ModifiedBy+"','"
      +ModifiedDate+"','"
      +ContractDoc_OwnerNM+"','"
      +ContractDoc_Owneremail+"','"
      +ContractDeliver_Status+"','"
      +ContractDeliver_Comments+"')"

pool.getConnection().then(conn => {        
   conn.query(queryCDSaveText).then((CDresulttext) => {

       // res.send({"insert" : "Success"} )

       conn.end();
     })
     .catch(err => {
       //handle error
       // res.send({"insert" : "Fail" })
       endres = false;  
       conn.end();
     })

 }).catch(err => {
   //not connected
   endres = false; 
 });

} else {
pool.getConnection().then(conn => { 
 for(var i in req.body.DeliverableValue) {     
   var DeliverableValues= req.body.DeliverableValue[i];
   queryCDSaveVal ="insert into contractualdeliverables value('"
   +IntegrationID+"','"
   +DeliverableName+"','"
   +DeliverableValues+"',"
   +null+",'"
   +CreatedBy+"','"
   +CreatedDate+"','"
   +ModifiedBy+"','"
   +ModifiedDate+"','"
   +ContractDoc_OwnerNM+"','"
   +ContractDoc_Owneremail+"','"
   +ContractDeliver_Status+"','"
   +ContractDeliver_Comments+"')"
   conn.query(queryCDSaveVal).then((CDresultVal) => {
     conn.end();
     // res.send({"save" : "Success"} )
 })
 .catch(err => {
   //handle error
   // res.send({"insert" : "Fail" })
   endres = false;  
   conn.end();
 })
     }
}
)}

if(endres === true){
res.send({"insert":"success"}); 
}else{
res.send({"insert":"fail"}); 
}    
//  conn.end();
}); 

// save Contratula Deliverables
app.post("/CDMandatorySave",function(req, res){
  
  var endres = true;
  var IntegrationID=req.body.IntigrationID    
  var DeliverableName=req.body.DeliverableName
  var ContractDoc_OwnerNM=req.body.ContractDoc_OwnerNM.replace(/'/g, "\\'");
  var ContractDoc_Owneremail=req.body.ContractDoc_Owneremail
  var CreatedBy = req.body.CreatedBy
  var dt=moment(new Date());
  var CreatedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  var ModifiedBy = req.body.ModifiedBy
  var ModifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  var ContractDeliver_Status = null;
  var ContractDeliver_Comments = '';
  var MandFlds = req.body.MandatoryFields
  console.log(MandFlds)
 
  for ( let i = 0; i < MandFlds.length ; i++) { 

  }  
  
  
  
  
  
  
//   var DeliverableName=req.body.DeliverableName
//   var ContractDoc_OwnerNM=req.body.ContractDoc_OwnerNM.replace(/'/g, "\\'");
//   var ContractDoc_Owneremail=req.body.ContractDoc_Owneremail
//   var CreatedBy = req.body.CreatedBy
//   var dt=moment(new Date());
//   var CreatedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
//   var ModifiedBy = req.body.ModifiedBy
//   var ModifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
//   var ContractDeliver_Status = null;
//   var ContractDeliver_Comments = '';
  

//   if((req.body.DeliverableValueText !== '')){

//       var DeliverableValues=req.body.DeliverableValueText   

//       queryCDSaveText="insert into contractualdeliverables value('"
//       +IntegrationID+"','"
//       +DeliverableName+"','"
//       +DeliverableValues+"',"
//       +null+",'"
//       +CreatedBy+"','"
//       +CreatedDate+"','"
//       +ModifiedBy+"','"
//       +ModifiedDate+"','"
//       +ContractDoc_OwnerNM+"','"
//       +ContractDoc_Owneremail+"','"
//       +ContractDeliver_Status+"','"
//       +ContractDeliver_Comments+"')"

// pool.getConnection().then(conn => {        
//    conn.query(queryCDSaveText).then((CDresulttext) => {

//        // res.send({"insert" : "Success"} )

//        conn.end();
//      })
//      .catch(err => {
//        //handle error
//        // res.send({"insert" : "Fail" })
//        endres = false;  
//        conn.end();
//      })

//  }).catch(err => {
//    //not connected
//    endres = false; 
//  });

// } else {
// pool.getConnection().then(conn => { 
//  for(var i in req.body.DeliverableValue) {     
//    var DeliverableValues= req.body.DeliverableValue[i];
//    queryCDSaveVal ="insert into contractualdeliverables value('"
//    +IntegrationID+"','"
//    +DeliverableName+"','"
//    +DeliverableValues+"',"
//    +null+",'"
//    +CreatedBy+"','"
//    +CreatedDate+"','"
//    +ModifiedBy+"','"
//    +ModifiedDate+"','"
//    +ContractDoc_OwnerNM+"','"
//    +ContractDoc_Owneremail+"','"
//    +ContractDeliver_Status+"','"
//    +ContractDeliver_Comments+"')"
//    conn.query(queryCDSaveVal).then((CDresultVal) => {
//      conn.end();
//      // res.send({"save" : "Success"} )
//  })
//  .catch(err => {
//    //handle error
//    // res.send({"insert" : "Fail" })
//    endres = false;  
//    conn.end();
//  })
//      }
// }
// )}

// if(endres === true){
// res.send({"insert":"success"}); 
// }else{
// res.send({"insert":"fail"}); 
// }    
//  conn.end();
}); 

//  Update Contratula Deliverables
app.put('/CDUpdate',(req,res)=>{
var CDUNID=req.body.CDUNID
var IntegrationID=req.body.IntigrationID
var DeliverableName=req.body.DeliverableName
var ContractDoc_OwnerNM=req.body.ContractDoc_OwnerNM.replace(/'/g, "\\'");
var ContractDoc_Owneremail=req.body.ContractDoc_Owneremail
if((req.body.DeliverableValueText !== '')){
var DeliverableValues=req.body.DeliverableValueText   
}else{
var DeliverableValues=req.body.DeliverableValue 
}          
var ModifiedBy = req.body.ModifiedBy
var dt=moment(new Date());
var ModifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");


queryCDUpdate ="Update contractualdeliverables SET DeliverableName='"+DeliverableName
+"',DeliverableValues='"+DeliverableValues
+"',ModifiedBy='"+ModifiedBy
+"',modifiedDate='"+ModifiedDate
+"',ContractDoc_OwnerNM='"+ContractDoc_OwnerNM
+"',ContractDoc_Owneremail='"+ContractDoc_Owneremail
+"' where CDUNID='"+CDUNID+"'"     
pool.getConnection().then(conn => {        
 conn.query(queryCDUpdate).then((CDUpdatedata) => {

     res.send({"insert" : "Success"} )
     conn.end();
   })
   .catch(err => {
     //handle error
     res.send({"insert" : "Fail" })
     conn.end();
   })

}).catch(err => {
 //not connected
});
}); 
//End
  
  //Deleting Contratual deliverables
  app.delete('/CDDelete/:CDUNID',(req,res)=>{    
          var CDUNID = req.params.CDUNID;     
      queryCDDelete = "DELETE FROM contractualdeliverables WHERE (CDUNID ='"+CDUNID+"')"   
  // //console.log(queryCDDelete)
      pool.getConnection().then(conn => {        
          conn.query(queryCDDelete).then((CDDeletedata) => {
             
              res.send({"Delete" : "Success"} )
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Delete" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
          
  });
  
  // Getting  Duplicate Contract deliverables check
  app.get("/DuplicateCDResult",(req,res)=>{
     
    var DPresutls ="";
    var DeliverableName = req.body.DeliverableName

    if((DeliverableName === 'Account Specific Deliverables') || (DeliverableName === 'Account Specific Work Product')){
        var DeliverableValues=req.body.DeliverableValueText
    }else{
        var Delivval=req.query.DeliverableValues;
        var IntegrationID = req.query.IntegrationID;
        var arr = Delivval.toString().split(",");
        var queryDuplicateCDResult="select * from contractualdeliverables WHERE ("
        for(let i in arr){
            if(arr.length-i === 1){
              queryDuplicateCDResult = queryDuplicateCDResult+"DeliverableValues='"+arr[i]+"') AND ";
            }else{
              queryDuplicateCDResult = queryDuplicateCDResult+"DeliverableValues='"+arr[i]+"' OR ";
            }        
        }    
        queryDuplicateCDResult = queryDuplicateCDResult+"IntegrationID='"+IntegrationID+"'";      
    pool.getConnection().then(conn => {        
          conn.query(queryDuplicateCDResult).then((CDDuplikeywordResult) => {
             
              if(CDDuplikeywordResult.length > 0){           
                           if(DPresutls === ""){               
                            DPresutls == DeliverableValues;  
                           }else{            
                            DPresutls += ","+DeliverableValues;
                        }
            
                    }   
              res.send(CDDuplikeywordResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

    }   
    
    });  
  
  // Getting CD documents
  app.get("/ContractualDeliverablesResult/:Id",(req,res)=>{      
      var id = req.params.Id;  
      queryContractualDeliverablesResult = "select * from contractualdeliverables WHERE IntegrationID='"+id+"'"; 
      pool.getConnection().then(conn => {        
            conn.query(queryContractualDeliverablesResult).then((ContractualDeliverablesResult) => {
               
                res.send(ContractualDeliverablesResult)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
  });
   
  // Getting  DeliverablesNames keywords profiles
  app.get("/DelivnameKeyword",(req,res)=>{
      queryDelivnameKeyword = "select * from adminprofile WHERE FieldCategoryName='ContractualDeliverables' ORDER BY Categoryvalues ASC";
      pool.getConnection().then(conn => {        
            conn.query(queryDelivnameKeyword).then((DelivnameKeywordResult) => {
             
                res.send(DelivnameKeywordResult)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
      
  });
  
  // Getting  Standared Deliverables values keywords profiles
  app.get("/StandDeliverablesKeyword",(req,res)=>{
      queryStandDeliverablesKeyword = "select * from adminprofile WHERE FieldCategoryName='StandardDeliverables' ORDER BY Categoryvalues ASC";
      pool.getConnection().then(conn => {        
            conn.query(queryStandDeliverablesKeyword).then((StandDeliverablesResult) => {
               
                res.send(StandDeliverablesResult)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
  
  });
  
  // Getting  Standared Tools keywords profiles
  app.get("/StandToolsKeyword",(req,res)=>{
      queryStandToolsKeyword = "select * from adminprofile WHERE FieldCategoryName='StandardTools' ORDER BY Categoryvalues ASC"
      pool.getConnection().then(conn => {        
            conn.query(queryStandToolsKeyword).then((StandToolsResult) => {
              
                res.send(StandToolsResult)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
  
  }); 
  
  // Getting  Standared WorkProduct keywords profiles
  app.get("/StandWorkProdcutKeyword",(req,res)=>{
    queryStandWorkProdcutKeyword = "select * from adminprofile WHERE FieldCategoryName='Standard Work Product' ORDER BY Categoryvalues ASC"
    pool.getConnection().then(conn => {        
          conn.query(queryStandWorkProdcutKeyword).then((queryStandWorkProdcutResult) => {
            
              res.send(queryStandWorkProdcutResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

}); 
  //========================== Contratula Deliverables ==========================


//===================================Execution team ==========================================
//checking for User for current org
app.get("/UserOrgCheck/:IntergrationID/:CurrOrg",(req,res)=>{

  var CurrOrg = req.params.CurrOrg;
  var IntergrationID = req.params.IntergrationID;

  queryUserOrgCheck = "select count(*) from user_transition where USER_ORG Not LIKE '%"+CurrOrg+"%' and TRANSITION_ID='"+IntergrationID+"'";
  //console.log(queryUserOrgCheck)
  pool.getConnection().then(conn => {        
        conn.query(queryUserOrgCheck).then((queryUserOrgCheckKeyword) => {
            res.send(queryUserOrgCheckKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

}); 

//getting Industry based on sector
app.get("/getIndustry/:Sector",(req,res)=>{

  var Sector = req.params.Sector;

  querygetIndustry = "select * from adminprofile WHERE FieldCategoryName='"+Sector+"'";
  //console.log(queryUserOrgCheck)
  pool.getConnection().then(conn => {        
        conn.query(querygetIndustry).then((getIndustryKeyword) => {
            res.send(getIndustryKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

}); 

//getting COuntries based on IOT
app.get("/getCountries/:IOT",(req,res)=>{

  var IOT = req.params.IOT;

  querygetCountries = "select * from adminprofile WHERE FieldCategoryName='"+IOT+"'";
  //console.log(queryUserOrgCheck)
  pool.getConnection().then(conn => {        
        conn.query(querygetCountries).then((querygetCountriesKeyword) => {
            res.send(querygetCountriesKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

}); 

// Getting Execution Team keywords profiles
app.get("/ExecutionTeamKeyword/:USER_ORG",(req,res)=>{

  var USER_ORG = req.params.USER_ORG;
  queryExecutionTeamKeyword = "select * from user where USER_ORG  LIKE '%"+USER_ORG +"%' order by USER_NAME ASC";
  pool.getConnection().then(conn => {        
        conn.query(queryExecutionTeamKeyword).then((ExecutionTeamKeyword) => {

            res.send(ExecutionTeamKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });
});
// Getting Execution Team Role keywords profiles
app.get("/ExecutionRoleKeyword",(req,res)=>{
  
  queryExecutionRoleKeyword = "select * from role order by ROLE_NAME ASC"
  pool.getConnection().then(conn => {        
        conn.query(queryExecutionRoleKeyword).then((ExecutionRoleKeyword) => {
          
            res.send(ExecutionRoleKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting User Transition data profiles
app.get("/UserExecutionDataKeyword/:Id",(req,res)=>{

var id = req.params.Id; 

  queryUserExecutoinData = "select * from user_transition WHERE TRANSITION_ID='"+id+"' AND USER_TYPE='Execution'"
//console.log('getdata' +queryUserExecutoinData);
  pool.getConnection().then(conn => {        
        conn.query(queryUserExecutoinData).then((UserExecutionDataKeyword) => {
          
            res.send(UserExecutionDataKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

//Execution Team Save
app.post('/AddExecutionteam',(req,res)=>{
  var USER_ID=req.body.USER_ID
var TRANSITION_ID=req.body.IntegrationID
var CREATED_BY=req.body.CreatedBy
var LAST_UPDATED_BY = req.body.ModifiedBy
var dt=moment(new Date());
var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var dt=moment(new Date());
var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var USER_NAME=req.body.ExecutionTeamName
var USER_ROLE=req.body.ExecutionTeamRole
var USER_FULLNAME=req.body.USER_FULLNAME
var USER_ROLE_ID=req.body.USER_ROLE_ID
var USER_ORG=req.body.USER_ORG
var USER_TYPE = "Execution"

queryAddExecutionteam ="insert into user_transition values ("+null
+ ",'"+ USER_ID 
+"','"+TRANSITION_ID
+"','"+ CREATED_BY
+ "','"+ LAST_UPDATED_BY
+ "','"+ CREATED_AT   
+ "','"+ UPDATED_AT
+"','"+USER_ROLE
+"','"+USER_NAME
+"','"+USER_TYPE
+"','"+USER_FULLNAME
+"','"+USER_ROLE_ID
+"','"+USER_ORG+"')";
 //console.log(queryAddExecutionteam);
pool.getConnection().then(conn => {        
      conn.query(queryAddExecutionteam).then((AddExecutionteamKeyword) => {

        res.send({"Fetch" : "Success"})
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })

    }).catch(err => {
      //not connected
    });

});

//Updating Execution team form
app.put("/UpdateExecutionteam",function(req,res){
var TRANSITION_ID=req.body.IntegrationID
var USER_ID=req.body.USER_ID
var LAST_UPDATED_BY = req.body.ModifiedBy
var dt=moment(new Date());
var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var USER_NAME=req.body.ExecutionTeamName
var USER_ROLE=req.body.ExecutionTeamRole
var USER_ROLE_ID=req.body.USER_ROLE_ID
var USER_ORG=req.body.USER_ORG

queryUpdateExecutionteam ="Update user_transition SET LAST_UPDATED_BY='"+LAST_UPDATED_BY
+"',UPDATED_AT='"+UPDATED_AT
+"',USER_NAME='"+USER_NAME
+"',USER_ROLE='"+USER_ROLE
+"',USER_ROLE_ID='"+USER_ROLE_ID
+"',USER_ORG='"+USER_ORG
+"' where TRANSITION_ID='"+TRANSITION_ID+"' AND USER_NAME='"+USER_NAME+"' AND USER_TYPE = 'Execution'"

pool.getConnection().then(conn => {        
      conn.query(queryUpdateExecutionteam).then((UpdateExecutionteamKeyword) => {

        res.send({"RecordSave":"Sucess"})
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"RecordSave":"fail"});
          conn.end();
        })

    }).catch(err => {
      //not connected
    });

});
// End   


//Deleting Execution team 
app.delete('/DeleteExeTeam/:user_execution_ID',(req,res)=>{    
  
  var user_execution_ID = req.params.user_execution_ID;     
  queryDeleteExeTeam = "DELETE FROM user_transition WHERE (USER_TRANSITION_ID ='"+user_execution_ID+"' AND USER_TYPE = 'Execution')" 
  
    pool.getConnection().then(conn => {        
          conn.query(queryDeleteExeTeam).then((queryDeleteExeTeamKeyword) => {
            
            res.send({"Delete":"success"})
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Delete":"fail"});
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});  


//====================================== Execution Team Duplicate =========================================================

app.get("/DuplicateExeTeamResult",(req,res)=>{
   
  var DPresutls ="";
  var USER_NAME = req.query.USER_NAME
  var TRANSITION_ID = req.query.TRANSITION_ID;

      var queryDuplicateExeTeamResult="select * from user_transition WHERE (TRANSITION_ID='"+TRANSITION_ID+"' AND USER_NAME='"+USER_NAME+"'AND USER_TYPE = 'Execution')"
        
      //console.log(queryDuplicateExeTeamResult)
 
  pool.getConnection().then(conn => {        
        conn.query(queryDuplicateExeTeamResult).then((ExeTeamDuplikeywordResult) => {
            res.send(ExeTeamDuplikeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });

     
  
  });  


  
//===================================Transition team ==========================================
// Getting Transition Team keywords profiles
app.get("/TransitionTeamKeyword/:USER_ORG",(req,res)=>{

  var USER_ORG = req.params.USER_ORG;
  queryTransitionTeamKeyword = "select * from user where USER_ORG  LIKE '%"+USER_ORG +"%' order by USER_NAME ASC"; 
  pool.getConnection().then(conn => {        
        conn.query(queryTransitionTeamKeyword).then((TransitionTeamKeyword) => {

            res.send(TransitionTeamKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });
});
// Getting Transition Team Role keywords profiles
app.get("/TransitionRoleKeyword",(req,res)=>{
  queryTransitionRoleKeyword = "select * from role order by ROLE_NAME ASC"
  pool.getConnection().then(conn => {        
        conn.query(queryTransitionRoleKeyword).then((TransitionRoleKeyword) => {
          
            res.send(TransitionRoleKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

// Getting User Transition data profiles
app.get("/UserTransitionDataKeyword/:Id",(req,res)=>{

var id = req.params.Id; 

  queryUserTransitionData = "select * from user_transition WHERE TRANSITION_ID='"+id+"' AND USER_TYPE = 'Transition'"
  pool.getConnection().then(conn => {        
        conn.query(queryUserTransitionData).then((UserTransitionDataKeyword) => {
          
            res.send(UserTransitionDataKeyword)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

//Transition Team Save
 
app.post('/AddTransitionteam',(req,res)=>{

  var endres = true;
    var USER_ID=req.body.USER_ID
  var TRANSITION_ID=req.body.IntegrationID
  var CREATED_BY=req.body.CreatedBy
  var LAST_UPDATED_BY = req.body.ModifiedBy
  var dt=moment(new Date());
  var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var dt=moment(new Date());
  var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var USER_NAME=req.body.TransitionTeamName
  var USER_ROLE=req.body.TransitionTeamRole
  var USER_FULLNAME=req.body.USER_FULLNAME
  var USER_ROLE_ID=req.body.USER_ROLE_ID
  var USER_ORG=req.body.USER_ORG
  var USER_TYPE = "Transition"

  queryAddTransitionteam ="insert into user_transition values ("+null
  + ",'"+ USER_ID 
  +"','"+TRANSITION_ID
  +"','"+ CREATED_BY
  + "','"+ LAST_UPDATED_BY
  + "','"+ CREATED_AT   
  + "','"+ UPDATED_AT
  +"','"+USER_ROLE
  +"','"+USER_NAME
  +"','"+USER_TYPE
  +"','"+USER_FULLNAME
  +"','"+USER_ROLE_ID
  +"','"+USER_ORG+"')";
 //console.log(queryAddTransitionteam);
  pool.getConnection().then(conn => {        
        conn.query(queryAddTransitionteam).then((AddTransitionteamKeyword) => {      
            conn.end();
          })
          .catch(err => {
            //handle error
            // res.send({"Fetch" : "Fail" })
            endres = false;
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

      queryAddTransitionMgrs ="insert into user_transitionmanagers values ("+null
      + ",'"+ USER_ID 
      +"','"+TRANSITION_ID
      +"','"+ CREATED_BY
      + "','"+ LAST_UPDATED_BY
      + "','"+ CREATED_AT   
      + "','"+ UPDATED_AT
      +"','"+USER_ROLE
      +"','"+USER_NAME
      +"','"+USER_FULLNAME
      +"','"+USER_ROLE_ID
      +"','"+USER_ORG+"')";

      pool.getConnection().then(conn => {        
            conn.query(queryAddTransitionMgrs).then((AddTransitionMgrsKeyword) => {

              // res.send({"Fetch" : "Success"})
                conn.end();
              })
              .catch(err => {
                //handle error
                // res.send({"Fetch" : "Fail" })
                endres = false;
                conn.end();
              })

          }).catch(err => {
            //not connected
          });

          if(endres === true){
            res.send({"Fetch" : "Success"})
           }else{
            res.send({"Fetch" : "Fail" })
           }    

});

app.put("/UpdateTransitionteam",function(req,res){
  var endres = true;
  var TRANSITION_ID=req.body.IntegrationID
var USER_ID=req.body.USER_ID
var LAST_UPDATED_BY = req.body.ModifiedBy
var dt=moment(new Date());
var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
var USER_NAME=req.body.TransitionTeamName
var USER_ROLE=req.body.TransitionTeamRole
var USER_FULLNAME=req.body.USER_FULLNAME
var USER_ROLE_ID=req.body.USER_ROLE_ID
var USER_ORG=req.body.USER_ORG

queryUpdateTransitionteam ="Update user_transition SET LAST_UPDATED_BY='"+LAST_UPDATED_BY
+"',UPDATED_AT='"+UPDATED_AT
+"',USER_NAME='"+USER_NAME
+"',USER_ROLE='"+USER_ROLE
+"',USER_FULLNAME='"+USER_FULLNAME
+"',USER_ROLE_ID='"+USER_ROLE_ID
+"',USER_ORG='"+USER_ORG
+"' where TRANSITION_ID='"+TRANSITION_ID+"' AND USER_NAME='"+USER_NAME+"' AND USER_TYPE = 'Transition'"
//console.log(queryUpdateTransitionteam)
  pool.getConnection().then(conn => {        
        conn.query(queryUpdateTransitionteam).then((UpdateTransitionteamKeyword) => {

          // res.send({"RecordSave":"Sucess"})
            conn.end();
          })
          .catch(err => {
            //handle error
            // res.send({"RecordSave":"fail"});
            endres = false;
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

      queryUpdateTransitionMgrs ="Update user_transitionmanagers SET LAST_UPDATED_BY='"+LAST_UPDATED_BY
+"',UPDATED_AT='"+UPDATED_AT
+"',USER_NAME='"+USER_NAME
+"',USER_ROLE='"+USER_ROLE
+"',USER_FULLNAME='"+USER_FULLNAME
+"',USER_ROLE_ID='"+USER_ROLE_ID
+"',USER_ORG='"+USER_ORG
+"' where TRANSITION_ID='"+TRANSITION_ID+"' AND USER_NAME='"+USER_NAME+"'"

  pool.getConnection().then(conn => {        
        conn.query(queryUpdateTransitionMgrs).then((UpdateTransitionMgrsKeyword) => {

          // res.send({"RecordSave":"Sucess"})
            conn.end();
          })
          .catch(err => {
            //handle error
            // res.send({"RecordSave":"fail"});
            endres = false;
            conn.end();
          })

      }).catch(err => {
        //not connected
      });

      if(endres === true){
        res.send({"RecordSave":"Sucess"})
       }else{
        res.send({"RecordSave":"fail"});
       } 

});

//Deleting Transition team 
app.delete('/DeleteTransTeam/:user_transition_ID',(req,res)=>{    
  
  var USER_Transition_ID = req.params.user_transition_ID;     
  queryDeleteTransTeam = "DELETE FROM user_transition WHERE (USER_Transition_ID ='"+USER_Transition_ID+"' AND USER_TYPE = 'Transition')" 
  //console.log(queryDeleteTransTeam)
    pool.getConnection().then(conn => {        
          conn.query(queryDeleteTransTeam).then((queryDeleteTransTeamKeyword) => {
            
            res.send({"Delete":"success"})
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Delete":"fail"});
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });

        queryDeleteTransMgrs = "DELETE FROM user_transitionmanagers WHERE (USER_Transition_ID ='"+USER_Transition_ID+"')" 
        //console.log(queryDeleteTransTeam)
          pool.getConnection().then(conn => {        
                conn.query(queryDeleteTransMgrs).then((queryDeleteTransMgrsKeyword) => {
                  
                  res.send({"Delete":"success"})
                    conn.end();
                  })
                  .catch(err => {
                    //handle error
                    res.send({"Delete":"fail"});
                    conn.end();
                  })
                  
              }).catch(err => {
                //not connected
              });
});  

//====================================== Transition Team Duplicate =========================================================

app.get("/DuplicateTransTeamResult",(req,res)=>{
   
  var DPresutls ="";
  var USER_NAME = req.query.USER_NAME
  var TRANSITION_ID = req.query.TRANSITION_ID;

      var queryDuplicateTransTeamResult="select * from user_transition WHERE (TRANSITION_ID='"+TRANSITION_ID+"' AND USER_NAME='"+USER_NAME+"' AND USER_TYPE = 'Transition')"
        
      //console.log(queryDuplicateTransTeamResult)
 
  pool.getConnection().then(conn => {        
        conn.query(queryDuplicateTransTeamResult).then((TransTeamDuplikeywordResult) => {
            res.send(TransTeamDuplikeywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });  
  });  

//====================================== Transition Team Duplicate =========================================================

//=========================Trainee Info =================================
// Getting Trainee Role keywords profiles
app.get("/TraineeRoleKeyword",(req,res)=>{  
    queryTraineeRoleKeyword = queryTraineeTravel = "select * from adminprofile WHERE FieldCategoryName='TraineeRole' ORDER BY Categoryvalues ASC" ; 
    // //console.log(queryTraineeRoleKeyword);
    pool.getConnection().then(conn => {        
          conn.query(queryTraineeRoleKeyword).then((TraineeRoleKeyword) => {
  
              res.send(TraineeRoleKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
  
        }).catch(err => {
          //not connected
        });
  });
  
  app.get("/TraineeNameKeyword",(req,res)=>{
  // //console.log("inside User Table");
    queryTraineeNameKeyword = "select * from user"
    pool.getConnection().then(conn => {        
          conn.query(queryTraineeNameKeyword).then((TraineeNameKeyword) => {
  
              res.send(TraineeNameKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
  
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting  Travel keywords profiles
  app.get("/TraineeTravelKeyword",async(req,res)=>{
  
    queryTraineeTravel = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
  // //console.log(queryTraineeTravel)
        pool.getConnection().then(conn => {        
          conn.query(queryTraineeTravel).then((qTraineeTravelRes) => {
  
              res.send(qTraineeTravelRes)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
  
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting  Skills keywords profiles
  app.get("/TraineeSkillsKeyword",async(req,res)=>{
  
    queryTraineeSkills = "select * from adminprofile WHERE FieldCategoryName='Skills' ORDER BY Categoryvalues ASC" ; 
  // //console.log(queryTraineeSkills)
        pool.getConnection().then(conn => {        
          conn.query(queryTraineeSkills).then((qTraineeSkillsRes) => {
  
              res.send(qTraineeSkillsRes)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
  
        }).catch(err => {
          //not connected
        });
  });
  
  // Getting trainee data profiles
  app.get("/TraineeDataResultKeyword/:Id",(req,res)=>{
  
    var id = req.params.Id; 
  
      queryTraineeData = "select * from traineeinfo WHERE Trainee_IntegrationID='"+id+"'"
    // //console.log('getdata' +queryTraineeData);
      pool.getConnection().then(conn => {        
            conn.query(queryTraineeData).then((queryTraineeDataKeyword) => {
  
                res.send(queryTraineeDataKeyword)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
  
          }).catch(err => {
            //not connected
          });
  });
    
  //Trainee Info Save
  app.post('/AddTrainee',(req,res)=>{
   var Trainee_IntegrationID=req.body.Trainee_IntegrationID
  var Trainee_Name=req.body.Trainee_Name.replace(/'/g, "\\'");
  var Trainee_email=req.body.Trainee_email
  var Trainee_Role = req.body.Trainee_Role
  var dt=moment(req.body.Trainee_OnBoardDate);
  // //console.log(req.body.Trainee_OnBoardDate);
  var Trainee_OnBoardDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  // //console.log(Trainee_OnBoardDate);
  var Trainee_Travel = req.body.Trainee_Travel
  var Trainee_Skills = req.body.Trainee_Skills
  var CREATED_BY=req.body.CREATED_BY
  var LAST_UPDATED_BY = req.body.LAST_UPDATED_BY
  var dt=moment(new Date());
  var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var dt=moment(new Date());
  var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  var Trainee_Visa =req.body.Trainee_Visa 
  queryAddTrainee ="insert into traineeinfo values ("+null
      + ",'"+ Trainee_IntegrationID 
      +"','"+Trainee_Name
      +"','"+ Trainee_email
      + "','"+ Trainee_Role
      + "','"+ Trainee_OnBoardDate   
      + "','"+ Trainee_Travel
      +"','"+Trainee_Skills
      +"','"+CREATED_BY
      +"','"+LAST_UPDATED_BY
      +"','"+CREATED_AT
      +"','"+UPDATED_AT
      +"','"+Trainee_Visa+"')";
    // //console.log(queryAddTrainee)
      pool.getConnection().then(conn => {        
            conn.query(queryAddTrainee).then((queryAddTraineeKeyword) => {
              
              res.send({"Fetch" : "Success"})
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
    
  
  });
  
  app.delete('/DeleteTrainee/:Trainee_SNO', (req, res) => {

    var Trainee_SNO = req.params.Trainee_SNO;
    //Checking for delete the option //
    const Table = [{
        "TableName": "readiness_question_tracker",
        "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
        "UITable": "* Manage Sprint >> Health & Readiness Tracking"
    },
    {
      "TableName": "app_trainee_map",
      "CoulmnName": "TRAINEE_ID",
      "UITable": "* Master >> App Vs Trainee Mapping"
    }];

    const Result = ['Trainee Name can not be deleted as trainee mapped to below functionalities:',
        ''
    ];
    setTimeout(() => {
      deleteCheck(Table, Result, Trainee_SNO,'trainee')
  },1000)

    setTimeout(() => {

        if (Result.length === 2) {
            pool.getConnection().then(conn => {
                querytraineeDelete = "DELETE FROM traineeinfo WHERE (Trainee_SNO ='" + Trainee_SNO + "')"
                conn.query(querytraineeDelete).then((stakeresult) => {

                        res.send({
                            "Delete": "success"
                        })
                        conn.end();
                    })
                    .catch(err => {
                        //handle error
                        res.send({
                            "Delete": "Fail"
                        })
                        conn.end();
                    })

            }).catch(err => {
                //not connected
            });
        } else {
            res.send({
                "Delete": Result
            })
        }
    }, 1500);
});
  
  // Update Trainee Info
  app.put("/UpdateTrainee",function(req,res){
  
    var Trainee_SNO=req.body.Trainee_SNO 
    var Trainee_IntegrationID=req.body.Trainee_IntegrationID
    var Trainee_Name=req.body.Trainee_Name.replace(/'/g, "\\'");
    var Trainee_email=req.body.Trainee_email
    var Trainee_Role=req.body.Trainee_Role
    var dt=moment(req.body.Trainee_OnBoardDate);
    var Trainee_OnBoardDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
    var Trainee_Travel=req.body.Trainee_Travel
    var Trainee_Skills=req.body.Trainee_Skills
    var LAST_UPDATED_BY = req.body.LAST_UPDATED_BY
    var dt=moment(new Date());
    var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
    var Trainee_Visa =req.body.Trainee_Visa 
  
    queryUpdateTrainee ="Update traineeinfo SET LAST_UPDATED_BY='"+LAST_UPDATED_BY
    +"',UPDATED_AT='"+UPDATED_AT
    +"',Trainee_Name='"+Trainee_Name
    +"',Trainee_email='"+Trainee_email
    +"',Trainee_Role='"+Trainee_Role
    +"',Trainee_OnBoardDate='"+Trainee_OnBoardDate
    +"',Trainee_Travel='"+Trainee_Travel
    +"',Trainee_Skills='"+Trainee_Skills
    +"',Trainee_Visa='"+Trainee_Visa
    +"' where Trainee_SNO='"+Trainee_SNO+"'"
    
    // //console.log(queryUpdateTrainee)
    
      pool.getConnection().then(conn => {        
            conn.query(queryUpdateTrainee).then((queryUpdateTraineeKeyword) => {
    
              res.send({"RecordSave":"Sucess"})
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"RecordSave":"fail"});
                conn.end();
              })
    
          }).catch(err => {
            //not connectedcre
          });
  });
  
  app.get('/getexcelTrainee',(req,res)=>{

    var wb = new xl.Workbook();
    const filename = "SampleTrainee.csv";

    // Add Worksheets to the workbook
    var ws = wb.addWorksheet('Data');
    //var ws2 = wb.addWorksheet('Instructions', options);
    const ws2 = wb.addWorksheet('Instructions', {
      sheetProtection: {
        selectLockedCells: true,
      },
      sheetView: {   
        showGridLines: false, // Flag indicating whether the sheet should have gridlines enabled or disabled during view
    }
    });

    res.setHeader('Content-Type', 'application/octet-stream');
    res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
    wb.write(filename); 

    TraineeRole_Keyword = "select * from adminprofile WHERE FieldCategoryName='TraineeRole' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeRole_Keyword).then((Trainee_Role) => {
                  var  TraineeRoleval=JSON.parse(JSON.stringify(Trainee_Role));
                       for( let i=1; i< TraineeRoleval.length+1; i++){
                  //  //console.log( TraineeRoleval[i-1]["Categoryvalues"]);
                 ws2.cell(i, 10).string(TraineeRoleval[i-1]["Categoryvalues"]); // j Column
                ws2.column(10).hide();
                wb.write(filename);
                 }                        
       conn.end();
     });       
    });

    TraineeSkill_Keyword = "select * from adminprofile WHERE FieldCategoryName='Skills' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeSkill_Keyword).then((Trainee_Skill) => {
         var TraineeSkillval=JSON.parse(JSON.stringify(Trainee_Skill));
         for( let i=1; i< TraineeSkillval.length+1; i++){
                       ws2.cell(i, 11).string(TraineeSkillval[i-1]["Categoryvalues"]); // j Column
           ws2.column(11).hide();
           wb.write(filename); 
                } 
       conn.end();
     });
    });  

    TraineeBoolan_Keyword = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeBoolan_Keyword).then((Trainee_Boolan) => {
         var TraineeBoolanval=JSON.parse(JSON.stringify(Trainee_Boolan));
         for( let i=1; i< TraineeBoolanval.length+1; i++){
           ws2.cell(i, 12).string(TraineeBoolanval[i-1]["Categoryvalues"]); // j Column
           ws2.column(12).hide();
           wb.write(filename);
                } 
       conn.end();
     });
    });

    ws2.cell(1, 1).string("Note: Please do not do any changes for 2nd row in the Data Sheet.");
  ws2.cell(2, 1).string("Note: Please do not do any modifications / delete any data in the Instructions Sheet.");
// ws2.mergeCells('A1:D1');
// ws2.mergeCells('A2:D2');
ws2.cell(1, 1, 1, 4,true).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
},
font: {
  name: 'Arial',
   size: 10 ,
  bold: true,
  color: '#FF0000',
  },
});
ws2.cell(2, 1, 2, 4,true).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
},
font: {
  name: 'Arial',
   size: 10 ,
  bold: true,
  color: '#FF0000',
  },
});

    const data = [
           {   "ColumnName": "Column Name",   "Format": "Format",    "Example": "Example",  "MandatoryColumns": "Mandatory Columns"},          
           {   "ColumnName": "Trainee_Name",   "Format": "Trainee First & Last Name",    "Example": "TTSTools Support",  "MandatoryColumns": "Optional"},
           {   "ColumnName": "Trainee_email",   "Format": "Trainee intranet ID",    "Example": "ttstoolssupport@in.ibm.com",  "MandatoryColumns": "Mandatory"},
           {   "ColumnName": "Trainee_Role",   "Format": "Trainee Role",    "Example": "Developer",  "MandatoryColumns": "Mandatory"},
           {   "ColumnName": "Trainee_OnBoardDate",   "Format": "Date should be in 'mm-dd-yyyy'",    "Example": "02-20-2019",  "MandatoryColumns": "Mandatory"},
           {   "ColumnName": "Trainee_Travel",   "Format": "'Yes' or 'No'",    "Example": "Yes",  "MandatoryColumns": "Mandatory"},
           {   "ColumnName": "Trainee_Skills",   "Format": "Trainee Techical Skills",    "Example": "SAP, JAVA",  "MandatoryColumns": "Mandatory"},
           {   "ColumnName": "Trainee_Visa",   "Format": "If Trainee_Travel= 'Yes' then Trainee_Visa ='Yes' or 'No'",    "Example": "No",  "MandatoryColumns": "Mandatory If Trainee_Travel if 'Yes'"}
    ];

    ws2.column(1).setWidth(20);
    ws2.column(2).setWidth(55);
    ws2.column(3).setWidth(30);
    ws2.column(4).setWidth(30);
    var myStyle = wb.createStyle({
           fill: {
             type: 'pattern',
             patternType: 'solid',
             bgColor: '#1D3649',
             fgColor: '#1D3649',
           },
           font: {
             name: 'Arial',
              size: 10 ,
             bold: true,
             color: 'FFFFFF',
           },
           alignment: {
           horizontal: 'center',
           vertical: 'center',
           },
    });
    ws2.cell( 4, 1).style(myStyle);
    ws2.cell( 4, 2).style(myStyle);
    ws2.cell( 4, 3).style(myStyle);
    ws2.cell( 4, 4).style(myStyle);
    for (let i = 0; i < data.length; i += 1) {
       ws2.cell(i + 4, 1).string(data[i].ColumnName);
       ws2.cell(i + 4, 2).string(data[i].Format);
       ws2.cell(i + 4, 3).string(data[i].Example);
       ws2.cell(i + 4, 4).string(data[i].MandatoryColumns);
    }
    ws2.cell(4, 1, 11, 4).style({border: {
                               left: { style: 'thin'},        
                               right: { style: 'thin'},  
                               top: { style: 'thin'},  
                               bottom: { style: 'thin'} 
                             }
    });

    //worksheet1 data populate
    const sheet1data = [
           { header: 'Trainee_Name',  width: 30 },
           { header: 'Trainee_email',  width: 40 },
           { header: 'Trainee_Role',  width: 15},
           { header: 'Trainee_OnBoardDate', width: 25, style: {numFmt: 'mm-dd-yyyy'} },
           { header: 'Trainee_Travel', width: 15  },
           { header: 'Trainee_Skills', width: 15},
           { header: 'Trainee_Visa', width: 15},
    ];
    ws.row(2).hide();
    var sheet1Row =1;
    for (let i = 0; i < sheet1data.length; i += 1) {
    ws.cell( sheet1Row, i+1).string(sheet1data[i].header);
    ws.cell( sheet1Row , i+1).style(myStyle);
    ws.column(i+1).setWidth(sheet1data[i].width);
    }

    //for loop

    ws.cell(1, 1, 1, 7).style({border: {
                                            left: { style: 'thin'},        
                                            right: { style: 'thin'},  
                                            top: { style: 'thin'},  
                                            bottom: { style: 'thin'} 
                                          }
    });

    ws.addDataValidation({
    type: 'list',
    allowBlank: true,
    prompt: 'Trainee Role',
    error: 'Invalid choice was chosen',
    showDropDown: true,
    sqref: 'C3:C100',
    formulas: ['=OFFSET(Instructions!$J$1,0,0,COUNTA(Instructions!$J:$J),1)']
    });                             

    ws.addDataValidation({
    type: 'list',
    allowBlank: true,
    prompt: 'Trainee_Travel',
    error: 'Invalid choice was chosen',
    showDropDown: true,
    sqref: 'E3:E100',
    formulas: ['=OFFSET(Instructions!$L$1,0,0,COUNTA(Instructions!$L:$L),1)']
    });                              

    ws.addDataValidation({
    type: 'list',
    allowBlank: true,
    prompt: 'Trainee_Visa',
    error: 'Invalid choice was chosen',
    showDropDown: true,
    sqref: 'G3:G100',
    formulas: ['=OFFSET(Instructions!$L$1,0,0,COUNTA(Instructions!$L:$L),1)']
    });                               

    ws.addDataValidation({
    type: 'list',
    allowBlank: true,
    prompt: 'Trainee_Skills',
    error: 'Invalid choice was chosen',
    showDropDown: true,
    sqref: 'F3:F100',
    formulas: ['=OFFSET(Instructions!$K$1,0,0,COUNTA(Instructions!$K:$K),1)']
    });                                

    var myStyle1 = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '00FF00',
     fgColor: '00FF00',
    },
    });    
    wb.write(filename); 
    setTimeout(() => {      
      var filePath = __dirname+'\\'+filename;
     res.setHeader('Content-Type', 'application/octet-stream');
     res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
     return res.sendFile(filePath);
     }, 4000) 

  });




  function TraineeExcel(activities,filename,arrayRole,arraySkill,arrayBoolan){
       
      // Create a new instance of a Workbook class
   var wb = new xl.Workbook();
   // const filename = "ImportTrainee.csv";
   // Add Worksheets to the workbook
   var ws = wb.addWorksheet('Data');
   var ws2 = wb.addWorksheet('Instructions');
   var ws3 = wb.addWorksheet('Upload Results');
     TraineeRole_Keyword = "select * from adminprofile WHERE FieldCategoryName='TraineeRole' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeRole_Keyword).then((Trainee_Role) => {
                  var  TraineeRoleval=JSON.parse(JSON.stringify(Trainee_Role));
                  setTimeout(() => { 
                   for( let i=1; i< TraineeRoleval.length+1; i++){
                 ws2.cell(i, 10).string(TraineeRoleval[i-1]["Categoryvalues"]); // j Column
                 arrayRole.push(TraineeRoleval[i-1]["Categoryvalues"]) 
                 ws2.column(10).hide();
                wb.write(filename);                
                 }  
               }, 4000)                      
       conn.end();
     });       
   });
   
   TraineeSkill_Keyword = "select * from adminprofile WHERE FieldCategoryName='Skills' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeSkill_Keyword).then((Trainee_Skill) => {
         var TraineeSkillval=JSON.parse(JSON.stringify(Trainee_Skill));
         setTimeout(() => { 
                 for( let i=1; i< TraineeSkillval.length+1; i++){
                       ws2.cell(i, 11).string(TraineeSkillval[i-1]["Categoryvalues"]); // j Column
                       arraySkill.push(TraineeSkillval[i-1]["Categoryvalues"])
                       ws2.column(11).hide();
           wb.write(filename); 
                } 
               }, 5000) 
       conn.end();
     });
   });  
   
   TraineeBoolan_Keyword = "select * from adminprofile WHERE FieldCategoryName='Boolan' ORDER BY Categoryvalues ASC" ; 
     pool.getConnection().then(conn => {        
       conn.query(TraineeBoolan_Keyword).then((Trainee_Boolan) => {
         var TraineeBoolanval=JSON.parse(JSON.stringify(Trainee_Boolan));
         setTimeout(() => { 
                 for( let i=1; i< TraineeBoolanval.length+1; i++){
           ws2.cell(i, 12).string(TraineeBoolanval[i-1]["Categoryvalues"]); // j Column
           arrayBoolan.push(TraineeBoolanval[i-1]["Categoryvalues"]) 
           ws2.column(12).hide();
           wb.write(filename);
                } 
               }, 6000) 
       conn.end();
     });
   });
  
   const data = [
    {   "ColumnName": "Column Name",   "Format": "Format",    "Example": "Example",  "MandatoryColumns": "Mandatory Columns"},          
    {   "ColumnName": "Trainee_Name",   "Format": "Trainee First & Last Name",    "Example": "TTSTools Support",  "MandatoryColumns": "Optional"},
    {   "ColumnName": "Trainee_email",   "Format": "Trainee intranet ID",    "Example": "ttstoolssupport@in.ibm.com",  "MandatoryColumns": "Mandatory"},
    {   "ColumnName": "Trainee_Role",   "Format": "Trainee Role",    "Example": "Developer",  "MandatoryColumns": "Mandatory"},
    {   "ColumnName": "Trainee_OnBoardDate",   "Format": "Date should be in 'mm-dd-yyyy'",    "Example": "02-20-2019",  "MandatoryColumns": "Mandatory"},
    {   "ColumnName": "Trainee_Travel",   "Format": "'Yes' or 'No'",    "Example": "Yes",  "MandatoryColumns": "Mandatory"},
    {   "ColumnName": "Trainee_Skills",   "Format": "Trainee Techical Skills",    "Example": "SAP, JAVA",  "MandatoryColumns": "Mandatory"},
    {   "ColumnName": "Trainee_Visa",   "Format": "If Trainee_Travel= 'Yes' then Trainee_Visa ='Yes' or 'No'",    "Example": "No",  "MandatoryColumns": "Mandatory If Trainee_Travel if 'Yes'"}
  ];
  
  ws2.column(1).setWidth(20);
  ws2.column(2).setWidth(55);
  ws2.column(3).setWidth(30);
  ws2.column(4).setWidth(30);
  var myStyle = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#1D3649',
      fgColor: '#1D3649',
    },
    font: {
      name: 'Arial',
       size: 10 ,
      bold: true,
      color: 'FFFFFF',
    },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
    },
  });
  ws2.cell( 1, 1).style(myStyle);
  ws2.cell( 1, 2).style(myStyle);
  ws2.cell( 1, 3).style(myStyle);
  ws2.cell( 1, 4).style(myStyle);
  for (let i = 0; i < data.length; i += 1) {
  ws2.cell(i + 1, 1).string(data[i].ColumnName);
  ws2.cell(i + 1, 2).string(data[i].Format);
  ws2.cell(i + 1, 3).string(data[i].Example);
  ws2.cell(i + 1, 4).string(data[i].MandatoryColumns);
  }
  ws2.cell(1, 1, 8, 4).style({border: {
                        left: { style: 'thin'},        
                        right: { style: 'thin'},  
                        top: { style: 'thin'},  
                        bottom: { style: 'thin'} 
                      }
  });
  
  //worksheet1 data populate
  const sheet1data = [
           { header: 'Trainee_Name',  width: 30 },
           { header: 'Trainee_email',  width: 40 },
           { header: 'Trainee_Role',  width: 13},
           { header: 'Trainee_OnBoardDate', width: 25, style: {numFmt: 'mm-dd-yyyy'} },
           { header: 'Trainee_Travel', width: 13  },
           { header: 'Trainee_Skills', width: 15},
           { header: 'Trainee_Visa', width: 13},
           { header: 'Trainee_Name',  width: 30 },
  ];
  var Sheet1Row = 1;
  var cnt = 1;
  for (let i = 0; i < sheet1data.length; i += 1) {
   ws.cell( Sheet1Row, i+1).string(sheet1data[i].header);
   ws.cell( Sheet1Row, i+1).style(myStyle);
   ws.column(i+1).setWidth(sheet1data[i].width);
   ws.cell( 1, i+13).string(sheet1data[i].header);
   ws.cell( 1, i+13).style(myStyle);
   ws.column(i+13).setWidth(sheet1data[i].width);
  }
  
  var myStyleRed = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#ffbf00',
    fgColor: '#ffbf00',
    },
    font: {
      name: 'Arial',
       size: 10 ,
      bold: true,
      color: '#FF0000',
    },
    alignment: {
    // horizontal: 'center',
    vertical: 'center',
    //MergeCell: true,
    },
  });
  
  const Range= 'M3:S'+activities.length+1
  ws.cell( 2, 1, 2, 7,true).formula('IF(COUNTIF('+Range+',"No")>0,"Please validate the data","")')
  ws.cell( 2, 1).style(myStyleRed);
  ws.row(2).setHeight(20);
  
  let emrow = 3;
    async function operation() {
      new Promise(function(resolve, reject) {
       var options = { method: 'GET',
       url: 'http://bluepages.ibm.com/BpHttpApisv3/wsapi?byInternetAddr=' + USERNAME,
       headers: { accept: 'application/json','x-ibm-client-id': 'REPLACE_THIS_KEY' } };
          var a =  request(options, function(error, response, body) {
           if (error) return console.error('Failed: %s', error.message);
           if (JSON.stringify(body).split('\\n')[0].split(':')[1] === undefined){
             ArrayEmail_check.push('No')
             ArrayNotesID_check.push('No')
             ws.cell(emrow, 10).string('No'); // T & L Column
            ws.cell(emrow, 11).string('No'); // T & L Column
            wb.write(filename);
            emrow++;
                        } else {
            //  //console.log(JSON.stringify(body).split('\\n')[22].split(':')[1]);    
            //  //console.log(JSON.stringify(body).split('\\n')[12].split(':')[1]);
            ArrayEmail_check.push(JSON.stringify(body).split('\\n')[22].split(':')[1])
            ArrayNotesID_check.push(JSON.stringify(body).split('\\n')[57].split(':')[1]+JSON.stringify(body).split('\\n')[59].split(':')[1])         
            ws.cell(emrow, 10).string(JSON.stringify(body).split('\\n')[22].split(':')[1]); // T & L Column
            ws.cell(emrow, 11).string(JSON.stringify(body).split('\\n')[57].split(':')[1]+JSON.stringify(body).split('\\n')[59].split(':')[1]); // T & L Column
            wb.write(filename);
            emrow++;
            // //console.log(ArrayEmail_check)
            }
          })
             resolve(a) // successfully fill promise
     })
  
  }
  async function app() {
   for( var ie=0; ie< activities.length-1; ie++){
    Sheet1Row = ie+3;
     USERNAME =activities[ie]["Trainee_email"];
     if  (USERNAME === undefined){ 
      ws.cell(emrow, 10).string('No'); // T & L Column
      ws.cell(emrow, 11).string('No'); // T & L Column
      wb.write(filename);
      emrow++;
      ArrayEmail_check.push('No')
      ArrayNotesID_check.push('No')
    }
    else{ 
       var options = { method: 'GET',
       url: 'http://bluepages.ibm.com/BpHttpApisv3/wsapi?byInternetAddr=' + USERNAME,
       headers: { accept: 'application/json','x-ibm-client-id': 'REPLACE_THIS_KEY' } };
       var a =await operation(
         request(options, function(error, response, body) {
           if (error) return console.error('Failed: %s', error.message);
  
         })
       )
     }}   //
    //  var a = await operation() // a is 5
  }  
  app()
  
  let sheetcnt = activities.length+1
  
  function PopulateExcel() {
    for( var i=0; i< activities.length-1; i++){
     Sheet1Row = i+3;
     var count = i+3;
  // if (activities[i]["Trainee_Name"] !== undefined){
    ws.cell( Sheet1Row, 1).formula('IF(ISERROR(INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))=TRUE,"",INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))');
  // }
  if (activities[i]["Trainee_email"] !== undefined){
    ws.cell( Sheet1Row, 2).string(activities[i]["Trainee_email"]); 
  }
  if (activities[i]["Trainee_Role"] !== undefined){
    ws.cell( Sheet1Row, 3).string(activities[i]["Trainee_Role"]);
  }
  if (activities[i]["Trainee_OnBoardDate"] !== undefined){
    ws.cell( Sheet1Row, 4).string(activities[i]["Trainee_OnBoardDate"]);
  }
  if (activities[i]["Trainee_Travel"] !== undefined){
    ws.cell( Sheet1Row, 5).string(activities[i]["Trainee_Travel"]);
  }
  if (activities[i]["Trainee_Skills"] !== undefined){
    ws.cell( Sheet1Row, 6).string(activities[i]["Trainee_Skills"]);
  }
  if (activities[i]["Trainee_Visa"] !== undefined){
    ws.cell( Sheet1Row, 7).string(activities[i]["Trainee_Visa"]);
  }
  
  ws.cell( Sheet1Row, 8).formula('IF(ISERROR(INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))=TRUE,"",INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))');
  
  RowSheet =Sheet1Row-2;
  ws.cell( count, 14).formula('=IF(COUNTIF(J:J,B'+Sheet1Row+')>0,"Yes","No")');
  ws.cell( count, 15).formula('=IF(C'+Sheet1Row+'="","No",IF(COUNTIF(Instructions!J:J,C'+Sheet1Row+')>0,"Yes","No"))');
  ws.cell( count, 16).formula('=IF(D'+Sheet1Row+'="","No","Yes")');
  ws.cell( count, 17).formula('=IF(E'+Sheet1Row+'="","No",IF(COUNTIF(Instructions!L:L,E'+Sheet1Row+')>0,"Yes","No"))');
  ws.cell( count, 18).formula('=IF(F'+Sheet1Row+'="","No",IF(COUNTIF(Instructions!K:K,F'+Sheet1Row+')>0,"Yes","No"))');
  ws.cell( count, 19).formula('=IF(AND(E'+Sheet1Row+'="Yes",G'+Sheet1Row+'="")=TRUE,"No",IF(COUNTIF(Instructions!L:L,G'+Sheet1Row+')>0,"Yes","No"))');
  }
  }
  for( var i=9; i< 20; i++){
   ws.column(i).hide();
  }
  
  setTimeout(() => {
   PopulateExcel()
   ,  100})
  
   ws.cell(1, 1, activities.length+1, 7).style({border: {
    left: { style: 'thin'},        
    right: { style: 'thin'},  
    top: { style: 'thin'},  
    bottom: { style: 'thin'} 
  }
  });
  
  //Data Valudation
  let DVcellnum ='';
  for (let col = 3; col <= 7; col ++) {
    if (col !== 4) {
    if (col === 3) {
     DVcellnum =10;
      } else if (col === 5) {
        DVcellnum =12;
      } else if (col === 6) {
        DVcellnum =11;
      } else if (col === 7) {
        DVcellnum =12;
      }
     WsDataRange =xl.getExcelCellRef(3, col)+":"+xl.getExcelCellRef( 100, col); 
  
   const DVcellalpha = xl.getExcelAlpha(DVcellnum);
   ws.addDataValidation({
     type: 'list',
     allowBlank: true,
     // prompt: 'Application Type',
     error: 'Invalid choice was chosen',
     showDropDown: true,
     sqref: WsDataRange,
     formulas: ['=OFFSET(Instructions!$'+DVcellalpha+'$1,0,0,COUNTA(Instructions!$'+DVcellalpha+':$'+DVcellalpha+'),1)'] 
   }); 
  }
  }
  
  var myStyle1 = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '#ffbf00',
     fgColor: '#ffbf00',
    },
    });
  
  //ConditionalFormattingRule for all the Rows.
  let cellnum ='';
  for (let col = 2; col <= 7; col ++) {
    WsRange =xl.getExcelCellRef(3, col)+":"+xl.getExcelCellRef( activities.length+1, col);  
    if ((col === 2)){
       cellnum =14;
    }else {
       cellnum =col+12;
    }
   const cellrange =xl.getExcelCellRef(3, cellnum); 
    ws.addConditionalFormattingRule(WsRange, {
     type: 'expression', // the conditional formatting type
     priority: 1, // rule priority order (required)
     //formula: 'COUNTIF(OFFSET(Instructions!$J$1,0,0,COUNTA(Instructions!$J:$J),1),C3)=0', // formula that returns nonzero or 0
     formula: 'IF('+cellrange+'="No",TRUE,FALSE)',
     style: myStyle1, // a style object containing styles to apply
   });
  }
  
  // for (let shrow = 3; shrow <= sheetcnt; shrow ++) {
  // ws.cell( shrow, 1).formula('IF(ISERROR(INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))=TRUE,"",INDEX($J$3:$K$9,MATCH(B'+Sheet1Row+',$J$3:$J$'+sheetcnt+',0),2))');
  // }
  // //console.log("final"+ArrayEmail_check)
  for( let i=1; i< ArrayEmail_check.length+1; i++){
    ws.cell(i, 20).string(ArrayEmail_check[i-1]); // T & L Column
    ws.cell(i, 21).string(ArrayNotesID_check[i-1]);
    ws.column(20).hide();
    ws.column(21).hide();
    wb.write(filename);
  } 
  
  var filePath = __dirname+'\\'+filename;
  
  wb.write(filePath);
  }
  
  app.post('/ImportTrainee',(req,res)=>{
  
    var endres = true;
    ArrayEmail_check = [];
    ArrayNotesID_check = [];
    // const filename = "ImportTrainee.csv";
    var arrayRole = []; 
    var arraySkill = [];
    var arrayBoolan = []; 
    var activities = JSON.parse(JSON.stringify(req.body));
    var LAST_UPDATED_BY = activities[activities.length-1]["LAST_UPDATED_BY"];
  
    fileTrainee = "ImportTrainee-"+LAST_UPDATED_BY.replace(/\s/g,'')+".csv"
  
    TraineeExcel(activities,fileTrainee,arrayRole,arraySkill,arrayBoolan);
  
  setTimeout(() => {
  // //console.log("5.Open file workbook")
  var filePath = __dirname+'\\'+fileTrainee;
  res.setHeader('Content-Type', 'application/octet-stream');
  res.setHeader('Content-Disposition', 'attachment; filename=' + fileTrainee);
  
  var workbook = new Excel.Workbook();
  var arr = [];
  setTimeout(() => {
  workbook.xlsx.readFile(filePath).then(function () {
  var worksheet=workbook.getWorksheet('Data');
  var worksheet1=workbook.getWorksheet('Instructions');
  arr = []
  FalgViewExcel='No'
  let Rowsh =0;
  for (let Sh1Row=3; Sh1Row<=worksheet.rowCount;Sh1Row++){ 
      for( var Row1=3; Row1<= worksheet.rowCount; Row1++){
          if (worksheet.getRow(Sh1Row).getCell(2).value === worksheet.getRow(Row1).getCell(10).value.replace(/\s+/g,'')) {
            arr[Rowsh]=worksheet.getRow(Row1).getCell(11).value
          } 
      }
      if(arr[Rowsh] === undefined){
        arr[Rowsh] = 'No'
      }
      Rowsh=Rowsh+1
    
    arrTrainee = arr
    
   if (arrTrainee.includes('No') === true){
    FalgViewExcel='Yes'
   }
    // //console.log(arrTrainee)
    // //console.log("next")
  var Role =worksheet.getRow(Sh1Row).getCell(3).value
  var Travel =worksheet.getRow(Sh1Row).getCell(5).value
  var skill =worksheet.getRow(Sh1Row).getCell(6).value
  var Visa =worksheet.getRow(Sh1Row).getCell(7).value
  if ((worksheet.getRow(Sh1Row).getCell(1).value === '') || (worksheet.getRow(Sh1Row).getCell(2).value === '') || (worksheet.getRow(Sh1Row).getCell(4).value === '')) {
    // //console.log('Row '+ Sh1Row);
    FalgViewExcel='Yes'
   }
  
   if (arrayRole.includes(Role) === false){
    // //console.log('Role '+ Role);
    FalgViewExcel='Yes'
   }
  
   if (arrayBoolan.includes(Travel) === false){
    // //console.log('Travel '+Travel);
    FalgViewExcel='Yes'
   }
  
   if (arraySkill.includes(skill) === false){
    // //console.log('Skill '+skill);
    FalgViewExcel='Yes'
   }
  
   if ((arrayBoolan.includes(Visa) === false) && Travel !== 'No'){
    // //console.log('Visa '+ Visa);
    FalgViewExcel='Yes'
   }
    
  }
  // //console.log("FalgViewExcel"+FalgViewExcel);
  }), 20000});
  }, 24000)
  
  setTimeout(() => {
  // //console.log("6.checking the final if")
  // //console.log(arrTrainee)
  // //console.log("FalgViewExcel"+FalgViewExcel)
  if((FalgViewExcel === "Yes")){
    endres = false;
  }else{   
   Trainee_IntegrationID = activities[activities.length-1]["Trainee_IntegrationID"]
    CREATED_BY = activities[activities.length-1]["CREATED_BY"];
    LAST_UPDATED_BY = activities[activities.length-1]["LAST_UPDATED_BY"];
  
    var filePath = __dirname+'\\'+fileTrainee;
    var workbook = XLSX.readFile(filePath);
    var sheet_name_list = workbook.SheetNames;
  // var sheet = workbook.Sheets[sheet_name_list[0]]
  
    var Excellist = JSON.parse(JSON.stringify(XLSX.utils.sheet_to_json(workbook.Sheets[sheet_name_list[0]], {
      raw: true, type:'binary'})))
    // //console.log(Excellist);
      
    pool.getConnection().then(conn => { 
    for( var i=0; i< Excellist.length; i++){
  
      if(arrTrainee[i] === 'No'){
        Trainee_Name = '';
      }else{
        Trainee_Name = arrTrainee[i];
      }
          
          Trainee_email = Excellist[i]["Trainee_email"];
          Trainee_Role = Excellist[i]["Trainee_Role"];
          var dt=moment(Excellist[i]["Trainee_OnBoardDate"]);
          var Trainee_OnBoardDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          Trainee_Travel = Excellist[i]["Trainee_Travel"];
          Trainee_Skills = Excellist[i]["Trainee_Skills"];
          var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          var dt=moment(new Date());
          var UPDATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");  
          Trainee_Visa = Excellist[i]["Trainee_Visa"];
  
          queryImportTrainee ="insert into traineeinfo values ("+null
            + ",'"+ Trainee_IntegrationID 
            +"','"+Trainee_Name
            +"','"+ Trainee_email
            + "','"+ Trainee_Role
            + "','"+ Trainee_OnBoardDate   
            + "','"+ Trainee_Travel
            +"','"+Trainee_Skills
            +"','"+CREATED_BY
            +"','"+LAST_UPDATED_BY
            +"','"+CREATED_AT
            +"','"+UPDATED_AT
            +"','"+Trainee_Visa+"')";
          // //console.log(queryImportTrainee)
          conn.query(queryImportTrainee).then((UploadqueryImportTrainee) => {         
            // res.send({"save" : "Success"} )
            conn.end();
          })
          .catch(err => {
          //handle error
          // res.send({"insert" : "Fail" })
          endres = false;  
          conn.end();
          })   
    } 
    });     
  }
  // //console.log("endres"+endres)
  if(endres === true){
  res.send({"insert":"success"}); 
  }else {
  
   setTimeout(() => { 
      var filePath = __dirname+'\\'+fileTrainee;
     res.setHeader('Content-Type', 'application/octet-stream');
     res.setHeader('Content-Disposition', 'attachment; filename=' + fileTrainee);
     res.send({"Filepath": filePath}); 
     }, 26000) 
  }
  }, 30000)
  });
  
  app.get("/ViewUploadexecelTrainee/:USername", (req, res)=>{
  
    var USername = req.params.USername;   
    fileTrainee = "ImportTrainee-"+USername.replace(/\s/g,'')+".csv"
    var filePath = __dirname+'\\'+fileTrainee;
   
   res.setHeader('Content-Type', 'application/octet-stream');
   res.setHeader('Content-Disposition', 'attachment; filename=' + fileTrainee);
   setTimeout(()=>{
    try {
        // //console.log('remove' +filePath)
     fs.unlinkSync(filePath)
     //file removed
   } catch(err) {
     console.error(err)
   }
    }, 4000)
   return res.sendFile(filePath);
  });
  
  app.get("/getEmployeeDirectory",(req,res)=>{
      var USERNAME=req.query.USERNAME; 
  var options = { method: 'GET',
    url: 'http://bluepages.ibm.com/BpHttpApisv3/wsapi?allByNameFuzzy=' + USERNAME
    ,
      headers: 
     { accept: 'application/json',
       'x-ibm-client-id': 'REPLACE_THIS_KEY' } };
  
  request(options, function (error, response, body) {
    if (error) return console.error('Failed: %s', error.message);
    // //console.log(response.toJSON)
    // //console.log('Success: ', body);
  res.send(response)
  
    // //console.log('Success: ', body.length);
  });
  // //console.log(res.json(req.user));
  }); 
  
  app.get("/getTraineeIntranetID",(req,res)=>{
    var USERNAME=req.query.USERID; 
  var options = { method: 'GET',
  url: 'http://bluepages.ibm.com/BpHttpApisv3/wsapi?byInternetAddr=' + USERNAME
  ,
    headers: 
   { accept: 'application/json',
     'x-ibm-client-id': 'REPLACE_THIS_KEY' } };
  
  request(options, function (error, response, body) {
  if (error) return console.error('Failed: %s', error.message);
  // //console.log(response.toJSON)
  // //console.log('Success: ', body);
  res.send(response)
  
  // //console.log('Success: ', body.length);
  });
  // //console.log(res.json(req.user));
  });
  
  //=========================Trainee Info Sample Export===================
  //========================= Trainee code ends=========================
 
//****************************************TWBS start****************************************
app.get('/TWBSKeywords',(req,res)=>{
  TWBSKeywordsQuery="SELECT distinct(PHASE_NAME) FROM standard_activity"
  pool.getConnection().then(conn=>{
    conn.query(TWBSKeywordsQuery).then((TWBSKeywordsQueryValues)=>{
      res.send(TWBSKeywordsQueryValues);
      conn.end();
    })
  })
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
})
app.get('/getTailoredWBSSBforAccountSpecific/:phaseName/:IntegrationID',(req,res)=>{
  
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;
  // AccountTemplatecheck = "select * from standard_activity_for_accounts where IntegrationID ='"+IntegrationID+"' AND  PHASE_NAME ='"+phaseName+"'" ;
//console.log(phaseName +"  "+IntegrationID)
  TailoredWBSSB = "(select account.STANDARD_ACTIVITY_ID,account.STANDARD_ACTIVITY_NAME,admin.MILESTONE_OR_TASK,admin.PHASE_NAME,"+
  "AdID,ADName,"+
  "account.STANDARD_ACTIVITY_CREATED_BY,account.STANDARD_ACTIVITY_LAST_UPDATED_BY,account.STANDARD_ACTIVITY_CREATED_AT,"+
  "account.STANDARD_ACTIVITY_LAST_UPDATED_AT,account.IntegrationID,account.CheckedValue,account.Plan_Start_Date,account.Plan_End_Date,"+
  "account.Replan_Start_Date,account.RePlan_End_Date,account.Actual_Start_Date,account.Actual_End_Date,account.Baselined,"+
  "account.ServiceStatus,account.Owner_Name,account.Comments,account.Scope_UNID,account.epicUNID,account.sprintUNID,account.admin_id "+
  " from   "+
  "(SELECT STANDARD_ACTIVITY_ID as AdID,STANDARD_ACTIVITY_NAME as ADName,MILESTONE_OR_TASK,PHASE_NAME,null as IntegrationID,"+
  " 1 as CheckedValue FROM standard_activity where PHASE_NAME='"+phaseName+"') as admin "+
  " left JOIN"+
  " (SELECT STANDARD_ACTIVITY_ID ,"+
  "STANDARD_ACTIVITY_NAME ,MILESTONE_OR_TASK,PHASE_NAME,STANDARD_ACTIVITY_CREATED_BY,"+
  "STANDARD_ACTIVITY_LAST_UPDATED_BY,STANDARD_ACTIVITY_CREATED_AT,STANDARD_ACTIVITY_LAST_UPDATED_AT,"+
  "IntegrationID,CheckedValue,Plan_Start_Date,Plan_End_Date,Replan_Start_Date,RePlan_End_Date,"+
  "Actual_Start_Date,Actual_End_Date,Baselined,ServiceStatus,Owner_Name,Comments,Scope_UNID,"+
  "epicUNID,sprintUNID,admin_id FROM standard_activity_for_accounts "+
  " where PHASE_NAME='"+phaseName+"' and IntegrationID ='"+IntegrationID+"') as account "+
  " on AdID =account.admin_id )"+
  " union "+
  " (SELECT STANDARD_ACTIVITY_ID ,STANDARD_ACTIVITY_NAME,MILESTONE_OR_TASK,PHASE_NAME,"+
  "STANDARD_ACTIVITY_NAME,STANDARD_ACTIVITY_ID,"+
  "STANDARD_ACTIVITY_CREATED_BY,STANDARD_ACTIVITY_LAST_UPDATED_BY,STANDARD_ACTIVITY_CREATED_AT,"+
  "STANDARD_ACTIVITY_LAST_UPDATED_AT,IntegrationID,CheckedValue,Plan_Start_Date,Plan_End_Date,Replan_Start_Date,RePlan_End_Date,"+
  "Actual_Start_Date,Actual_End_Date,Baselined,ServiceStatus,Owner_Name,Comments,Scope_UNID,"+
  "epicUNID,sprintUNID,admin_id FROM standard_activity_for_accounts "+
  " where PHASE_NAME='"+phaseName+"' and IntegrationID ='"+IntegrationID+"'and admin_id = 0)"

  //console.log(TailoredWBSSB)
  pool.getConnection().then(conn=>{
        conn.query(TailoredWBSSB).then((TailoredWBSSBResult)=>{
          res.send(TailoredWBSSBResult)
          conn.end();
        })        
  })
    .catch(err=>{
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
    .catch(err=>{
    //not connected
  })
})
app.get('/TailoredWBSSBforAccount/:phaseName/:IntegrationID', (req, res) => {
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;
  AccountTemplatecheck = "select * from standard_activity_for_accounts where IntegrationID ='" 
                          + IntegrationID + "' AND  PHASE_NAME ='" + phaseName + "'";
//console.log(AccountTemplatecheck)
  pool.getConnection().then(conn => {
          conn.query(AccountTemplatecheck).then((AccountTemplatecheck) => {
              res.send(AccountTemplatecheck);
              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
})
app.post('/postTailoredWBSSBAdd',(req,res)=>{
  //console.log(req.body)
  STANDARD_ACTIVITY_ID = null;
  STANDARD_ACTIVITY_NAME = req.body.STANDARD_ACTIVITY_NAME
  MILESTONE_OR_TASK = req.body.MILESTONE_OR_TASK
  PHASE_NAME = req.body.PHASE_NAME
  STANDARD_ACTIVITY_CREATED_BY = req.body.STANDARD_ACTIVITY_CREATED_BY
  STANDARD_ACTIVITY_LAST_UPDATED_BY = null
  var dt=moment(new Date());
  STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  IntegrationID = req.body.IntegrationID
  CheckedValue = 1
  Plan_Start_Date = '0000-00-00 00:00:00'
  Plan_End_Date = '0000-00-00 00:00:00'
  Replan_Start_Date= '0000-00-00 00:00:00'
  Replan_End_Date= '0000-00-00 00:00:00'
  Actual_Start_Date= '0000-00-00 00:00:00'
  Actual_End_Date= '0000-00-00 00:00:00'
  Baselined=0
  ServiceStatus =null;
  Owner_Name = '';
  Comments ='';
  Scope_UNID = 0;
  epicUNID = 0;
  sprintUNID =0;
  admin_id = 0;
  

  postTailoredWBSSB = "insert into standard_activity_for_accounts values (" 
  + STANDARD_ACTIVITY_ID + ",'" 
  + STANDARD_ACTIVITY_NAME + "','" 
  + MILESTONE_OR_TASK + "','" 
  + PHASE_NAME + "','" 
  + STANDARD_ACTIVITY_CREATED_BY + "','" 
  + STANDARD_ACTIVITY_LAST_UPDATED_BY + "','" 
  + STANDARD_ACTIVITY_CREATED_AT + "','" 
  + STANDARD_ACTIVITY_LAST_UPDATED_AT + "','" 
  + IntegrationID + "','" 
  + CheckedValue + "','" 
  + Plan_Start_Date + "','" 
  + Plan_End_Date + "','" 
  + Replan_Start_Date + "','" 
  + Replan_End_Date + "','" 
  + Actual_Start_Date + "','" 
  + Actual_End_Date + "','" 
  + Baselined  + "','" 
  + ServiceStatus  + "','" 
  + Owner_Name  + "','" 
  + Comments  + "','" 
  + Scope_UNID  + "','" 
  + epicUNID  + "','" 
  + sprintUNID  + "','" 
  + admin_id  + "')"
  
//console.log(postTailoredWBSSB)
      pool.getConnection().then(conn => {        
            conn.query(postTailoredWBSSB).then((postTailoredWBSSBresult) => {
              
              res.send({"0":{"save": "success"}});
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"0":{"save": "fail"}});
                conn.end();
              })
              
          }).catch(err => {
            //not connected
          });
   

})
app.post('/postTailoredWBSSB', (req, res) => {
  var endres = true
  var len = req.body.length
//console.log("test")
  pool.getConnection().then(conn => {
      for (var i in req.body) {
        
          STANDARD_ACTIVITY_ID = null;
          STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          PHASE_NAME = req.body[i].PHASE_NAME
          STANDARD_ACTIVITY_CREATED_BY = req.body[i].STANDARD_ACTIVITY_CREATED_BY
          STANDARD_ACTIVITY_LAST_UPDATED_BY = null
          var dt=moment(new Date());
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID
          CheckedValue = req.body[i].CheckedValue
          Plan_Start_Date = '0000-00-00 00:00:00'
          Plan_End_Date = '0000-00-00 00:00:00'
          Replan_Start_Date= '0000-00-00 00:00:00'
          Replan_End_Date= '0000-00-00 00:00:00'
          Actual_Start_Date= '0000-00-00 00:00:00'
          Actual_End_Date= '0000-00-00 00:00:00'
          Baselined=0
		      ServiceStatus =null;
          Owner_Name = '';
          Comments ='';
          Scope_UNID = 0;
          epicUNID = 0;
          sprintUNID =0;
          admin_id = req.body[i].admin_id

          postTailoredWBSSB = "insert into standard_activity_for_accounts values (" 
          + STANDARD_ACTIVITY_ID + ",'" 
          + STANDARD_ACTIVITY_NAME + "','" 
          + MILESTONE_OR_TASK + "','" 
          + PHASE_NAME + "','" 
          + STANDARD_ACTIVITY_CREATED_BY + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_BY + "','" 
          + STANDARD_ACTIVITY_CREATED_AT + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_AT + "','" 
          + IntegrationID + "','" 
          + CheckedValue + "','" 
          + Plan_Start_Date + "','" 
          + Plan_End_Date + "','" 
          + Replan_Start_Date + "','" 
          + Replan_End_Date + "','" 
          + Actual_Start_Date + "','" 
          + Actual_End_Date + "','" 
          + Baselined  + "','" 
          + ServiceStatus  + "','" 
          + Owner_Name  + "','" 
          + Comments  + "','" 
          + Scope_UNID  + "','" 
          + epicUNID  + "','" 
          + sprintUNID  + "','" 
          + admin_id  + "')"
          
          conn.query(postTailoredWBSSB).then((postTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  console.log(err)
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
      console.log(err)
      //console.log("not connected")
  });

  if (endres === true) {
      res.send({"0":{"save": "success"}});
  } else {
      res.send({"0":{"save": "fail"}});
  }

})
app.put('/putTailoredWBSSB', (req, res) => {
  // //console.log(req.body)
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID
          STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          PHASE_NAME = req.body[i].PHASE_NAME          
          var dt=moment(new Date());
          STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID
          CheckedValue = req.body[i].CheckedValue
          // //console.log(req.body[i].STANDARD_ACTIVITY_NAME+"  "+ req.body[i].CheckedValue)
           if (req.body[i].admin_id === null){
             STANDARD_ACTIVITY_ID = null;            
              STANDARD_ACTIVITY_CREATED_BY = req.body[i].STANDARD_ACTIVITY_CREATED_BY;
              STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY;
              Plan_Start_Date = '0000-00-00 00:00:00'
              Plan_End_Date = '0000-00-00 00:00:00'
              Replan_Start_Date= '0000-00-00 00:00:00'
              Replan_End_Date= '0000-00-00 00:00:00'
              Actual_Start_Date= '0000-00-00 00:00:00'
              Actual_End_Date= '0000-00-00 00:00:00'
              Baselined= req.body[i].Baselined
              ServiceStatus =null;
              Owner_Name = '';
              Comments ='';
              Scope_UNID = 0;
              epicUNID = 0;
              sprintUNID =0;
              admin_id = req.body[i].AdID
              
            putTailoredWBSSB = "insert into standard_activity_for_accounts values (" 
          + STANDARD_ACTIVITY_ID + ",'" 
          + STANDARD_ACTIVITY_NAME + "','" 
          + MILESTONE_OR_TASK + "','" 
          + PHASE_NAME + "','" 
          + STANDARD_ACTIVITY_CREATED_BY + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_BY + "','" 
          + STANDARD_ACTIVITY_CREATED_AT + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_AT + "','" 
          + IntegrationID + "','" 
          + CheckedValue + "','" 
          + Plan_Start_Date + "','" 
          + Plan_End_Date + "','" 
          + Replan_Start_Date + "','" 
          + Replan_End_Date + "','" 
          + Actual_Start_Date + "','" 
          + Actual_End_Date + "','" 
          + Baselined  + "','" 
          + ServiceStatus  + "','" 
          + Owner_Name  + "','" 
          + Comments  + "','" 
          + Scope_UNID  + "','" 
          + epicUNID  + "','" 
          + sprintUNID  + "','" 
          + admin_id  + "')"
          }else{
            putTailoredWBSSB ="Update standard_activity_for_accounts SET STANDARD_ACTIVITY_NAME='"
            +STANDARD_ACTIVITY_NAME                    
            +"',MILESTONE_OR_TASK='"+MILESTONE_OR_TASK
            +"',PHASE_NAME='"+PHASE_NAME
            +"',STANDARD_ACTIVITY_LAST_UPDATED_BY='"+STANDARD_ACTIVITY_LAST_UPDATED_BY
            +"',STANDARD_ACTIVITY_LAST_UPDATED_AT='"+STANDARD_ACTIVITY_LAST_UPDATED_AT
            +"',CheckedValue='"+CheckedValue            
            +"' where STANDARD_ACTIVITY_ID='"+STANDARD_ACTIVITY_ID+"'"  
          }
          
          
          //console.log(putTailoredWBSSB)
          conn.query(putTailoredWBSSB).then((putTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"0":{"insert": "success"}});
  } else {
      res.send({"0":{"insert": "fail"}});
  }
})
app.get('/TailoredWBSSB/:phaseName/:IntegrationID',(req,res)=>{
  
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;
  // AccountTemplatecheck = "select * from standard_activity_for_accounts where IntegrationID ='"+IntegrationID+"' AND  PHASE_NAME ='"+phaseName+"'" ;

  TailoredWBSSB = "select "+
                      "STANDARD_ACTIVITY_ID,STANDARD_ACTIVITY_NAME, MILESTONE_OR_TASK,PHASE_NAME,"+
                      "STANDARD_ACTIVITY_CREATED_BY,STANDARD_ACTIVITY_LAST_UPDATED_BY,"+
                      "STANDARD_ACTIVITY_CREATED_AT,STANDARD_ACTIVITY_LAST_UPDATED_AT,"+
                      "null as IntegrationID, 1 as CheckedValue,STANDARD_ACTIVITY_ID as admin_id  "+
                      " from standard_activity where PHASE_NAME ='"+phaseName+"'";
  //console.log(TailoredWBSSB)
  pool.getConnection().then(conn=>{  
        conn.query(TailoredWBSSB).then((TailoredWBSSBResult)=>{
          res.send(TailoredWBSSBResult)
          conn.end();
        })        
  })
    .catch(err=>{
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
    .catch(err=>{
    //not connected
  })
})
//**************************************** */twbs end ****************************************


app.get('/',(req,res)=>{
  res.send({"0":{"save": "success"}});
  
})

//Service Backlog start


  app.get('/TailoredSBforAccount/:phaseName/:IntegrationID', (req, res) => {    
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;
  serviceBacklogQuery = "select * from standard_activity_for_accounts"+
  " where IntegrationID ='" + IntegrationID + "' AND  PHASE_NAME ='" + phaseName + "' AND CheckedValue='1'" ;
////console.log(serviceBacklogQuery)  
pool.getConnection().then(conn => {
          conn.query(serviceBacklogQuery).then((serviceBacklogRes) => {
            ////console.log(serviceBacklogRes)  
            res.send(serviceBacklogRes);

              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
})

app.put('/putTailoredSB', (req, res) => {
  ////console.log("put")
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID
          STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          PHASE_NAME = req.body[i].PHASE_NAME          
          var dt=moment(new Date());
          STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID;
          CheckedValue = req.body[i].CheckedValue;
          ServiceStatus = req.body[i].ServiceStatus;
          Owner_Name = req.body[i].Owner_Name;
          Comments = req.body[i].Comments;

          if(req.body[i].Plan_Start_Date == "undefined" || req.body[i].Plan_Start_Date == "" || req.body[i].Plan_Start_Date == null){            
            Plan_Start_Date='0000-00-00 00:00:00'          
          }else{
              var dt=moment(req.body[i].Plan_Start_Date);
              Plan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }
          if(req.body[i].Plan_End_Date == "undefined" || req.body[i].Plan_End_Date == "" || req.body[i].Plan_End_Date == null){
            Plan_End_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Plan_End_Date);
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }

          if(req.body[i].Replan_Start_Date == "undefined" || req.body[i].Replan_Start_Date == "" || req.body[i].Replan_Start_Date == null){
            Replan_Start_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Replan_Start_Date);
              Replan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].RePlan_End_Date == "undefined" || req.body[i].RePlan_End_Date == "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].Actual_Start_Date == "undefined" || req.body[i].Actual_Start_Date == "" || req.body[i].Actual_Start_Date == null){
            Actual_Start_Date='0000-00-00 00:00:00'
          }else{
                    var dt=moment(req.body[i].Actual_Start_Date);
                    Actual_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");       
          }

          if(req.body[i].Actual_End_Date == "undefined" || req.body[i].Actual_End_Date == "" || req.body[i].Actual_End_Date == null){
            Actual_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].Actual_End_Date);
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");

          }

          putTailoredWBSSB ="Update standard_activity_for_accounts SET STANDARD_ACTIVITY_LAST_UPDATED_BY='"
          +STANDARD_ACTIVITY_LAST_UPDATED_BY                              
          +"',STANDARD_ACTIVITY_LAST_UPDATED_AT='"+STANDARD_ACTIVITY_LAST_UPDATED_AT
          +"',CheckedValue='"+CheckedValue
          +"',Plan_Start_Date='"+Plan_Start_Date
          +"',Plan_End_Date='"+Plan_End_Date
          +"',Replan_Start_Date='"+Replan_Start_Date
          +"',RePlan_End_Date='"+RePlan_End_Date
          +"',Actual_Start_Date='"+Actual_Start_Date
          +"',Actual_End_Date='"+Actual_End_Date          
          +"',ServiceStatus='"+ServiceStatus  
          +"',Owner_Name='"+Owner_Name
          +"',Comments='"+Comments
          +"' where STANDARD_ACTIVITY_ID='"+STANDARD_ACTIVITY_ID+"'"

          ////console.log(putTailoredWBSSB)
          conn.query(putTailoredWBSSB).then((putTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"0":{"insert": "success"}});
  } else {
      res.send({"0":{"insert": "fail"}});
  }
})

app.put('/putTailoredSBBaseline', (req, res) => {
    var endres = true
    var len = req.body.length
    pool.getConnection().then(conn => {
        for (var i in req.body) {
            STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID;
            putTailoredSBBaselineQuery =
                "Update standard_activity_for_accounts SET Baselined=1 where STANDARD_ACTIVITY_ID='" + STANDARD_ACTIVITY_ID + "'"
            conn.query(putTailoredSBBaselineQuery).then((putTailoredSBBaselineQueryresult) => {
                    conn.end();
                })
                .catch(err => {
                    endres = false;
                    //handle error
                    // res.send({"save" : "Fail" })
                    conn.end();
                })
        }
    }).catch(err => {
        //not connected
    });

    if (endres === true) {
        res.send({
            "0": {
                "insert": "success"
            }
        });
    } else {
        res.send({
            "0": {
                "insert": "fail"
            }
        });
    }
})



app.get('/getSprintstatus',(req,res)=>{
  getSprintstatusQuery = "select FieldCategoryName,Categoryvalues from adminprofile where FieldCategoryName ='SprintStatus' ORDER BY Categoryvalues ASC";
  pool.getConnection().then(conn=>{
    conn.query(getSprintstatusQuery).then((getSprintstatusQueryResult)=>{
        res.send(getSprintstatusQueryResult)
        conn.end();
    })
  }).catch(err=>{
    res.send({"Fetch": "Fail"})
    conn.end();
  })
  .catch(err=>{
     //Not connected
  })
})

//Service Backlog End

//Sprint backlog start

app.put('/putTailoredSpBBaseline', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID;
          putTailoredSBBaselineQuery =
              "Update standard_activity_for_accounts SET Baselined=1 where STANDARD_ACTIVITY_ID='" + STANDARD_ACTIVITY_ID + "'"
          conn.query(putTailoredSBBaselineQuery).then((putTailoredSBBaselineQueryresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({
          "0": {
              "insert": "success"
          }
      });
  } else {
      res.send({
          "0": {
              "insert": "fail"
          }
      });
  }
})


app.put('/putTailoredSpB', (req, res) => {
  ////console.log("put")
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID
          STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          PHASE_NAME = req.body[i].PHASE_NAME          
          var dt=moment(new Date());
          STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID;
          CheckedValue = req.body[i].CheckedValue;
          ServiceStatus = req.body[i].ServiceStatus;
          Owner_Name = req.body[i].Owner_Name;
          Comments = req.body[i].Comments;

          if(req.body[i].Plan_Start_Date == "undefined" || req.body[i].Plan_Start_Date == "" || req.body[i].Plan_Start_Date == null){            
            Plan_Start_Date='0000-00-00 00:00:00'          
          }else{
              var dt=moment(req.body[i].Plan_Start_Date);
              Plan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }
          if(req.body[i].Plan_End_Date == "undefined" || req.body[i].Plan_End_Date == "" || req.body[i].Plan_End_Date == null){
            Plan_End_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Plan_End_Date);
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }

          if(req.body[i].Replan_Start_Date == "undefined" || req.body[i].Replan_Start_Date == "" || req.body[i].Replan_Start_Date == null){
            Replan_Start_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Replan_Start_Date);
              Replan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].RePlan_End_Date == "undefined" || req.body[i].RePlan_End_Date == "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].Actual_Start_Date == "undefined" || req.body[i].Actual_Start_Date == "" || req.body[i].Actual_Start_Date == null){
            Actual_Start_Date='0000-00-00 00:00:00'
          }else{
                    var dt=moment(req.body[i].Actual_Start_Date);
                    Actual_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");       
          }

          if(req.body[i].Actual_End_Date == "undefined" || req.body[i].Actual_End_Date == "" || req.body[i].Actual_End_Date == null){
            Actual_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].Actual_End_Date);
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");

          }

          putTailoredWBSSB ="Update standard_activity_for_accounts SET STANDARD_ACTIVITY_LAST_UPDATED_BY='"
          +STANDARD_ACTIVITY_LAST_UPDATED_BY                              
          +"',STANDARD_ACTIVITY_LAST_UPDATED_AT='"+STANDARD_ACTIVITY_LAST_UPDATED_AT
          +"',CheckedValue='"+CheckedValue
          +"',Plan_Start_Date='"+Plan_Start_Date
          +"',Plan_End_Date='"+Plan_End_Date
          +"',Replan_Start_Date='"+Replan_Start_Date
          +"',RePlan_End_Date='"+RePlan_End_Date
          +"',Actual_Start_Date='"+Actual_Start_Date
          +"',Actual_End_Date='"+Actual_End_Date          
          +"',ServiceStatus='"+ServiceStatus  
          +"',Owner_Name='"+Owner_Name
          +"',Comments='"+Comments
          +"' where STANDARD_ACTIVITY_ID='"+STANDARD_ACTIVITY_ID+"'"

          ////console.log(putTailoredWBSSB)
          conn.query(putTailoredWBSSB).then((putTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"0":{"insert": "success"}});
  } else {
      res.send({"0":{"insert": "fail"}});
  }
})


//Sprint backlog end



//=========================Sprint Scope Start===========================
// Getting Sprint Scope - App ID profiles
app.get("/scopedApplication/:epic/:sprint/:IntegrationID",(req,res)=>{
  var epic = req.params.epic;
  var sprint = req.params.sprint;
  var IntegrationID = req.params.IntegrationID;
  scopedApplicationquery = "select AppUNID from sprintscope where epicUNID='"+epic+"'  and sprintUNID ='"+ sprint+"' and Scope_IntegrationID ='"+ IntegrationID +"'";
  pool.getConnection().then(conn=>{
    //console.log(scopedApplicationquery)
    conn.query(scopedApplicationquery).then((scopedApplicationqueryResult) => {
      res.send(scopedApplicationqueryResult)
      conn.end();
    })
    .catch(err => {
      //handle error
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
}).catch(err => {
  //not connected
  })
})
app.get("/ScopeAppIDResult/:Id",(req,res)=>{
  
    var id = req.params.Id; 
  
      queryScopeAppIDResult = "select AppUNID,AppId,AppName from application_information WHERE IntegrationID='"+id+"'"
  
      pool.getConnection().then(conn => {        
            conn.query(queryScopeAppIDResult).then((queryScopeAppIDResultKeyword) => {
  
                res.send(queryScopeAppIDResultKeyword)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
  
          }).catch(err => {
            //not connected
          });
  });
  
  app.get('/getSprintApplication/:Scope_IntegrationID/:Id',(req,res)=>{
    var id = req.params.Id;
    var Scope_IntegrationID = req.params.Scope_IntegrationID;
    querySprintApplication ="select ai.AppName,ai.AppUNID from sprintscope as sc "+
    " join application_information as ai where ai.AppUNID = sc.AppUNID and sc.sprintUNID = '"+id+
    "' and Scope_IntegrationID='" +Scope_IntegrationID +"'"
    //console.log(querySprintApplication)   
    pool.getConnection().then(conn => {        
          conn.query(querySprintApplication).then((epicResult) => {              
              res.send(epicResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })            
        }).catch(err => {
          //not connected
        });
  });

  app.get('/getSprintSTScope/:Scope_IntegrationID/:Id',(req,res)=>{
    var id = req.params.Id;
    var Scope_IntegrationID = req.params.Scope_IntegrationID;
    querySprintApplication ="select st.MasterSTInfoid,st.STScopeLevel,st.STScope,st.STDetailedScope,st.STScopeActivity "+
    "from sprintscope as sc "+
    "join masterstinfo as st where st.MasterSTInfoid = sc.STUNID and sc.sprintUNID = '"+id+
    "' and Scope_IntegrationID='" +Scope_IntegrationID +"'"
    //console.log(querySprintApplication)   
    pool.getConnection().then(conn => {        
          conn.query(querySprintApplication).then((epicResult) => {              
              res.send(epicResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })            
        }).catch(err => {
          //not connected
        });
  });

  app.get("/ScopeSTInfoResult/:Id",(req,res)=>{

    var id = req.params.Id; 
  
    queryScopeSTInfoResult = "select * from masterstinfo WHERE IntegrationID='"+id+"'"
  
    pool.getConnection().then(conn => {        
          conn.query(queryScopeSTInfoResult).then((queryScopeSTInfoResultKeyword) => {
                res.send(queryScopeSTInfoResultKeyword)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
  
          }).catch(err => {
            //not connected
          });
  });


  // Getting Sprint Scope - Epic Name profiles
  app.get("/scopedApplication/:epic/:sprint/:IntegrationID",(req,res)=>{
    var epic = req.params.epic;
    var sprint = req.params.sprint;
    var IntegrationID = req.params.IntegrationID;
    scopedApplicationquery = "select AppUNID from sprintscope where epicUNID='"+epic+"'  and sprintUNID ='"+ sprint+"' and Scope_IntegrationID ='"+ IntegrationID +"'";
    pool.getConnection().then(conn=>{
      //console.log(scopedApplicationquery)
      conn.query(scopedApplicationquery).then((scopedApplicationqueryResult) => {
        res.send(scopedApplicationqueryResult)
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"Fetch" : "Fail" })
        conn.end();
      })
  }).catch(err => {
    //not connected
    })
  })
  app.get("/ScopeEpicNameResult/:Id",(req,res)=>{
  
      var id = req.params.Id; 
      queryScopeEpicNameResult = "select distinct(Scope_EpicID), Scope_IntegrationID from sprintscope WHERE Scope_IntegrationID='"+id+"'"
  
      pool.getConnection().then(conn => {        
            conn.query(queryScopeEpicNameResult).then((queryScopeEpicNameResultKeyword) => {
                res.send(queryScopeEpicNameResultKeyword)
                conn.end();
              })
              .catch(err => {
                //handle error
                res.send({"Fetch" : "Fail" })
                conn.end();
              })
          }).catch(err => {
            //not connected
          });
  });
  
    // Getting Sprint Scope - data based on Integration ID
    app.get("/SprintScopeDataResult/:Id",(req,res)=>{

      var id = req.params.Id; 
  
        querySprintScopeDataResult = 
  "SELECT sc.Scope_UNID,sc.Scope_IntegrationID,sc.Scope_Level,sc.epicUNID,ep.epicName,sc.sprintUNID,st.MasterSTInfoid, "+
  "sp.sprintName,sc.AppUNID,sc.AppUNID as duplicateAPPUNID,ai.AppId,ai.AppName,"+
  "sc.Scope_MVS_Description,sc.STUNID,"+
  "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity) AS STScopeData,"+ 
  "sc.Scope_BacklogActivity "+
  "FROM sprintscope sc "+
  "LEFT OUTER JOIN epics ep ON sc.epicUNID=ep.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sc.sprintUNID=sp.sprintUNID "+
  "LEFT OUTER JOIN application_information ai on sc.AppUNID=ai.AppUNID "+
  "LEFT OUTER JOIN masterstinfo st on sc.STUNID=st.MasterSTInfoid "+
  "WHERE sc.Scope_IntegrationID='"+id+"'"
  
        pool.getConnection().then(conn => {        
              conn.query(querySprintScopeDataResult).then((querySprintScopeDataKeyword) => {
  
                  res.send(querySprintScopeDataKeyword)
                  conn.end();
                })
                .catch(err => {
                  //handle error
                  res.send({"Fetch" : "Fail" })
                  conn.end();
                })
  
            }).catch(err => {
              //not connected
            });
    });
  
  // Getting  Duplicate Contract deliverables check
  app.get("/ScopeSprintNamesResult",(req,res)=>{
  
    var Scope_IntegrationID=req.query.Scope_IntegrationID;
    var Scope_EpicID = req.query.Scope_EpicID;  
    var querySprintNamesResult="select * from sprintscope WHERE (Scope_IntegrationID='"+Scope_IntegrationID+"' AND Scope_EpicID='"+Scope_EpicID+"')";
  
    pool.getConnection().then(conn => {        
          conn.query(querySprintNamesResult).then((querySprintNamesResult) => {
              res.send(querySprintNamesResult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });   
    });  
  
    //Sprint Scope Save

    app.get("/duplicateSprintScope",(req,res)=>{     
      var DPresutls ="";
      var Delivval=req.query.Scope_NameOfApp;
      var IntegrationID = req.query.IntegrationID;
      var epicUNID = req.query.epicUNID
      var sprintUNID = req.query.sprintUNID
      var Scope_Level = req.query.Scope_Level
      var Scope_STInfoLevel = req.query.Scope_STInfoLevelAdd
      var SBckLog=req.query.Scope_BackLog
      var Scope_BackLog=SBckLog.replace(/'/g, "\\'");
      var arr = Delivval.toString().split(",");
      var arrST = Scope_STInfoLevel.toString().split(",");
      var queryDuplicateCDResult ='';
 
      if ( Scope_Level === 'AT'){

        queryDuplicateCDResult="select count(*) as cnt from sprintscope WHERE ("
        for(let i in arr){
            if(arr.length-i === 1){
              queryDuplicateCDResult = queryDuplicateCDResult+"AppUNID='"+arr[i]+"') AND ";
            }else{
              queryDuplicateCDResult = queryDuplicateCDResult+"AppUNID='"+arr[i]+"' OR ";
            }        
        }         
        queryDuplicateCDResult = queryDuplicateCDResult+"Scope_IntegrationID='"+IntegrationID+"' and epicUNID='"+epicUNID+"' and sprintUNID='"+sprintUNID+"'";

      }else if(Scope_Level === 'ST'){   
        
        queryDuplicateCDResult="select count(*) as cnt from sprintscope WHERE ("
        for(let i in arrST){
            if(arrST.length-i === 1){
              queryDuplicateCDResult = queryDuplicateCDResult+"STUNID='"+arrST[i]+"') AND ";
            }else{
              queryDuplicateCDResult = queryDuplicateCDResult+"STUNID='"+arrST[i]+"' OR ";
            }        
        }  
        queryDuplicateCDResult = queryDuplicateCDResult+"Scope_IntegrationID='"+IntegrationID+"' and epicUNID='"+epicUNID+"' and sprintUNID='"+sprintUNID+"'"; 
        
      //   queryDuplicateCDResult= "select count(*) as cnt from sprintscope where Scope_IntegrationID ='"+IntegrationID +
      //  "' and epicUNID='"+epicUNID+"' and sprintUNID ='"+sprintUNID+"' and STUNID="+Scope_STInfoLevel +"";  

      }else if(Scope_Level === 'Others'){

        queryDuplicateCDResult= "select count(*) as cnt from sprintscope where Scope_IntegrationID ='"+IntegrationID +
       "' and epicUNID='"+epicUNID+"' and sprintUNID ='"+sprintUNID+"' and Scope_BacklogActivity='"+Scope_BackLog +"'";
      }              
   
    pool.getConnection().then(conn => {        
          conn.query(queryDuplicateCDResult).then((CDDuplikeywordResult) => {   
            //console.log(CDDuplikeywordResult[0].cnt)                     
              res.send({"Result":CDDuplikeywordResult[0].cnt})
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
});  

app.post('/AddSprintScope',(req,res)=>{
    
      var SSendres = true;
      var Scope_IntegrationID=req.body.Scope_IntegrationID
     var epicUNID=req.body.Scope_EpicID
     var sprintUNID = req.body.Scope_SprintName
     var Scope_MVS_Description = req.body.Scope_MVS_Description
     var Scope_STInfoLevel = req.body.Scope_STInfoLevelAdd
     var SBckLog=req.body.Scope_BackLog
     var Scope_BackLog=SBckLog.replace(/'/g, "\\'");
     var Scope_Level = req.body.Scope_Level
     var Scope_CreatedBy=req.body.Scope_CreatedBy
     var Scope_ModifiedBy = req.body.Scope_ModifiedBy
     var dt=moment(new Date());
     var Scope_CreatedAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
     var dt=moment(new Date());
     var Scope_ModifiedAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
     var insertFlag = 0;
      pool.getConnection().then(conn => {  
        if (Scope_Level === "AT"){
          for(var i in req.body.Scope_NameOfApp){  
            var AppUNID=req.body.Scope_NameOfApp[i];
           queryAddSprintScope ="insert into sprintscope values ("+null
            + ",'"+ Scope_IntegrationID 
           + "','"+ Scope_MVS_Description   
            +"','"+Scope_CreatedBy
            +"','"+Scope_CreatedAT
            +"','"+Scope_ModifiedBy
            +"','"+Scope_ModifiedAT     
            +"','"+sprintUNID
            +"','"+AppUNID
            +"','"+epicUNID
            +"','"+insertFlag
            +"','"+Scope_Level
            +"',"+null
            +",'"+Scope_BackLog+"')";
            
              conn.query(queryAddSprintScope).then((queryAddSprintScopeKeyword) => {
              conn.end();
              // res.send({"save" : "Success"} )
            })
            .catch(err => {
            //handle error
            // res.send({"insert" : "Fail" })
            SSendres = false;  
            conn.end();
            })
           }  
        }else if (Scope_Level === "ST"){
          for(var i in req.body.Scope_STInfoLevelAdd){  
            var STUNID=req.body.Scope_STInfoLevelAdd[i];
           queryAddSprintScope ="insert into sprintscope values ("+null
            + ",'"+ Scope_IntegrationID 
           + "','"+ Scope_MVS_Description   
            +"','"+Scope_CreatedBy
            +"','"+Scope_CreatedAT
            +"','"+Scope_ModifiedBy
            +"','"+Scope_ModifiedAT     
            +"','"+sprintUNID
            +"',"+null
            +",'"+epicUNID
            +"','"+insertFlag
            +"','"+Scope_Level
            +"',"+STUNID
            +",'"+Scope_BackLog+"')";
            
              conn.query(queryAddSprintScope).then((queryAddSprintScopeKeyword) => {
              conn.end();
              // res.send({"save" : "Success"} )
            })
            .catch(err => {
            //handle error
            // res.send({"insert" : "Fail" })
            SSendres = false;  
            conn.end();
            })
           } 
        }else{
      
          querySTSprintScope ="insert into sprintscope values ("+null
           + ",'"+ Scope_IntegrationID 
           + "','"+ Scope_MVS_Description   
            +"','"+Scope_CreatedBy
            +"','"+Scope_CreatedAT
            +"','"+Scope_ModifiedBy
            +"','"+Scope_ModifiedAT     
            +"','"+sprintUNID
            +"',"+null
            +",'"+epicUNID
            +"','"+insertFlag
            +"','"+Scope_Level
            +"',"+null
            +",'"+Scope_BackLog+"')";

              conn.query(querySTSprintScope).then((querySTSprintScopeKeyword) => {
              conn.end();
              // res.send({"save" : "Success"} )
            })
            .catch(err => {
            //handle error
            // res.send({"insert" : "Fail" })
            SSendres = false;  
            conn.end();
            })
        }  
      }); 
      if(SSendres === true){
        res.send({"insert":"success"}); 
       }else{
        res.send({"insert":"fail"}); 
       }  
});

    // Update Sprint Scope
app.put("/UpdateSprintScope",function(req,res){ 
      
      var Scope_UNID=req.body.Scope_UNID 
      var Scope_IntegrationID=req.body.Scope_IntegrationID
      var epicUNID=req.body.Scope_EpicID
      var AppUNID=req.body.Scope_NameOfApp1      
      var sprintUNID = req.body.Scope_SprintName
      var Scope_MVS_Description = req.body.Scope_MVS_Description
      var Scope_ModifiedBy = req.body.Scope_ModifiedBy
      var dt=moment(new Date());     
      var Scope_ModifiedAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
      var Scope_STInfoLevel=req.body.Scope_STInfoLevelMod;
      var SBckLog=req.body.Scope_BackLog
     var Scope_BackLog=SBckLog.replace(/'/g, "\\'");
      var Scope_Level = req.body.Scope_Level;
      var queryduplicatecheckSS='';
    
      if ( Scope_Level === 'AT'){
        queryduplicatecheckSS= "select count(*) as cnt from sprintscope where "+
        "Scope_IntegrationID ='"+Scope_IntegrationID+"' and epicUNID='"+epicUNID+"' "+
        "and sprintUNID ='"+sprintUNID+"' and AppUNID="+AppUNID +"";  

        queryUpdateSprintScope ="Update sprintscope SET Scope_ModifiedBy='"+Scope_ModifiedBy
      +"',Scope_ModifiedAT='"+Scope_ModifiedAT
      +"',epicUNID='"+epicUNID
      +"',AppUNID ='"+AppUNID
      +"',sprintUNID='"+sprintUNID
      +"',Scope_MVS_Description='"+Scope_MVS_Description
      +"',Scope_Level='"+Scope_Level
      +"' where Scope_UNID='"+Scope_UNID+"'"
      
      }else if(Scope_Level === 'ST'){      
       queryduplicatecheckSS= "select count(*) as cnt from sprintscope where "+
       "Scope_IntegrationID ='"+Scope_IntegrationID+"' and epicUNID='"+epicUNID+"' "+
       "and sprintUNID ='"+sprintUNID+"' and STUNID="+Scope_STInfoLevel +"";  

       queryUpdateSprintScope ="Update sprintscope SET Scope_ModifiedBy='"+Scope_ModifiedBy
      +"',Scope_ModifiedAT='"+Scope_ModifiedAT
      +"',epicUNID='"+epicUNID
      +"',sprintUNID='"+sprintUNID
      +"',Scope_Level='"+Scope_Level
      +"',STUNID='"+Scope_STInfoLevel
      +"' where Scope_UNID='"+Scope_UNID+"'"

      }else if(Scope_Level === 'Others'){

        queryduplicatecheckSS= "select count(*) as cnt from sprintscope where "+
        "Scope_IntegrationID ='"+Scope_IntegrationID+"' and epicUNID='"+epicUNID+"' "+
        "and sprintUNID ='"+sprintUNID+"' and Scope_BacklogActivity='"+Scope_BackLog +"'";

       queryUpdateSprintScope ="Update sprintscope SET Scope_ModifiedBy='"+Scope_ModifiedBy
      +"',Scope_ModifiedAT='"+Scope_ModifiedAT
      +"',epicUNID='"+epicUNID
      +"',sprintUNID='"+sprintUNID
      +"',Scope_Level='"+Scope_Level
      +"',Scope_BacklogActivity='"+Scope_BackLog
      +"' where Scope_UNID='"+Scope_UNID+"'"
      }

   pool.getConnection().then(conn => {    
      conn.query(queryduplicatecheckSS).then((queryduplicatecheckSSResult) => { 
        
        if ( Scope_Level === 'AT'){

          var result;    
          result =0;
          if(AppUNID !== req.body.duplicateAPPUNID){
            result = 1
          }else{
            result =0;
          }

          result =result + queryduplicatecheckSSResult[0].cnt; 
      
            if(result <= 1){
                  conn.query(queryUpdateSprintScope).then((queryUpdateSprintScopeKeyword) => {
                  res.send({"save" : "success"} )       
                  conn.end();
            })
            .catch(err => {
                //handle error
                res.send({"save" : "Fail" })
                conn.end();
            })
          }else{
            //console.log("dup")
            res.send({"duplicate" : "success"} )
            conn.end();
          }
         
        }else if ( Scope_Level === 'ST'){
           if(queryduplicatecheckSSResult[0].cnt < 1){
            //console.log("inside")
                 conn.query(queryUpdateSprintScope).then((queryUpdateSprintScopeKeyword) => {
                 res.send({"save" : "success"} )       
                 conn.end();
           })
              .catch(err => {
               //handle error
               res.send({"save" : "Fail" })
               conn.end();
              })
           }else{
             res.send({"duplicate" : "success"} )
             conn.end();
           } 
        }else if ( Scope_Level === 'Others'){
          if(queryduplicatecheckSSResult[0].cnt === 0){
            //console.log("inside")
                 conn.query(queryUpdateSprintScope).then((queryUpdateSprintScopeKeyword) => {
                 res.send({"save" : "success"} )       
                 conn.end();
           })
              .catch(err => {
               //handle error
               res.send({"save" : "Fail" })
               conn.end();
              })
           }else{
             res.send({"duplicate" : "success"} )
             conn.end();
           } 
        }  

       
      })
      .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
});    
  
  // Delete Sprint Scope
  // app.delete('/DeleteSprintScope/:Scope_UNID',(req,res)=>{  
  
  //   var Scope_UNID = req.params.Scope_UNID;    
  //   queryDeleteSprintScope = "DELETE FROM sprintscope WHERE (Scope_UNID ='" + Scope_UNID+"')"
  
  //   pool.getConnection().then(conn => {        
  //       conn.query(queryDeleteSprintScope).then((queryDeleteSprintScopeKeyword) => {        
  //           res.send({"Delete" : "success"} )
  //           conn.end();
  //         })
  //         .catch(err => {
  //           //handle error
  //           console.log(err)
  //           res.send({"Delete" : "Fail" })
  //           conn.end();
  //         })        
  //     }).catch(err => {
  //       //not connected
  //     });  
  // }); 

  // function duplicateSSCheck(Table ,Result,Trainee_SNO ,param,deletionUNID) {
  //   queryreadinessget = "select distinct "
  //   for( let i=0; i<  Table.length; i++){
  //     if(i === 0){
  //           queryreadinessget = queryreadinessget + 
  //           "(select count(*) from readiness_question_tracker rqt" +
  //           "   LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID"+
  //           "   LEFT OUTER JOIN sprintscope ss ON rqt.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE=ss."+param +
  //           "   where READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE LIKE '%"+ deletionUNID +"%' and pc.RESOURCE_TYPE_MEASURED='application')'count0'"
  //           // console.log(queryreadinessget)
  //     }else{
  //       queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%')'count"+ i+"'" 
  //     }
      
  //     if (i !==Table.length-1) {
  //       queryreadinessget= queryreadinessget + ","
  //     }   
  //   }
    
  //   pool.getConnection().then(conn => {
  //     // console.log(queryreadinessget)
  //     conn.query(queryreadinessget).then((TraineeDelRes) => {
  //         for( let i=0; i< Table.length; i++){
  //           if (TraineeDelRes[0]['count'+i] !== 0) {
  //             console.log(Table[i].UITable)
  //             Result.push(Table[i].UITable)
  //           }
  //         }
  //         conn.end();
  //     }).catch(err=>{
  //       //handle error
  //       //res.send({"Fetch" : "Fail" })
  //       conn.end();
  //     })
  //   }).catch(err => {
  //     //not connected
  //   });  
  // }
   function duplicateSSCheck(Table ,Result,Trainee_SNO ,param,deletionUNID,Scope_Level,ScopeType) {
    queryreadinessget = "select distinct "
    for( let i=0; i<  Table.length; i++){
      if((i === 0)  ){
        // console.log(Scope_Level)
        if( (Scope_Level === 'AT' || Scope_Level === 'ST')){
          queryreadinessget = queryreadinessget + 
          "(select count(*) from readiness_question_tracker rqt" +
          "   LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID"+
          "   LEFT OUTER JOIN sprintscope ss ON rqt.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE=ss."+param +
          "   where READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE LIKE '%"+ deletionUNID +"%' and pc.RESOURCE_TYPE_MEASURED like'"+ScopeType+"%')'count0'"
          console.log(queryreadinessget)
        }
           
      }else{
        queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%')'count"+ i+"'" 
      }
      // &&  (Scope_Level === 'Others' && i !== 0)
      if (i !==Table.length-1   ) {
        if(Scope_Level === 'Others' ){
          
        }else{
          queryreadinessget= queryreadinessget + ","
        }
        
      }   
    }
    
    pool.getConnection().then(conn => {
      console.log(queryreadinessget)
      conn.query(queryreadinessget).then((TraineeDelRes) => {
          for( let i=0; i< Table.length; i++){
            //&&  (Scope_Level === 'Others' && i !== 0) 
            if (TraineeDelRes[0]['count'+i] !== 0  ) {
              console.log(Table[i].UITable)
              Result.push(Table[i].UITable)
            }
          }
          conn.end();
      }).catch(err=>{
        //handle error
        //res.send({"Fetch" : "Fail" })
        conn.end();
      })
    }).catch(err => {
      //not connected
    });  
  }
  


  app.delete('/DeleteSprintScope/:Scope_UNID/:Scope_Level/:deletionUNID',(req,res)=>{  
  
    var  param = '';
    var ScopeType ='';
    var Scope_UNID = req.params.Scope_UNID; 
    var Scope_Level = req.params.Scope_Level;
    var deletionUNID = req.params.deletionUNID;
    
    if(Scope_Level === 'AT'){
        param = 'AppUNID';
        ScopeType = 'application'
    }else if(Scope_Level === 'ST'){
      param = 'STUNID';
      ScopeType ='ST'
    }
    else if(Scope_Level === 'Others'){
      param = 'Scope_UNID';
    }
    
    const Table = [
  {
      "TableName": "readiness_question_tracker",
      "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
      "UITable": "* Manage Sprint >> Health & Readiness Tracking"     
  }
,
  {
      "TableName": "raid",
      "CoulmnName": "Scope_UNID",
      "UITable": "* Manage Sprint >> RAID"
  }
,
{
      "TableName": "appln_level_sprint_plan",
      "CoulmnName": "Scope_UNID",
      "UITable": "* Transition Plan >> Sprint Execution Plan >> Scope Level Tracking"
  }
];
 

const Result = ['Sprint Scope can not be deleted as it is mapped to below functionalities:',
''
];
// duplicateSSCheck(Table, Result, Scope_UNID)
setTimeout(() => {
  // deleteCheck(Table, Result, Scope_UNID,'trainee')
    // var Scope_UNID = req.params.Scope_UNID; 
    duplicateSSCheck(Table, Result,Scope_UNID, param,deletionUNID,Scope_Level,ScopeType)
},1000)
setTimeout(() => {
  console.log(Result)
  console.log(Result.length)
if (Result.length === 2) {
  // console.log("delete")
    pool.getConnection().then(conn => {
        queryappInfoDelete = "DELETE FROM sprintscope WHERE (Scope_UNID ='" + Scope_UNID+"')" ;
// console.log(queryappInfoDelete)
        conn.query(queryappInfoDelete).then((stakeholderDeletedata) => {

                res.send({
                    "Delete": "success"
                })
                conn.end();
            })
            .catch(err => {
                //handle error
                console.log(err)
                res.send({
                    "Delete": "Fail"
                })
                conn.end();
            })

    }).catch(err => {
        //not connected
    });
} else {
    res.send({
        "Delete": Result
    })
}
}, 2000);


   
  });  
  //=========================Sprint Scope Start===========================

  // Code to fetch Key Risks information
app.get('/fetchKeyRisks/:Id',(req,res)=>{ 
  
    var id = req.params.Id;
    //console.log('fetchKeyRisks from isha ='+id);
  
    querytofetchrisk = "select IntegrationID,RaidID,Description,Type,Status,Owner,TargetDate,DateRaised,Priority from raid where IntegrationID ='"+id+"' and Type = 'Risk' and Status = 'open' order by TargetDate" ; 
    //console.log('query from risk='+querytofetchrisk);
    pool.getConnection().then(conn => {        
          conn.query(querytofetchrisk).then((riskresult) => {            
              res.send(riskresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Code to fetch Issue information
  app.get('/fetchIssue/:Id',(req,res)=>{ 
  
    var id = req.params.Id;
    //console.log('fetchIssue from isha ='+id);
  
    querytofetchissue = "select IntegrationID,RaidID,Description,Type,Status,Owner,TargetDate,DateRaised,Priority from raid where IntegrationID ='"+id+"' and Type = 'Issue' and Status = 'open' order by TargetDate" ; 
    //console.log('query from risk='+querytofetchissue);
    pool.getConnection().then(conn => {        
          conn.query(querytofetchissue).then((issueresult) => {            
              res.send(issueresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
  // Code to fetch Dependency information
  app.get('/fetchDependency/:Id',(req,res)=>{
    var id = req.params.Id;
    //console.log('fetchDependency from isha ='+id);
  
    querytofetchdependency = "select IntegrationID,RaidID,Description,Type,Status,Owner,TargetDate,DateRaised,Priority from raid where IntegrationID ='"+id+"' and Type = 'dependency' and Status = 'open' order by TargetDate" ; 
    //console.log('query from dependency='+querytofetchdependency);
    pool.getConnection().then(conn => {        
          conn.query(querytofetchdependency).then((dependencyresult) => {            
              res.send(dependencyresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })          
        }).catch(err => {
          //not connected
        });
  });
  
//RAID Code


app.get('/raidData/:id',(req,res)=>{
  var id = req.params.id;    
    // queryRaidData = "select r.RaidID,e.epicName,s.sprintName,a.AppName,r.EpicUNID,r.sprintUNID,r.AppUNID,r.Type,r.Description,r.Status,r.TargetDate,r.Owner,r.Priority "+
    // "from Raid r LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID "+
    // "LEFT JOIN application_information a on r.AppUNID = a.AppUNID where r.IntegrationID='"+id+"'"

    queryRaidData = "select r.RaidID,AppName,r.EpicUNID,e.epicName,s.sprintName,r.sprintUNID,r.AppUNID,r.Type,r.Description,r.Status,r.TargetDate,r.ScopeLevel,r.Owner,r.Priority from "+ 
    "((select RaidID,EpicUNID,sprintUNID,a.AppUNID as AppUNID,AppName as AppName ,MasterSTInfoid,scopeOverall,raid.ScopeLevel,Type,Description,Status,TargetDate,Owner,Priority from Raid raid " +
    "LEFT JOIN application_information a on raid.AppUNID = a.AppUNID where raid.ScopeLevel = 'AT' and raid.IntegrationID='"+id+"')"+ 
    "union"+
    "(select RaidID,EpicUNID,sprintUNID,raid.MasterSTInfoid as AppUNID,CONCAT(minfo.STScopeLevel, '-', minfo.STScope, '-',minfo.STDetailedScope,'_',minfo.STScopeActivity) as AppName,raid.MasterSTInfoid,scopeOverall,raid.ScopeLevel," +
    "Type,Description,Status,TargetDate,Owner,Priority from Raid raid "+
    "LEFT JOIN masterstinfo minfo on raid.MasterSTInfoid = minfo.MasterSTInfoid where raid.ScopeLevel = 'ST' and raid.IntegrationID='"+id+"')"+ 
    "union"+
    "(select RaidID,raid.EpicUNID,raid.sprintUNID,raid.scopeOverall as AppUNID,sc.Scope_BacklogActivity as AppName,raid.MasterSTInfoid,scopeOverall,raid.ScopeLevel,"+
    "Type,Description,Status,TargetDate,Owner,Priority from Raid raid "+
    "LEFT JOIN sprintscope sc on raid.scopeOverall = sc.Scope_UNID where raid.ScopeLevel = 'Others'  and raid.IntegrationID='"+id+"')"+
    "union"+
    "(select RaidID,raid.EpicUNID,raid.sprintUNID,raid.scopeOverall as AppUNID,null as AppName,raid.MasterSTInfoid,scopeOverall,raid.ScopeLevel ,"+
    "Type,Description,Status,TargetDate,Owner,Priority from Raid raid where ( isnull( raid.ScopeLevel ) or raid.ScopeLevel ='') and raid.IntegrationID='"+id+"')) r "+
    "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
    "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID "

    console.log("RAID screen-------"+queryRaidData)
    pool.getConnection().then(conn => {        
          conn.query(queryRaidData).then((raidData) => {
              
              res.send(raidData)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
  });

  //Deleting RAID Data
app.delete('/DeleteRaid/:RaidId',(req,res)=>{    

  var RaidId = req.params.RaidId;     
queryRAIDDelete = "DELETE FROM raid WHERE (RaidID ='"+RaidId+"')"   
pool.getConnection().then(conn => {        
  conn.query(queryRAIDDelete).then((queryRAIDDeletedata) => {     
      res.send({"Delete" : "Success"} )
      conn.end();
    })
    .catch(err => {
      //handle error
      res.send({"Delete" : "Fail" })
      conn.end();
    })    
}).catch(err => {
  //not connected
});
  
});

app.get("/raidSelect/:RaidID",function(req,res){
  //console.log("In select query")
  var RaidID = req.params.RaidID;
  // var epic = req.body.Epic;
  // var sprint = req.body.Sprint;
  // var appID = req.body.AppID;
  // var type = req.body.Type;
  // var id = req.body.IntegrationID;
  
  query = "select * from raid where RaidID='"+RaidID+"';"
  //query = "select * from raid where EpicUNID ='"+epic+"' and SprintUNID= '"+sprint+"' and AppUNID= '"+appID+"' and Type= '"+type+"' and IntegrationID='"+id+"'"; 
   //console.log(query) 
    pool.getConnection().then(conn => {        
          conn.query(query).then((raidresult) => {
              
              res.send(raidresult)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
  })


app.post("/raidGetNames",function(req,res){
  //console.log("In select query")
  var epic = req.body.Epic;
  var sprint = req.body.Sprint;
  var appID = req.body.AppID;
  var type = req.body.Type;
  var id = req.body.IntegrationID;
  
  queryNames = "select e.epicName,s.sprintName,a.AppName "+
    "from raid r LEFT join epics e on e.epicUNID=r.epicUNID LEFT join "+
    "sprint s on s.sprintUNID=r.sprintUNID LEFT join application_information a on a.AppUNID=r.AppUNID where "+
    "r.epicUNID='"+epic+"' and r.sprintUNID='"+sprint+"' and r.AppUNID='"+appID+"' and r.Type='"+type+"' and r.IntegrationID='"+id+"';" 
 //console.log(queryNames) 
    pool.getConnection().then(conn => {        
          conn.query(queryNames).then((raidnames) => {
              
              res.send(raidnames)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })
            
        }).catch(err => {
          //not connected
        });
  })
app.get('/raidType',(req,res)=>{
 
  query = "select Categoryvalues from adminprofile where FieldCategoryName ='RaidType' ORDER BY Categoryvalues ASC" ; 
  pool.getConnection().then(conn => {        
        conn.query(query).then((raidType) => {
            
            res.send(raidType)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})
app.get('/riskResponsePlan',(req,res)=>{
  
   queryPlan = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskResponsePlan' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryPlan).then((raidPlan) => {
             
             res.send(raidPlan)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskProbability',(req,res)=>{
  
   queryProb = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskProbability' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryProb).then((raidProb) => {
             
             res.send(raidProb)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskInternal',(req,res)=>{
     queryInt = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskInternalType' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryInt).then((raidInt) => {
             
             res.send(raidInt)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskExposure',(req,res)=>{  
   queryEx = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskExposure' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryEx).then((raidEx) => {
             
             res.send(raidEx)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskSatus',(req,res)=>{  
   queryst = "select Categoryvalues from adminprofile where FieldCategoryName ='RaidStatus' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryst).then((raidst) => {
             
             res.send(raidst)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskpriority',(req,res)=>{  
   querypr = "select Categoryvalues from adminprofile where FieldCategoryName ='RaidPriority' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(querypr).then((raidpr) => {
             
             res.send(raidpr)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskReportingLevel',(req,res)=>{  
   queryrep = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskReportingLevel' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryrep).then((raidreplevel) => {
             
             res.send(raidreplevel)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/raidShowstopper',(req,res)=>{  
  queryshst = "select Categoryvalues from adminprofile where FieldCategoryName ='Boolan' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryshst).then((showstopper) => {
             
             res.send(showstopper)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })
 app.get('/riskImpact',(req,res)=>{  
   queryimp = "select Categoryvalues from adminprofile where FieldCategoryName ='RiskImpact' ORDER BY Categoryvalues ASC" ; 
   pool.getConnection().then(conn => {        
         conn.query(queryimp).then((raidimp) => {
             
             res.send(raidimp)
             conn.end();
           })
           .catch(err => {
             //handle error
             res.send({"Fetch" : "Fail" })
             conn.end();
           })
           
       }).catch(err => {
         //not connected
       });
 })

app.get('/raidEpicData/:IntegrationID',(req,res)=>{
  //console.log("In raid risk function..")
  var id = req.params.IntegrationID;
  
  queryraidEpicData ="select distinct epicName,epicUNID from epics where IntegrationID='"+id+"'"; 
          //console.log("query....."+queryraidEpicData)
  pool.getConnection().then(conn => {        
        conn.query(queryraidEpicData).then((raidEpicData) => {
            
            res.send(raidEpicData)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})


app.get('/raidSprintData/:epicUnId/:IntegrationID',(req,res)=>{
 
  var epicUnId = req.params.epicUnId;
  var id = req.params.IntegrationID;  
 
    queryraidSprintData = "select distinct s.sprintName,s.sprintUNID,s.scopelevel from epics e,sprint s where s.epicUNID=e.epicUNID and e.epicUNID='"+epicUnId+"' and s.IntegrationID='"+id+"'" //+scopelevelQuery; 
          console.log("query....."+queryraidSprintData)
  pool.getConnection().then(conn => {        
        conn.query(queryraidSprintData).then((raidSprintData) => {
            console.log(raidSprintData)
            res.send(raidSprintData)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})

app.get('/raidAppData/:Epic/:Sprint/:IntegrationID/:scopelevel',(req,res)=>{
  //console.log("In raid risk function..")
var epicUnId = req.params.Epic;
var sprintUnId = req.params.Sprint;
var id = req.params.IntegrationID;
var scopelevel = req.params.scopelevel;
  
if (scopelevel === 'AT'){
  queryraidAppData = 
  "select ai.AppName as AppName,ai.AppUNID as AppUNID,sc.Scope_UNID AS Scope_UNID from sprintscope as sc join application_information as ai where ai.AppUNID = sc.AppUNID and sc.sprintUNID = '"+sprintUnId+"'";  
}else if (scopelevel === 'ST'){
  queryraidAppData = 
  "select CONCAT(ai.STScopeLevel, '-', ai.STScope, '-',ai.STDetailedScope,'_',ai.STScopeActivity) as AppName,ai.MasterSTInfoid as AppUNID,sc.Scope_UNID AS Scope_UNID"+
  " from sprintscope as sc join masterstinfo as ai where ai.MasterSTInfoid = sc.STUNID and sc.sprintUNID = '"+sprintUnId+"'";  
}else if (scopelevel === 'Others'){
  queryraidAppData = 
  "select Scope_BacklogActivity as AppName,Scope_UNID as AppUNID,Scope_UNID AS Scope_UNID from sprintscope where sprintUNID= '"+sprintUnId+"'";
  // "select ai.AppName as AppName,ai.AppUNID as AppUNID from sprintscope as sc join application_information as ai where ai.AppUNID = sc.AppUNID and sc.sprintUNID = '"+sprintUnId+"'";
}

console.log("query....."+queryraidAppData)
  pool.getConnection().then(conn => {        
        conn.query(queryraidAppData).then((raidAppData) => {
            console.log(raidAppData)
            res.send(raidAppData)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})

app.post("/InsertRaidInfo",function(req,res){
  var SSendres =true;
  var IntegrationID=req.body.IntegrationID
  var RaidID=req.body.RaidID
  var Desc=req.body.Description
  var Description = Desc.replace(/'/g, "\\'");
  var Status=req.body.Status
  var Owner=req.body.Owner.replace(/'/g, "\\'");
  var TargetDate=moment(req.body.TargetDate).format("YYYY-MM-DD");
  var Priority=req.body.Priority
  var DateRaised=moment(req.body.DateRaised).format("YYYY-MM-DD");
  var Scope_UNID ; 
  //= req.body.Scope_UNID;
  console.log(req.body)
 if((req.body.Scope_UNID ==='undefined' ) || (req.body.Scope_UNID ==='' ) || (req.body.Scope_UNID ==='null' )){
  Scope_UNID = '';
 }else{
  Scope_UNID = req.body.Scope_UNID;
 }

var AppID=req.body.AppID
if((AppID=="undefined")||(AppID=='')||(AppID==null)){
  AppID='';
 }
 var scopeLevel = req.body.scopeLevel;
 var scopeOverall = req.body.scopeOverall;
                           //scopeOverall:
 var MasterSTInfoid = req.body.MasterSTInfoid;
 console.log(req.body)
 console.log("req.body.MasterSTInfoid" + req.body.MasterSTInfoid )
 console.log("req.body.CurrentUser:" + req.body.CurrentUser )
                      
 if((MasterSTInfoid ==='undefined' ) || (MasterSTInfoid ==='' ) || (MasterSTInfoid ==='null' )){
  MasterSTInfoid = '';
 }
var Epic=req.body.Epic
if((Epic=="undefined")||(Epic=='')||(Epic==null)){
  Epic='';
}
var Sprint=req.body.Sprint
if((Sprint=="undefined")||(Sprint=='')||(Sprint==null)){
  Sprint='';
}
var Type=req.body.Type
var AssociatedApplication=req.body.AssociatedApplication
var ImpactConsequences=req.body.ImpactConsequences
var dt=moment(new Date());
var DateLastUpdated=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var ReportedTo=req.body.ReportedTo
var RaisedBy=req.body.RaisedBy
var dtrslvd=req.body.Resolved
if(dtrslvd === undefined || dtrslvd === '0000-00-00' || dtrslvd === null ||dtrslvd === NaN || dtrslvd === ''){
  var Resolved='0000-00-00';
}else{
  var dt=moment(dtrslvd);  
  var Resolved=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
}
var ClassificationCategory=req.body.ClassificationCategory
var Probability=req.body.Probability
var Exposure=req.body.Exposure
var ReportingLevel=req.body.ReportingLevel
var RiskResponsePlan=req.body.RiskResponsePlan
var ContaintmentApproach=req.body.ContaintmentApproach
var IssueNumber=req.body.IssueNumber
var DateLaunched = req.body.DateLaunched;
var AssociatedActionIDs = req.body.AssociatedActionIDs
var Category = req.body.Category
var Comm = req.body.Comments
var Comments = Comm.replace(/'/g, "\\'");
var Source = req.body.Source
if(req.body.DateOfEscalation === "undefined" || req.body.DateOfEscalation === "" || req.body.DateOfEscalation === null){
    var DateOfEscalation='0000-00-00';
  }else{
    var dt=moment(req.body.DateOfEscalation);  
    var DateOfEscalation=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
var ShowStopper = req.body.ShowStopper
var DependencyOwner = req.body.DependencyOwner
var ActionsToResolve = req.body.ActionsToResolve
var RiskType = req.body.RiskType
var LastUpdatedBy = req.body.LastUpdatedBy
var CurrentUser = req.body.CurrentUser
var AppID = req.body.AppID;

pool.getConnection().then(conn => { 
if(((AppID===undefined)||(AppID==='')||(AppID===null)) 
){
   AppID='';
   MasterSTInfoid = null;
   scopeOverall = null;
queryInsertRaid="insert into raid value(NULL,'"
+IntegrationID+"','"+Epic+"','"+Sprint+"','"
+AppID+"',"
+MasterSTInfoid+","
+scopeOverall+",'"
+scopeLevel+"','"
+Scope_UNID+"','"
+Type+"','"
+Description+"','"
+Status+"','"
+Owner+"','"
+TargetDate+"','"
+Priority+"','"
+DateRaised+"','"
+AssociatedApplication+"','"
+ImpactConsequences+"','"
+DateLastUpdated+"','"
+ReportedTo+"','"
+RaisedBy+"','"
+Resolved+"','"
+ClassificationCategory+"','"
+Probability+"','"
+Exposure+"','"
+ReportingLevel+"','"
+RiskResponsePlan+"','"
+ContaintmentApproach+"','"
+IssueNumber+"','"
+DateLaunched+"','"
+AssociatedActionIDs+"','"
+Category+"','"
+Comments+"','"
+Source+"','"
+DateOfEscalation+"','"
+ShowStopper+"','"
+DependencyOwner+"','"
+ActionsToResolve+"','"
+RiskType+"','"
+CurrentUser+"')"
console.log("queryInsertRaid"+queryInsertRaid)
conn.query(queryInsertRaid).then((result) => {
  conn.end();
}).catch(err => {
SSendres = false;  
conn.end();
})
} else {
 
for(var i in AppID){  
  
MasterSTInfoid= null ;
scopeOverall = null ;

if (scopeLevel === 'ST'){
  MasterSTInfoid=req.body.AppID[i];  
  AppID = '';
  scopeOverall = null
} 

if (scopeLevel === 'AT'){  
  AppID=req.body.AppID[i];  
  
  MasterSTInfoid=null;    
  scopeOverall = null 
}

 if (scopeLevel === 'Others'){ 
  scopeOverall = req.body.AppID[i];  
  AppID = '';
  MasterSTInfoid=null;   
}


queryInsertRaid="insert into raid value(NULL,'"
+IntegrationID+"','"+Epic+"','"+Sprint+"','"
+AppID+ "',"
+MasterSTInfoid+","  
+scopeOverall+ ",'"
+scopeLevel+"','"
+Scope_UNID+"','"
+Type+"','"
+Description+"','"
+Status+"','"
+Owner+"','"
+TargetDate+"','"
+Priority+"','"
+DateRaised+"','"
+AssociatedApplication+"','"
+ImpactConsequences+"','"
+DateLastUpdated+"','"
+ReportedTo+"','"
+RaisedBy+"','"
+Resolved+"','"
+ClassificationCategory+"','"
+Probability+"','"
+Exposure+"','"
+ReportingLevel+"','"
+RiskResponsePlan+"','"
+ContaintmentApproach+"','"
+IssueNumber+"','"
+DateLaunched+"','"
+AssociatedActionIDs+"','"
+Category+"','"
+Comments+"','"
+Source+"','"
+DateOfEscalation+"','"
+ShowStopper+"','"
+DependencyOwner+"','"
+ActionsToResolve+"','"
+RiskType+"','"
+CurrentUser+"')"
console.log(queryInsertRaid)

conn.query(queryInsertRaid).then((result) => {
  conn.end();
}).catch(err => {

SSendres = false;  
conn.end();
})
} //closing for loop
}//closing else
}); 
if(SSendres === true){
res.send({"RecordSave":"Sucess"}); 
}else{
res.send({"RecordSave":"Fail"}); 
}  
});

app.get ('/RaidLevelsParameters',(req,res)=>{   
  queryRaidLevelsParameters = "select FieldCategoryName,Categoryvalues from adminprofile where FieldCategoryName in ('Raid_Levels')" ;  
  pool.getConnection().then(conn =>{
    conn.query(queryRaidLevelsParameters).then((queryRaidLevelsParametersResult)=>{
      res.send(queryRaidLevelsParametersResult);
      conn.end();
    }).catch(err=>{
      res.send({"Fetch" : "Fail" })
             conn.end();
    })
  }).catch(err=>{
     //not connected
  })
 })

//Update riad table
app.put("/UpdateRaidInfo",function(req,res){
  //console.log("In update function")
  var IntegrationID=req.body.IntegrationID
  var RaidID=req.body.RaidID
  var Desc=req.body.Description
  var Description = Desc.replace(/'/g, "\\'");
  var Status=req.body.Status
  var Owner=req.body.Owner.replace(/'/g, "\\'");
 // var TargetDate = req.body.TargetDate
  var dt1 = req.body.TargetDate
  if((dt1 != "")||(dt1 != '') || (dt1 != 'Invalid date') || (dt1 != null)  ){
    var tdate = moment(dt1);
    var TargetDate = moment([tdate.year(), tdate.month(), tdate.date()]).format("YYYY-MM-DD");    
  }else{
    var TargetDate ='0000-00-00';
  }
  var Priority=req.body.Priority
// var DateRaised=req.body.DateRaised
 var dt2 = req.body.DateRaised;
  if((dt2 != "")||(dt2 != '') || (dt2 != 'Invalid date') || (dt2 != null)  ){
    var dtRaised = moment(dt2);
    var DateRaised = moment([dtRaised.year(), dtRaised.month(), dtRaised.date()]).format("YYYY-MM-DD");    
  }else{
    var DateRaised ='0000-00-00';
  }
 var AppID=req.body.AppUNID
var Epic=req.body.EpicUNID
var Sprint=req.body.SprintUNID
var Type=req.body.Type
var AssociatedApplication=req.body.AssociatedApplication
var ImpactConsequences=req.body.ImpactConsequences
var dt=moment(new Date());
var DateLastUpdated=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
var ReportedTo=req.body.ReportedTo
var RaisedBy=req.body.RaisedBy
var dtrslvd=req.body.Resolved
//console.log("Date value====="+dtrslvd)
if(dtrslvd === undefined || dtrslvd === '0000-00-00' || dtrslvd === null ||dtrslvd === NaN || dtrslvd === ''){
  var Resolved='0000-00-00';
}else{
  var dt=moment(dtrslvd);  
  var Resolved=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
}
var ClassificationCategory=req.body.ClassificationCategory
var Probability=req.body.Probability
var Exposure=req.body.Exposure
var ReportingLevel=req.body.ReportingLevel
var RiskResponsePlan=req.body.RiskResponsePlan
var ContaintmentApproach=req.body.ContaintmentApproach
var IssueNumber=req.body.IssueNumber
var DateLaunched=req.body.DateLaunched
var AssociatedActionIDs = req.body.AssociatedActionIDs
var Category = req.body.Category
var Comm = req.body.Comments
var Comments = Comm.replace(/'/g, "\\'");
var Source = req.body.Source
if(req.body.DateOfEscalation === "undefined" || req.body.DateOfEscalation === "" || req.body.DateOfEscalation === null){
  var DateOfEscalation='0000-00-00';
}else{
  var dt=moment(req.body.DateOfEscalation);  
  var DateOfEscalation=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
}
var ShowStopper = req.body.ShowStopper
var DependencyOwner = req.body.DependencyOwner
var ActionsToResolve = req.body.ActionsToResolve
var RiskType = req.body.RiskType
var LastUpdatedBy = req.body.LastUpdatedBy
var CurrentUser = req.body.CurrentUser

queryUpdateRaid ="Update raid SET ImpactConsequences='"+ImpactConsequences
+"',Description='"+Description
+"',Status='"+Status
+"',Owner='"+Owner
+"',TargetDate='"+TargetDate
+"',Priority='"+Priority
+"',DateRaised='"+DateRaised
  +"',DateLastUpdated='"+DateLastUpdated
  +"',ReportedTo='"+ReportedTo
  +"',RaisedBy='"+RaisedBy
  +"',Resolved='"+Resolved
+"',ClassificationCategory='"+ClassificationCategory
+"',Probability='"+Probability
+"',Exposure='"+Exposure
+"',ReportingLevel='"+ReportingLevel
+"',RiskResponsePlan='"+RiskResponsePlan
+"',ContaintmentApproach='"+ContaintmentApproach
+"',IssueNumber='"+IssueNumber
+"',DateLaunched='"+DateLaunched
+"',AssociatedActionIDs='"+AssociatedActionIDs
+"',Category='"+Category
+"',Comments='"+Comments
+"',Source='"+Source
+"',DateOfEscalation='"+DateOfEscalation
+"',ShowStopper='"+ShowStopper
+"',DependencyOwner='"+DependencyOwner
+"',ActionsToResolve='"+ActionsToResolve
+"',RiskType='"+RiskType
+"',LastUpdatedBy='"+CurrentUser
+"' where RaidID='"+RaidID+"';"
//epicUNID='"+Epic+"' and sprintUNID='"+Sprint+"' and AppUNID='"+AppID+"' and Type='"+Type+"' and IntegrationID='"+IntegrationID+"'"
//console.log("query update=="+queryUpdateRaid)
pool.getConnection().then(conn => {        
  conn.query(queryUpdateRaid).then((result) => {
    res.send({"RecordSave" : "Sucess"} )
      conn.end();
    })
    .catch(err => {
      //handle error
      res.send({"RecordSave" : "Fail" })
      conn.end();
    })
    
}).catch(err => {
  //not connected
});
});
//Raid Excel code
app.get('/getexcelRAID/:userName/:IntegrationID/:AccntNm/:Type',(req,res)=>{
  var RiskInfo = [];
  var ActionInfo = [];
  var IssueInfo = [];
  var DepInfo = [];
  var ProfileDataVal= [];

  var RAGGreen= '#008000';
var RAGAmber = '#FFC000';
var RAGRed = '#FF0000';
var RAGGray = '#A6A6A6';
var RAGWhite = '#FFFFFF';
var RAGBlue = '#00B0F0';
 
      var Typeparameter =  req.params.Type; 
      var Type=''
      if (Typeparameter === 'External'){
        Type = " and r.RiskType = 'External' "    
      }else if (Typeparameter === 'Internal'){
        Type = " and r.RiskType = 'Internal' "
      }
      
  var username = req.params.userName;
  var IntegrationID = req.params.IntegrationID;
  var AccntNm = req.params.AccntNm;
  
    var wb = new xl.Workbook();
    
    const raidfilename = "RAIDLog-"+AccntNm.replace(/\s/g,'')+".xlsx"
 
  var options = {
    sheetView: {   
      'showGridLines': false,
  },
  };

  var RIADSheets =['Risk','Action','Issue','Dependency']

  setTimeout(() => {
  // Risk_query = "select e.epicName,s.sprintName,a.AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName),r.* from Raid r"+
  // " LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN"+
  // " application_information a on r.AppUNID = a.AppUNID where r.IntegrationID='"+IntegrationID+"' and r.Type ='Risk'" ; 
  Risk_query =   "select e.epicName,s.sprintName,a.AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName) as EpicSprintScope ,r.* from 	" +
      "(select * from Raid where IntegrationID='"+IntegrationID+"' AND AppUNID <> '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall)  ) as r  "+
      "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
      "application_information a on r.AppUNID = a.AppUNID   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Risk'  "+ Type+ 
      "UNION "+ 
      "select e.epicName,s.sprintName,a.STScopeLevel as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.STScopeLevel, '-',a.STScope, '-',a.STDetailedScope, '-',a.STScopeActivity) as EpicSprintScope,r.* from " 	+ 
      "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND NOT isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
      "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
      "masterstinfo a on r.MasterSTInfoid = a.MasterSTInfoid   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Risk'  "+ Type+ 
      "UNION "+
      "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
      "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND NOT isnull( scopeOverall) ) as r "+
      "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
      "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Risk'   "+ Type+  
      "UNION "+
      "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
      "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
      "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
      "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Risk'  "+ Type
    

    pool.getConnection().then(conn => {        
     conn.query(Risk_query).then((Risk_result) => {
           RiskInfo=JSON.parse(JSON.stringify(Risk_result));
            
      conn.end();
      }).catch(err => {
          conn.end();
      })
    });       
  }, 2000)   
  
  setTimeout(() => {
  // Action_query = "select e.epicName,s.sprintName,a.AppName,CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName),r.* from Raid r"+
  // " LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN"+
  // " application_information a on r.AppUNID = a.AppUNID where r.IntegrationID='"+IntegrationID+"' and r.Type ='Action'" ; 

  Action_query =   "select e.epicName,s.sprintName,a.AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName) as EpicSprintScope,r.* from 	" +
  "(select * from Raid where IntegrationID='"+IntegrationID+ "' AND AppUNID <> '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall)  ) as r  "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "application_information a on r.AppUNID = a.AppUNID   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Action'  " + Type+  
  "UNION "+ 
  "select e.epicName,s.sprintName,a.STScopeLevel as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.STScopeLevel, '-',a.STScope, '-',a.STDetailedScope, '-',a.STScopeActivity) as EpicSprintScope,r.* from " 	+ 
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND NOT isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "masterstinfo a on r.MasterSTInfoid = a.MasterSTInfoid   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Action'  "+ Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND NOT isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Action' " + Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Action' "+ Type
console.log(Action_query)
   pool.getConnection().then(conn => {        
     conn.query(Action_query).then((Action_result) => {
     
        ActionInfo=JSON.parse(JSON.stringify(Action_result));
                 
       conn.end();
       }).catch(err => {
           conn.end();
       })
     }); 
    }, 2000) 

    setTimeout(() => {
  // Issue_query = "select e.epicName,s.sprintName,a.AppName,CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName),r.* from Raid r"+
  // " LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN"+
  // " application_information a on r.AppUNID = a.AppUNID where r.IntegrationID='"+IntegrationID+"' and r.Type ='Issue'" ; 

  Issue_query =   "select e.epicName,s.sprintName,a.AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName) as EpicSprintScope,r.* from 	" +
  "(select * from Raid where IntegrationID='"+IntegrationID+"' AND AppUNID <> '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall)  ) as r  "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "application_information a on r.AppUNID = a.AppUNID   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Issue'  " + Type+  
  "UNION "+ 
  "select e.epicName,s.sprintName,a.STScopeLevel as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.STScopeLevel, '-',a.STScope, '-',a.STDetailedScope, '-',a.STScopeActivity) as EpicSprintScope,r.* from " 	+ 
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND NOT isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "masterstinfo a on r.MasterSTInfoid = a.MasterSTInfoid   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Issue'  "+ Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND NOT isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Issue' " + Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Issue' "+ Type
   pool.getConnection().then(conn => {        
     conn.query(Issue_query).then((Issue_result) => {
      
        IssueInfo=JSON.parse(JSON.stringify(Issue_result));
                 
       conn.end();
       }).catch(err => {
           conn.end();
       })
     }); 
    }, 2000) 
    setTimeout(() => {
  // Dependency_query = "select e.epicName,s.sprintName,a.AppName,CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName),r.* from Raid r"+
  // " LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN"+
  // " application_information a on r.AppUNID = a.AppUNID where r.IntegrationID='"+IntegrationID+"' and r.Type ='Dependency'" ; 

  Dependency_query =   "select e.epicName,s.sprintName,a.AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.AppName) as EpicSprintScope,r.* from 	" +
  "(select * from Raid where IntegrationID='"+IntegrationID+"' AND AppUNID <> '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall)  ) as r  "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "application_information a on r.AppUNID = a.AppUNID   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Dependency'  " + Type+  
  "UNION "+ 
  "select e.epicName,s.sprintName,a.STScopeLevel as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.STScopeLevel, '-',a.STScope, '-',a.STDetailedScope, '-',a.STScopeActivity) as EpicSprintScope,r.* from " 	+ 
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND NOT isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "masterstinfo a on r.MasterSTInfoid = a.MasterSTInfoid   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Dependency'  "+  Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND NOT isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Dependency' " + Type+  
  "UNION "+
  "select e.epicName,s.sprintName,a.Scope_BacklogActivity as AppName, CONCAT(e.epicName, '-', s.sprintName, '-',a.Scope_BacklogActivity) as EpicSprintScope,r.* from  "+	
  "(select * from Raid where IntegrationID='"+IntegrationID+"'AND AppUNID = '' AND  isnull( MasterSTInfoid) AND  isnull( scopeOverall) ) as r "+
  "LEFT JOIN epics e on r.epicUNID = e.epicUNID LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID LEFT JOIN "+
  "sprintscope a on a.Scope_UNID = r.scopeOverall   where r.IntegrationID='"+IntegrationID+"' and r.Type ='Dependency' "+ Type



   pool.getConnection().then(conn => {        
     conn.query(Dependency_query).then((Dependency_result) => {
      
        DepInfo=JSON.parse(JSON.stringify(Dependency_result));
                
       conn.end();
       }).catch(err => {
           conn.end();
       })
     }); 
    }, 2000) 
    setTimeout(() => {
    queryProfileKeyword ="select * from transitionprofile WHERE IntegrationID='"+ IntegrationID +"'";  
    pool.getConnection().then(conn => {        
       conn.query(queryProfileKeyword).then((ProfileData) => {       
        ProfileDataVal=JSON.parse(JSON.stringify(ProfileData));          
       conn.end();    
     });       
    });
  }, 2000)

 
    setTimeout(() => {

  // Add Worksheets to the workbook

  var myStyleOverG = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#00FF00',
      fgColor: '#00FF00',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
     },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

  var myStyleOverA = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#FFC000',
      fgColor: '#FFC000',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
     },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

  var myStyleOverR = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#FF0000',
      fgColor: '#FF0000',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
     },
    alignment: {
      vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

  var myStyleOverN = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#BFBFBF',
      fgColor: '#BFBFBF',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
     },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

  var myStyleOverB = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#00B0F0',
      fgColor: '#00B0F0',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
     },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

   // Summary  Start

  var SumaryStyle = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#B0C4DD',
      fgColor: '#B0C4DD',
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
       bold:true,
     },
    alignment: {
     vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });

  var ws = wb.addWorksheet("Summary",options);
  for (let col = 1; col < 50; col++) { 
    ws.column(col).setWidth(8);
  }
 

  ws.cell( 2, 1).string("Project Info");
  ws.cell(2,1).style({
  font: {
    name: 'Tahoma',
     size: 8 ,
    bold: true,
    color: '#999EA1',
    }
  });


  var statustyle = wb.createStyle({
      
    font: {
      name: 'Tahoma',
       size: 8 ,
       bold:true,
     },
    alignment: {
     vertical: 'center',
     },
    border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'}
    }
  });
 


  var SummaryCol =['Client Name','Sector','Industry','IOT']

  for (let Rowcount = 0; Rowcount < SummaryCol.length; Rowcount++) { 
    ws.cell(Rowcount+3, 1,Rowcount+3,2,true).string(SummaryCol[Rowcount]).style(SumaryStyle);
    }

    ws.cell(3, 3,3, 4,true).string(ProfileDataVal[0]['ClientName']).style({
            border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'}
                      },
                                font: {
            name: 'Tahoma',
             size: 8 ,
                      }
        
      
    })

    ws.cell(4, 3,4, 4,true).string(ProfileDataVal[0]['Sector']).style({
      border: {
    left: { style: 'thin'},        
    right: { style: 'thin'},  
    top: { style: 'thin'},  
    bottom: { style: 'thin'}
                },
                          font: {
      name: 'Tahoma',
       size: 8 ,
                }
  

})
ws.cell(5, 3,5, 4,true).string(ProfileDataVal[0]['Industry']).style({
  border: {
left: { style: 'thin'},        
right: { style: 'thin'},  
top: { style: 'thin'},  
bottom: { style: 'thin'}
            },
                      font: {
  name: 'Tahoma',
   size: 8 ,
            }


})
ws.cell(6, 3,6, 4,true).string(ProfileDataVal[0]['IOT']).style({
  border: {
left: { style: 'thin'},        
right: { style: 'thin'},  
top: { style: 'thin'},  
bottom: { style: 'thin'}
            },
                      font: {
  name: 'Tahoma',
   size: 8 ,
            }


})

    
    var ScoreCardName =['Risk Scorecard','Action Scorecard','Issue Scorecard','Dependency Scorecard']
    var ScoreCardStatus =['Low','Medium','High']
    var ScoreCardcol =['Green','Amber','Red']
    var ScoreCardcolor =['#62ce21','#ffcd00','#ff0000']

    var ScoreCardRow =[9,9,14,14]
    var ScoreCardCol =[1,6,1,6]

    for (let count = 0; count < ScoreCardName.length; count++) { 

      IssueRow =ScoreCardRow[count];
      Issuecol =ScoreCardCol[count];
  
    ws.cell(IssueRow-1, Issuecol).string(ScoreCardName[count]);
    ws.cell(IssueRow-1, Issuecol, IssueRow-1, Issuecol+3,true).style({border: {
      left: { style: 'thin'},        
      right: { style: 'thin'},  
      top: { style: 'thin'},  
      bottom: { style: 'thin'} 
    },
    font: {
      name: 'Tahoma',
       size: 8 ,
      bold: true,
      color: '#999EA1',
      },
      alignment: {
        vertical: 'center'}
    });
  
    for (let IssueCount = 0; IssueCount < ScoreCardStatus.length; IssueCount++) { 
      colm =Issuecol+IssueCount+1
      ws.cell(IssueRow, colm).string(ScoreCardStatus[IssueCount]);
      
      var Countstyle = wb.createStyle({
      
        font: {
          name: 'Tahoma',
           size: 8 ,
                 },
        alignment: {
          horizontal: 'center',
         vertical: 'center',
         },
        border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'}
        }
      });
     
      //ScoreCardcol
      ws.cell(IssueRow+1, colm).formula('=SUMPRODUCT(--('+RIADSheets[count]+'!F:F="Open"),--(' +RIADSheets[count]+'!AA:AA="'+ScoreCardcol[IssueCount]+'"))').style(Countstyle)
      if (colm === 2 || colm === 7 ) {
        ws.cell(IssueRow+2, colm , IssueRow+2, colm+2 , true).formula('=Countif('+RIADSheets[count]+'!F:F,"Closed")').style(myStyleOverB)
      }
     
     // ws.cell(IssueRow+2, colm).formula('=SUMPRODUCT(--(' +RIADSheets[count]+'!F:F="Closed"),--(' +RIADSheets[count]+'!AA:AA="Blue"))').style(Countstyle)
      ws.cell(IssueRow,colm).style({
          fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: ScoreCardcolor[IssueCount],
          fgColor: ScoreCardcolor[IssueCount],
        },
        border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
      },
      font: {
        name: 'Tahoma',
         size: 8 ,
        bold: true,
      },
        alignment: {
          vertical: 'center',
          horizontal: 'center',
        }
      });
      }
  
      
  
      ws.cell(IssueRow+1, Issuecol).string("Open").style(statustyle);
      ws.cell(IssueRow+2, Issuecol).string("Closed").style(statustyle);
  
    }


   
  wb.write(raidfilename);
 // Summary  End

  const riskHeader = [
    { header: '#',  width: 3,FiledName:'',format:'number'},
    { header: 'Level',  width: 12,FiledName:'Level',format:'string'},
    { header: 'Epic-Sprint-Scope',  width: 25,FiledName:'',format:'string'},
    { header: 'Description', width: 30,FiledName:'Description',format:'string'},
    { header: 'Owner', width: 15,FiledName:'Owner',format:'string'},
    { header: 'Status', width: 5,FiledName:'Status',format:'string'},
    { header: 'Date Raised', width: 9,FiledName:'DateRaised',format:'date'},
    { header: 'Target Date', width: 9,FiledName:'TargetDate',format:'date'},
    { header: 'Raised By', width: 15,FiledName:'RaisedBy',format:'string'},
    { header: 'Risk Type', width: 10,FiledName:'RiskType',format:'string'},
    { header: 'Date Resolved', width: 10,FiledName:'Resolved',format:'date'},
    { header: 'Risk Impact', width: 10,FiledName:'ImpactConsequences',format:'string'},
    { header: 'Risk Probability', width: 15,FiledName:'Probability',format:'string'},
    { header: 'Priority', width: 6,FiledName:'Priority',format:'string'},
    { header: 'Risk Exposure', width: 10,FiledName:'Exposure',format:'string'},
    { header: 'Risk Response Plan', width: 15,FiledName:'RiskResponsePlan',format:'string'},
    { header: 'Containtment Approach', width: 30,FiledName:'ContaintmentApproach',format:'string'},
    { header: 'Reporting Level', width: 10,FiledName:'ReportingLevel',format:'string'},
    { header: 'Reported to', width: 15,FiledName:'ReportedTo',format:'string'},
    { header: 'Comments', width: 30,FiledName:'Comments',format:'string'},
  
  ];
    const actionHeader = [
      { header: '#',  width: 3,FiledName:'',format:'number'},
      { header: 'Level',  width: 12,FiledName:'Level',format:'string'},
      { header: 'Epic-Sprint-Scope',  width: 25,FiledName:'',format:'string'},
      { header: 'Description', width: 30,FiledName:'Description',format:'string'},
      { header: 'Owner', width: 15,FiledName:'Owner',format:'string'},
      { header: 'Status', width: 5,FiledName:'Status',format:'string'},
      { header: 'Priority', width: 6,FiledName:'Priority',format:'string'},
      { header: 'Date Raised', width: 9,FiledName:'DateRaised',format:'date'},
      { header: 'Target Date', width: 9,FiledName:'TargetDate',format:'date'},
      { header: 'Action Type', width: 10,FiledName:'RiskType',format:'string'},
      { header: 'Date Resolved', width: 10,FiledName:'Resolved',format:'date'},
      { header: 'Action Category', width: 15,FiledName:'Category',format:'string'},
      { header: 'Comments', width: 30,FiledName:'Comments',format:'string'},
    ];
    const issueHeader = [
      { header: '#',  width: 3,FiledName:'',format:'number'},
      { header: 'Level',  width: 12,FiledName:'Level',format:'string'},
      { header: 'Epic-Sprint-Scope',  width: 25,FiledName:'',format:'string'},
      { header: 'Description', width: 30,FiledName:'Description',format:'string'},
      { header: 'Owner', width: 15,FiledName:'Owner',format:'string'},
      { header: 'Status', width:5,FiledName:'Status',format:'string'},
      { header: 'Priority', width: 6,FiledName:'Priority',format:'string'},
      { header: 'Date Raised', width: 9,FiledName:'DateRaised',format:'date'},
      { header: 'Target Date', width: 9,FiledName:'TargetDate',format:'date'},
      { header: 'Date Resolved', width: 10,FiledName:'Resolved',format:'date'},
      { header: 'Issue Type', width: 10,FiledName:'RiskType',format:'string'},
      { header: 'Impact', width: 10,FiledName:'ImpactConsequences',format:'string'},
      { header: 'Reported To', width: 15,FiledName:'ReportedTo',format:'string'},
      { header: 'Raised By', width: 15,FiledName:'RaisedBy',format:'string'},
      { header: 'Source', width: 15,FiledName:'Source',format:'string'},
      { header: 'Date Of Escalation', width: 12.5,FiledName:'DateOfEscalation',format:'date'},
      { header: 'Show Stopper', width: 15,FiledName:'ShowStopper',format:'string'},
      { header: 'Comments', width: 30,FiledName:'Comments',format:'string'},
    ];
    const dependencyHeader = [
      { header: '#',  width: 3,FiledName:'',format:'number'},
      { header: 'Level',  width: 12,FiledName:'Level',format:'string'},
      { header: 'Epic-Sprint-Scope',  width: 25,FiledName:'',format:'string'},
      { header: 'Description', width: 30,FiledName:'Description',format:'string'},
      { header: 'Owner', width: 15,FiledName:'Owner',format:'string'},
      { header: 'Status', width: 5,FiledName:'Status',format:'string'},
      { header: 'Priority', width: 6,FiledName:'Priority',format:'string'},
      { header: 'Date Raised', width: 9,FiledName:'DateRaised',format:'date'},
      { header: 'Target Date', width: 9,FiledName:'TargetDate',format:'date'},
      { header: 'Date Resolved', width: 10,FiledName:'Resolved',format:'date'},
      { header: 'Dependency Type', width: 11,FiledName:'RiskType',format:'string'},
      { header: 'Impact', width: 10,FiledName:'ImpactConsequences',format:'string'},
      { header: 'Reported To', width: 15,FiledName:'ReportedTo',format:'string'},
      { header: 'Raised By', width: 15,FiledName:'RaisedBy',format:'string'},
      { header: 'Dependency Owner', width: 15,FiledName:'DependencyOwner',format:'string'},
      { header: 'Actions To Resolve', width: 30,FiledName:'ActionsToResolve',format:'string'},
      { header: 'Comments', width: 30,FiledName:'Comments',format:'string'},
    ];


var RIADAryy =
[{'RIADDatalen':RiskInfo.length,'RIADData':RiskInfo,'RIADHeader':riskHeader,'RIADHeaderlen':riskHeader.length},
{'RIADDatalen':ActionInfo.length,'RIADData':ActionInfo,'RIADHeader':actionHeader,'RIADHeaderlen':actionHeader.length},
{'RIADDatalen':IssueInfo.length,'RIADData':IssueInfo,'RIADHeader':issueHeader,'RIADHeaderlen':issueHeader.length},
{'RIADDatalen':DepInfo.length,'RIADData':DepInfo,'RIADHeader':dependencyHeader,'RIADHeaderlen':dependencyHeader.length}]

var headerStyle = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#1D3649',
    fgColor: '#1D3649',
  },
  font: {
    name: 'Arial',
     size: 8 ,
    bold: true,
    color: 'FFFFFF',
  },
  alignment: {
  horizontal: 'center',
  vertical: 'center',
  wrapText: true
  },
});
var tableStyle = wb.createStyle({
font: {
  name: 'Arial',
  size: 8 ,
  color: '000000',
},
alignment: {
horizontal: 'left',
vertical: 'top',
wrapText: true
},
border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
}
});
var dateStyle = wb.createStyle({
font: {
  name: 'Arial',
  size: 8 ,
  color: '000000',
},
dateFormat: 'dd-mmm-yyyy',
alignment: {
horizontal: 'center',
vertical: 'top',
wrapText: true
},
border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
}
});

dt_Report = new Date();
dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
var RAIDCol = '';

for (let Shcount = 0; Shcount < RIADSheets.length; Shcount++) { 
   var ws = wb.addWorksheet(RIADSheets[Shcount],options);
  res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
  res.setHeader('Content-Disposition', 'attachment; filename=' + raidfilename);
  wb.write(raidfilename);
  
  for (let i = 0; i < RIADAryy[Shcount]['RIADHeaderlen']; i++) {
      ws.cell( 1, i+1).string(RIADAryy[Shcount]['RIADHeader'][i].header);
        ws.cell( 1 , i+1).style(headerStyle);
        ws.column(i+1).setWidth(RIADAryy[Shcount]['RIADHeader'][i].width);
   }
   ws.cell(1, 1, 1, RIADAryy[Shcount]['RIADHeaderlen'] ).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
  }})

  if (RIADAryy[Shcount]['RIADDatalen'] === 0) {
        ws.cell(2,1).string("No records for "+RIADSheets[Shcount]+".")
        ws.cell(2, 1, 2, RIADAryy[Shcount]['RIADHeaderlen'] ,true).style({border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'} 
  }})
} else {
  for (let row = 1; row<= RIADAryy[Shcount]['RIADDatalen']; row++) {
    var level =RIADAryy[Shcount]['RIADData'][row-1]['epicName'];
        if (RIADAryy[Shcount]['RIADData'][row-1]['sprintName'] !== null ){
           level=level+'-'+RIADAryy[Shcount]['RIADData'][row-1]['sprintName']
        }
        if (RIADAryy[Shcount]['RIADData'][row-1]['AppName'] !== null){
            level=level+'-'+RIADAryy[Shcount]['RIADData'][row-1]['AppName']
        }
    for (let col = 1; col <= RIADAryy[Shcount]['RIADHeaderlen']; col++) {
          if (col === 1){
        ws.cell(row+1, col).number(row).style(tableStyle);
      }else if(col === 2){
         if (level === null) {
            ws.cell(row+1, col).string("Overall Level").style(tableStyle);
         }else if(RIADAryy[Shcount]['RIADData'][row-1]['sprintName'] === null){
          ws.cell(row+1, col).string("EPIC Level").style(tableStyle);
         }else if(RIADAryy[Shcount]['RIADData'][row-1]['AppName'] === null){
          ws.cell(row+1, col).string("Sprint Level").style(tableStyle);
         }else{
          ws.cell(row+1, col).string("Scope Level").style(tableStyle);
         }
      }else if(col === 3){        
          if (level === null) {
            ws.cell(row+1, col).string("Overall Level").style(tableStyle);
          }else {
             ws.cell(row+1, col).string(RIADAryy[Shcount]['RIADData'][row-1]['EpicSprintScope']).style(tableStyle);
            
        }                    
      }else{
       if(RIADAryy[Shcount]['RIADHeader'][col-1]['format'] === 'string'){
         var fldname = RIADAryy[Shcount]['RIADHeader'][col-1]['FiledName'];
         if((RIADAryy[Shcount]['RIADData'][row-1][fldname] === '') || (RIADAryy[Shcount]['RIADData'][row-1][fldname] === null) || (RIADAryy[Shcount]['RIADData'][row-1][fldname] === undefined)){
          ws.cell(row+1, col).string('').style(tableStyle);  
         }else{
         ws.cell(row+1, col).string(RIADAryy[Shcount]['RIADData'][row-1][fldname]).style(tableStyle); 
       }        
       }else if(RIADAryy[Shcount]['RIADHeader'][col-1]['format'] === 'date'){
        var fldname = RIADAryy[Shcount]['RIADHeader'][col-1]['FiledName'];
        if((RIADAryy[Shcount]['RIADData'][row-1][fldname] === NaN) || (RIADAryy[Shcount]['RIADData'][row-1][fldname] === null) || (RIADAryy[Shcount]['RIADData'][row-1][fldname] === undefined)||(RIADAryy[Shcount]['RIADData'][row-1][fldname] === '0000-00-00')){
          ws.cell(row+1, col).string('').style(dateStyle);
        }else{
          //var fldDate=moment(RIADAryy[Shcount]['RIADHeader'][col-1]['FiledName']).format("DD-MMM-YYYY")
          ws.cell(row+1, col).string(moment(RIADAryy[Shcount]['RIADData'][row-1][fldname]).format("DD-MMM-YYYY")).style(tableStyle);
         
          var dt=moment(RIADAryy[Shcount]['RIADData'][row-1]['TargetDate']);  
          var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                    dt_targer = new Date(TargetDt_Com);
                    ws.column(27).hide();
                    if(RIADAryy[Shcount]['RIADData'][row-1]['Status'] === 'Open'){ 
                      if( ((RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '1-Low') ||
                       (RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '2-Medium')) &&
                       (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                        // Green
                        ws.cell(row+1, 6).style(myStyleOverG); 
                        ws.cell(row+1, 27).string('Green'); 
                      }else  if ((RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '3-High') &&
                         (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                       // Red
                      ws.cell(row+1, 6).style(myStyleOverR); 
                      ws.cell(row+1, 27).string('Red'); 

                      }else  if ((RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '3-High') &&
                         (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {

                        //Amber
                        ws.cell(row+1, 6).style(myStyleOverA); 
                        ws.cell(row+1, 27).string('Amber'); 
                      }else  if ((RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '3-High') &&
                          (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {

                        // Green
                        ws.cell(row+1, 6).style(myStyleOverG); 
                        ws.cell(row+1, 27).string('Green'); 
                      } else {    
                        if (RIADAryy[Shcount]['RIADData'][row-1]['ImpactConsequences'] === '')  {
                            if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                              // Green
                              ws.cell(row+1, 6).style(myStyleOverG); 
                              ws.cell(row+1, 27).string('Green'); 
                            }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                              //red
                              ws.cell(row+1, 6).style(myStyleOverR); 
                              ws.cell(row+1, 27).string('Red'); 
                            } 
                        }else {
                              //Red
                              ws.cell(row+1, 6).style(myStyleOverR);  
                              ws.cell(row+1, 27).string('Red'); 
                        }                          
                      }
                    }else if(RIADAryy[Shcount]['RIADData'][row-1]['Status'] === 'Closed'){   
                    ws.cell(row+1, 6).style(myStyleOverB); 
                    ws.cell(row+1, 27).string('Blue'); 
                   }      
      }
     }
     }
     
    }   
  }
  wb.write(raidfilename); 
}

}

wb.write(raidfilename); 
}, 4000) 
 setTimeout(() => {
    var filePath = __dirname+'\\'+raidfilename; 
   // res.setHeader('Content-Type', 'application/octet-stream');
    res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
    res.setHeader('Content-Disposition', 'attachment; filename=' + raidfilename);

    setTimeout(()=>{
      try {
        
       fs.unlinkSync(filePath)
       //file removed
     } catch(err) {
       console.error(err)
     }
      }, 10000)

    return res.sendFile(filePath);
   }, 6000) 
  
});


//RAID Code End
//***************Epic Wise Report Start */
app.get('/ExportEpicPPT/:Username/:IntegrationID/:TAccName', (req, res) => {
  var AccountName = '';
  var epicName = '';
  var EpicvalData = [];
  var EpicSprintAppvalData =[];
  var EpicAppvalData=[];
  var EpicApplArr_eachEpic =[];
  var EpicRisk_valData = [];
  var EpicAction_valData = [];
  var EpicIssue_valData = [];
  var EpicDep_valData = [];
  var RAGBlue = '#00B0F0';
  var RAGGreen= '#008000';
  var RAGAmber = '#FFC000';
  var RAGRed = '#FF0000';
  var RAGGray = '#A6A6A6';
  var RAGWhite = '#FFFFFF';
  var Username = req.params.Username; 
  var Intval = req.params.IntegrationID;
  var IntegrationID = Intval.split(".")[0];

  var dtt=moment(new Date());
  var todays_date=moment([dtt.year(), dtt.month(), dtt.date()]).format("DD-MMM-YYYY");
  
  filename = "EpicWiseStatusReport-"+Username.replace(/\s/g,'');
  var filePath = __dirname+'\\'+filename+'.pptx';
 
  var pptx = new PptxGenJS();
setTimeout(() => {  
 queryEpicAccount = "Select * from transitionprofile where IntegrationID = '" + IntegrationID + "'";
  pool.getConnection().then(conn => {
    conn.query(queryEpicAccount).then((queryEpicAccountRes) => {
      var Account = JSON.parse(JSON.stringify(queryEpicAccountRes));                
           AccountName = Account[0]["ClientName"]                     
          conn.end();
      }).catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });
}, 2000)
 //Transition Team//
 setTimeout(() => { 
 queryOwner= "Select USER_FULLNAME from user_transition where TRANSITION_ID = '" + IntegrationID +"' AND USER_TYPE = 'Transition'" ;
 TRantionTeamList =[];
  pool.getConnection().then(conn => {
    conn.query(queryOwner).then((queryOwnerRes) => {
      SevenkeyTransition = JSON.parse(JSON.stringify(queryOwnerRes));
          for( let i=1; i< SevenkeyTransition.length+1; i++){
            if (SevenkeyTransition[i-1]["USER_FULLNAME"] !== null) {
            TRantionTeamList.push(SevenkeyTransition[i-1]["USER_FULLNAME"])
            }
          }        
        conn.end();
      }).catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });
}, 2000)
 //End Transition Team//
 setTimeout(() => {  
 queryEpics = "select * from epics where IntegrationID='"+IntegrationID+"' and epicUNID <>'';";
  pool.getConnection().then(conn => {
  conn.query(queryEpics).then((queryEpicsRes) => {  
   EpicvalData = JSON.parse(JSON.stringify(queryEpicsRes));    
   conn.end();
  }).catch(err => {
    conn.end();
 })
 }).catch(err => {
 //not connected
 });
}, 2000)
//Query to get Sprint details-new slide
setTimeout(() => {  
  queryApplEpicWise = "select ep.epicUNID,ep.epicName, sp.sprintName,sp.rag, "+
  "sp.startDate,sp.endDate,sp.actualStartDate,sp.actualEndDate,sp.replanStartDate,sp.replanEndDate,"+
  "sp.reason_for_not_green,sp.green_plan,sp.Remarks from sprint sp "+
  " LEFT OUTER JOIN epics ep ON ep.epicUNID=sp.epicUNID "+
  " WHERE ep.IntegrationID= '"+ IntegrationID+"' and ep.epicName<>'' ORDER BY 1 & 2 ASC;";
     pool.getConnection().then(conn => {
       conn.query(queryApplEpicWise).then((queryApplEpicWiseRes) => {
         EpicAppvalData = JSON.parse(JSON.stringify(queryApplEpicWiseRes));
         conn.end();
       }).catch(err => {
           conn.end();
       })
     }).catch(err => {
       //not connected
   });
 }, 2000)
 //Query to get Appl Details of Epic for Slide 3
 setTimeout(() => {  
 querySprintEpicWise = "select ep.epicUNID,ep.epicName, sp.sprintName, ai.AppName, st.status,"+
  "st.Plan_Start_Date,st.Plan_End_Date,st.Actual_Start_Date,st.Actual_End_Date,st.Replan_Start_Date,st.RePlan_End_Date,st.ktsummary,"+
  "st.Reason_Not_Green,st.goto_Green,st.Remarks from application_information ai "+
  "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "WHERE ai.IntegrationID= '"+ IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='AT' "+
  "UNION "+
  "select ep.epicUNID,ep.epicName, sp.sprintName, "+
  "CONCAT(stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity),"+
  "st.status,st.Plan_Start_Date,st.Plan_End_Date,st.Actual_Start_Date,st.Actual_End_Date,"+
  "st.Replan_Start_Date,st.RePlan_End_Date,st.ktsummary,"+
  "st.Reason_Not_Green,st.goto_Green,st.Remarks from masterstinfo stc "+
  "LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "WHERE stc.IntegrationID= '"+ IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='ST' "+
  "UNION "+
  "select ep.epicUNID,ep.epicName, sp.sprintName, sc.Scope_BacklogActivity,"+
  "st.status,st.Plan_Start_Date,st.Plan_End_Date,st.Actual_Start_Date,st.Actual_End_Date,"+
  "st.Replan_Start_Date,st.RePlan_End_Date,st.ktsummary,"+
  "st.Reason_Not_Green,st.goto_Green,st.Remarks FROM sprintscope sc "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "WHERE sc.Scope_IntegrationID= '"+ IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='Others' "+
  "ORDER BY 1 & 2 ASC;"  
    pool.getConnection().then(conn => {
      conn.query(querySprintEpicWise).then((querySprintEpicWiseRes) => {
        EpicSprintAppvalData = JSON.parse(JSON.stringify(querySprintEpicWiseRes));
        conn.end();
      }).catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });
}, 2000) 
 
 //Key Risk //
 setTimeout(() => { 
  queryEpicwise_Risk = "select e.epicUNID,e.epicName,s.sprintName,a.AppName, r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,"+
  "r.RiskType,r.ImpactConsequences,r.Probability "+
            "from Raid r LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
            "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
            "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
            "where r.IntegrationID='"+ IntegrationID+"'"+
            "and r.type='risk' and r.Status='Open' and r.epicUNID<>'' ORDER BY 1 ASC;";
            pool.getConnection().then(conn => {
            conn.query(queryEpicwise_Risk).then((queryEpicwise_RiskRes) => {
              EpicRisk_valData = JSON.parse(JSON.stringify(queryEpicwise_RiskRes));

            conn.end();
      }).catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });
}, 2000)            
//Key Risk end//
//Key Issue //
setTimeout(() => { 
 queryEpicwise_Issue = "select  r.epicUNID,r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,"+
 "r.RiskType,r.ShowStopper,e.epicName,s.sprintName,a.AppName "+
 "from Raid r LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
 "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
 "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
 "where r.IntegrationID='"+ IntegrationID+"' and r.status='Open' and r.type='issue' and r.epicUNID<>'';";
pool.getConnection().then(conn => {
conn.query(queryEpicwise_Issue).then((queryEpicwise_IssueRes) => {
  EpicIssue_valData = JSON.parse(JSON.stringify(queryEpicwise_IssueRes))
conn.end();
}).catch(err => {
conn.end();
})
}).catch(err => {
//not connected
});
}, 2000);
 //Key issues end//
 //Key Actions //
 setTimeout(() => {
 queryEpicwise_Actions = "select  r.epicUNID,r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,"+
 "r.RiskType,e.epicName,s.sprintName,a.AppName "+
 "from Raid r LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
 "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
 "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
 "where r.IntegrationID='"+ IntegrationID+"' and r.status='Open' and r.type='action' and r.epicUNID<>'';";
 pool.getConnection().then(conn => {
conn.query(queryEpicwise_Actions).then((queryEpicwise_ActionsRes) => {
   EpicAction_valData = JSON.parse(JSON.stringify(queryEpicwise_ActionsRes))
conn.end();
}).catch(err => {
conn.end();
})
}).catch(err => {
//not connected
});
}, 2000);
 //Key Action end//
 //Key Dependencies //
 setTimeout(() => {
 queryEpicwise_Dependencies = "select  r.epicUNID,r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,"+
 "r.RiskType,r.ImpactConsequences,e.epicName,s.sprintName,a.AppName "+
 "from Raid r LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
 "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
 "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
 "where r.IntegrationID='"+ IntegrationID+"' and r.status='Open' and r.type='dependency' and r.epicUNID<>'';";
pool.getConnection().then(conn => {
conn.query(queryEpicwise_Dependencies).then((queryEpicwise_DependenciesRes) => {
  EpicDep_valData = JSON.parse(JSON.stringify(queryEpicwise_DependenciesRes))
conn.end();
}).catch(err => {
conn.end();
})
}).catch(err => {
//not connected
});
}, 2000);
 //Key Dependencies end//

  setTimeout(() => {
    
    //Slide 1 - Introduction
    var slide1 = pptx.addNewSlide();
    var rows = [];
    rows.push([{ text:'',options:{fill:'00B0F0', color:'fdfefe'}}]);
    slide1.addTable( rows, { x:0.43, y:0.27, w:9, h:5, color:'00B0F0'} );  
    var imagepath =__dirname+'\\src\\assets\\IBM blue.png';
    slide1.addText('<Client Logo>', {fontSize:12, w:1.5,x:3, y:1, align:'l',valign:'b',color:'000000'});
    slide1.addImage({ path:imagepath, x:1, y:1, w:1.4, h:0.58 })    
    slide1.addText(AccountName, {fontSize:15, bold:true, w:9,x:.43, y:3.5, color:'fdfefe', align:'c'});
    slide1.addText('Transition Management', {fontSize:15, bold:true, w:9,x:.43, y:3.8, color:'fdfefe', align:'c'});
    slide1.addText('EPIC WISE STATUS Report', {fontSize:15, bold:true, w:9,x:.431, y:4.1, color:'fdfefe', align:'c'});
  var OverAllRAG='';

    //slide2 - Epic Details
  for( let i=1; i< EpicvalData.length+1; i++){
    var slide2 = pptx.addNewSlide();  
    if((EpicvalData[i-1]["rag"] != undefined)||(EpicvalData[i-1]["rag"] != null)||(EpicvalData[i-1]["rag"] != '')){
      if(EpicvalData[i-1]["rag"] === 'Green'){
        OverAllRAG = '008000'
      }else  if(EpicvalData[i-1]["rag"] === 'Amber'){
        OverAllRAG = 'ffbf00'
      }else  if(EpicvalData[i-1]["rag"] === 'Red'){
        OverAllRAG = 'FF0000'
    }  
    }else{
      OverAllRAG = 'FFFFFF'
    } 
   EpicMastertemplate(pptx, slide2, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
    var rows = [];
    var colW=[2,2,2,2,1.5]
    var rowH=[0.1,0.2]
    var options1= {fill:'0070C0', color:'fdfefe', align:'c', valign:'c', bold:true}	   
    rows.push([
      { text:'Epic', options:options1},
      { text:'Start Date', options:options1 },
      { text:'End Date', options:options1 },
      { text:'Actual Start Date', options:options1 },
      { text:'Actual End Date', options:options1 }
    ]); 
    

    if(EpicvalData[i-1]["replanStartDate"] !== null){
      dt_ReportPlanStDT2 = new Date(moment(EpicvalData[i-1]["replanStartDate"]).format("MM-DD-YY"));
  }else{
    if(EpicvalData[i-1]["startDate"] !== null){
       dt_ReportPlanStDT2 = new Date(moment(EpicvalData[i-1]["startDate"]).format("MM-DD-YY"));
    }else{
       dt_ReportPlanStDT2 = '';
    }
  }  
    if(EpicvalData[i-1]["replanEndDate"] !== null){
      dt_ReportPlanEndDT2 = new Date(moment(EpicvalData[i-1]["replanEndDate"]).format("MM-DD-YY"));
 }else{
   if(EpicvalData[i-1]["endDate"] !== null){
     dt_ReportPlanEndDT2 = new Date(moment(EpicvalData[i-1]["endDate"]).format("MM-DD-YY"));
   }else{
     dt_ReportPlanEndDT2 = '';
   }
 }  
 var PlanStDt2 = moment(dt_ReportPlanStDT2).format("DD-MMM-YYYY");
 var planEndDt2 = moment(dt_ReportPlanEndDT2).format("DD-MMM-YYYY");
 if(PlanStDt2==='Invalid date'){PlanStDt2=''};
 if(planEndDt2==='Invalid date'){planEndDt2=''};
      var dtast = moment(EpicvalData[i-1]["actualStartDate"]);
      actualstartDate = moment([dtast.year(), dtast.month(), dtast.date()]).format("DD-MMM-YYYY");
      var dtaed = moment(EpicvalData[i-1]["actualEndDate"]);
      actualEndDate = moment([dtaed.year(), dtaed.month(), dtaed.date()]).format("DD-MMM-YYYY");
      if(actualstartDate==='Invalid date'){actualstartDate=''}
      if(actualEndDate==='Invalid date'){actualEndDate=''}

      rows.push([{ text:EpicvalData[i-1]["epicName"]}, 
      { text:PlanStDt2}, 
      { text:planEndDt2},
      { text:actualstartDate}, 
      { text:actualEndDate}]);
 
    slide2.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:0.28, y:1.19} );
 
    var rows = []; 
    var colW=[9.5]
    var rowH=[3]
    rows.push([{ text:''}]);
    slide2.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:0.28, y:2} );
 
    var rows = [];
    var colW=[2,7.5]
    var rowH=[1,1,1]
      rows.push([
        { text:'Overall Summary : ',options:{fontSize:9, bold:true, color:'660099', border: {pt: '0'}}},
        { text:EpicvalData[i-1]["remarks"],options:{fontSize:9, border: {pt: '0'}}},
      ]);
      rows.push([
        { text:'Reason for <Amber/Red> : ',options:{fontSize:9, bold:true ,color:'660099', border: {pt: '0'}}},
        { text:EpicvalData[i-1]["reason_for_not_green"],options:{fontSize:9, border: {pt: '0'}}},
      ]);
      rows.push([
        { text:'Go to Green Plan : ',options:{fontSize:9, bold:true ,color:'660099', border: {pt: '0'}}}, 
        { text:EpicvalData[i-1]["green_plan"],options:{fontSize:9, border: {pt: '0'}}},
      ]);  
    slide2.addTable( rows, {colW:colW,rowH:rowH, x:0.28, y:2.2} ); 
  //Generating new slide 
filedarr =['sprintName','rag','startDate','endDate','actualStartDate','actualEndDate','reason_for_not_green','green_plan','Remarks']
 
if(EpicAppvalData!==0){

  EpicApplArr_eachEpic=[];
  for( let ieR=1; ieR< EpicAppvalData.length+1; ieR++){
    if(EpicvalData[i-1]["epicName"] === EpicAppvalData[ieR-1]["epicName"]){
      EpicApplArr_eachEpic.push(JSON.parse(JSON.stringify(EpicAppvalData[ieR-1])));
    }
  }
  if(EpicApplArr_eachEpic!=0){
    var Rowstend =[]
        var SRow= 0;
        var ERow= 0;
        var rowcount =0;
        var flag="No"
        var lenarr =[];
        var length =0;
       
for (let i = 0; i < EpicApplArr_eachEpic.length; i++) {
  rowcount = rowcount + 1
   
  var str = JSON.stringify(EpicApplArr_eachEpic[i]['reason_for_not_green']);
      lenarr.push(str.length)
    
   var str = JSON.stringify(EpicApplArr_eachEpic[i]['green_plan']);
    lenarr.push(str.length)
   
   var str = JSON.stringify(EpicApplArr_eachEpic[i]['Remarks']);
     lenarr.push(str.length)

     length=length+arraySort(lenarr)[lenarr.length-1]
      lenarr=[];

  if (flag = 'No') {
    
      if (length > 550 || rowcount === 11) {
        flag = 'Yes'
          if (rowcount > 1) { 
            ERow = i - 1
            }else{
              ERow = i
            }
      }
  }

  if (flag === 'Yes') {
      Rowstend.push({
          "Row_S": SRow,
          "Row_E": ERow
      })
      SRow = ERow + 1
      if (rowcount > 1) {  
          i = i - 1
      }      
      rowcount = 0
      length =0;
     
      flag = 'No'
  }

  if ((i + 1 === EpicApplArr_eachEpic.length) && (ERow < EpicApplArr_eachEpic.length) && (SRow < EpicApplArr_eachEpic.length)) {
        Rowstend.push({
          "Row_S": SRow,
          "Row_E": EpicApplArr_eachEpic.length - 1
      })
  }
}

for( let inum=0; inum< Rowstend.length; inum++){
    var slide3 = pptx.addNewSlide();   
    EpicMastertemplate(pptx, slide3, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
    slide3.addText('Schedule – Sprint wise', {fontSize:12, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
    var rows = [];
    var colW=[0.5,0.8,0.9,0.9,0.9,0.9,1.6,1.6,1.6]
    //var colW=[0.5,0.8,0.8,0.9,0.9,0.9,0.9,1.3,1.3,1.3]
    var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
    rows.push([
    { text:'Sprint' ,options:options},
    { text:'Transition RAG' ,options:options},
    { text:'Start Date' ,options:options},
    { text:'End Date' ,options:options},
    { text:'Actual Start Date' ,options:options},
    { text:'Actual End Date' ,options:options},
    { text:'Reason for not green' ,options:options},
    { text:'Go to Green Plan' ,options:options},
    { text:'Remarks' ,options:options},
    ]); 

    for( let is=Rowstend[inum]['Row_S']+1; is<= Rowstend[inum]['Row_E']+1; is++){
     
      if(EpicApplArr_eachEpic[is-1]["replanStartDate"] !== null){
        dt_ReportPlanStDT1 = new Date(moment(EpicApplArr_eachEpic[is-1]["replanStartDate"]).format("MM-DD-YY"));
    }else{
      if(EpicApplArr_eachEpic[is-1]["startDate"] !== null){
         dt_ReportPlanStDT1 = new Date(moment(EpicApplArr_eachEpic[is-1]["startDate"]).format("MM-DD-YY"));
      }else{
         dt_ReportPlanStDT1 = '';
      }
    }  
      if(EpicApplArr_eachEpic[is-1]["replanEndDate"] !== null){
        dt_ReportPlanEndDT1 = new Date(moment(EpicApplArr_eachEpic[is-1]["replanEndDate"]).format("MM-DD-YY"));
   }else{
     if(EpicApplArr_eachEpic[is-1]["endDate"] !== null){
       dt_ReportPlanEndDT1 = new Date(moment(EpicApplArr_eachEpic[is-1]["endDate"]).format("MM-DD-YY"));
     }else{
       dt_ReportPlanEndDT1 = '';
     }
   }  
   var PlanStDt1 = moment(dt_ReportPlanStDT1).format("DD-MMM-YYYY");
   var planEndDt1 = moment(dt_ReportPlanEndDT1).format("DD-MMM-YYYY");
   if(PlanStDt1==='Invalid date'){PlanStDt1=''};
   if(planEndDt1==='Invalid date'){planEndDt1=''};
   
      var dtast = moment(EpicApplArr_eachEpic[is-1]["actualStartDate"]);
      actualstartDate1 = moment([dtast.year(), dtast.month(), dtast.date()]).format("DD-MMM-YYYY");
      var dtaed = moment(EpicApplArr_eachEpic[is-1]["actualEndDate"]);
      actualEndDate1 = moment([dtaed.year(), dtaed.month(), dtaed.date()]).format("DD-MMM-YYYY");
      if(actualstartDate1==='Invalid date'){actualstartDate1=''}
      if(actualEndDate1==='Invalid date'){actualEndDate1=''}
      var optionsRAG;
if(EpicApplArr_eachEpic[is-1]["rag"] =='Red'){
optionsRAG={fill:'FF0000',color:'FFFFFF'}
}else if(EpicApplArr_eachEpic[is-1]["rag"] =='Amber'){
  optionsRAG={fill:'ffbf00'}
}else if(EpicApplArr_eachEpic[is-1]["rag"] =='Green'){
  optionsRAG={fill:'008000',color:'FFFFFF'}
}
        rows.push([
          { text:EpicApplArr_eachEpic[is-1]["sprintName"]},
          { text:EpicApplArr_eachEpic[is-1]["rag"] ,options:optionsRAG},
          { text:PlanStDt1},
          { text:planEndDt1},
          { text:actualstartDate1},
          { text:actualEndDate1},
          { text:EpicApplArr_eachEpic[is-1]["reason_for_not_green"]},
          { text:EpicApplArr_eachEpic[is-1]["green_plan"]},
          { text:EpicApplArr_eachEpic[is-1]["Remarks"]},
          ]);

        }
    slide3.addTable( rows, {lineWeight:1.0,autoPage:false,colW:colW,fontSize:8,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );  
  }
}else{
  var slide3 = pptx.addNewSlide();   
  EpicMastertemplate(pptx, slide3, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
  slide3.addText('Schedule – Sprint wise', {fontSize:12, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.5,0.8,0.9,0.9,0.9,0.9,1.6,1.6,1.6]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'Sprint' ,options:options},
    { text:'Transition RAG' ,options:options},
    { text:'Start Date' ,options:options},
    { text:'End Date' ,options:options},
    { text:'Actual Start Date' ,options:options},
    { text:'Actual End Date' ,options:options},
    { text:'Reason for not green' ,options:options},
    { text:'Go to Green Plan' ,options:options},
    { text:'Remarks' ,options:options},
    ]);
  rows.push([{ text:"No Sprints for Epic" ,options:{colspan:filedarr.length}}])
  slide3.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
}else{
    var slide3 = pptx.addNewSlide();   
    EpicMastertemplate(pptx, slide3, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
    slide3.addText('Schedule – Sprint wise', {fontSize:10, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
    var rows = [];
    var colW=[0.5,0.8,0.9,0.9,0.9,0.9,1.6,1.6,1.6]
    var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
    rows.push([
      { text:'Sprint' ,options:options},
      { text:'Transition RAG' ,options:options},
      { text:'Start Date' ,options:options},
      { text:'End Date' ,options:options},
      { text:'Actual Start Date' ,options:options},
      { text:'Actual End Date' ,options:options},
      { text:'Reason for not green' ,options:options},
      { text:'Go to Green Plan' ,options:options},
      { text:'Remarks' ,options:options},
      ]);
    rows.push([{ text:"No Sprints for Epic" ,options:{colspan:filedarr.length}}])
    slide3.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
//Generating slide 4
filedarr =['sprintName','AppName','rag','startDate','endDate','Plan_Start_Date','Plan_End_Date','ktsummary','Reason_Not_Green','goto_Green','Remarks']

if(EpicSprintAppvalData!==0){
  var EpicSprintArr_eachEpic=[];
  for( let ieR=1; ieR< EpicSprintAppvalData.length+1; ieR++){
    if(EpicvalData[i-1]["epicName"] === EpicSprintAppvalData[ieR-1]["epicName"]){  
      EpicSprintArr_eachEpic.push(JSON.parse(JSON.stringify(EpicSprintAppvalData[ieR-1])));
    }
  }
  if(EpicSprintArr_eachEpic!=0){

    var Rowstend =[]
        var SRow= 0;
        var ERow= 0;
        var rowcount =0;
        var flag="No"
        var length =0;
        var lenarr =[];
        var strlengthAppName =0;
        var strlengthDisc =0;

for (let i = 0; i < EpicSprintArr_eachEpic.length; i++) {
  rowcount = rowcount + 1

   var str = JSON.stringify(EpicSprintArr_eachEpic[i]['Reason_Not_Green']);
  lenarr.push(str.length)

   var str = JSON.stringify(EpicSprintArr_eachEpic[i]['goto_Green']);
  lenarr.push(str.length)
    
  
   var str = JSON.stringify(EpicSprintArr_eachEpic[i]['Remarks']);
   lenarr.push(str.length)

   length=length+arraySort(lenarr)[lenarr.length-1]
   lenarr=[];

   var str = JSON.stringify(EpicSprintArr_eachEpic[i]['AppName']);  
   
 // App Name 15 ,Discription 20, 
 if (length > (Math.abs(Math.round(str.length/15))*20)){
  strlengthDisc=strlengthDisc+length
} else{
  strlengthDisc=strlengthDisc+(Math.abs(Math.round(str.length/15))*20)
}
 
if (str.length > (Math.abs(Math.round(length/20))*15)){
  strlengthAppName=strlengthAppName+str.length  
} else{
  strlengthAppName=strlengthAppName+(Math.abs(Math.round(length/20))*15)
 }

  if (flag = 'No') {
      if (strlengthDisc > 500 || strlengthAppName > 200 || rowcount === 11) {
          flag = 'Yes'
          if (rowcount > 1) { 
            ERow = i - 1
            }else{
              ERow = i
            }
      }
  }

  if (flag === 'Yes') {
      Rowstend.push({
          "Row_S": SRow,
          "Row_E": ERow
      })
      SRow = ERow + 1
      if (rowcount > 1) {  
          i = i - 1
      }      
      rowcount = 0
      length=0
       strlengthAppName =0;
         strlengthDisc =0;
      flag = 'No'
  }

  if ((i + 1 === EpicSprintArr_eachEpic.length) && (ERow < EpicSprintArr_eachEpic.length) && (SRow < EpicSprintArr_eachEpic.length)) {
        Rowstend.push({
          "Row_S": SRow,
          "Row_E": EpicSprintArr_eachEpic.length - 1
      })
  }
}

for( let inum=0; inum< Rowstend.length; inum++){

    var slidespr = pptx.addNewSlide();   
    EpicMastertemplate(pptx, slidespr, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
    slidespr.addText('Schedule – Scope wise', {fontSize:12, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
    var rows = [];
    var colW=[0.5,1.0,1.0,0.7,0.7,0.7,0.7,1.3,1.3,1.3]
    var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
    rows.push([
    { text:'Sprint' ,options:options},
    { text:'Scope' ,options:options},
    { text:'Transition RAG' ,options:options},
    { text:'Planned Start Date' ,options:options},
    { text:'Planned End Date' ,options:options},
    { text:'Actual Start Date' ,options:options},
    { text:'Actual End Date' ,options:options},
    { text:'Reason for not green' ,options:options},
    { text:'Go to Green Plan' ,options:options},
    { text:'Remarks' ,options:options},
    ]); 

    for( let is=Rowstend[inum]['Row_S']+1; is<= Rowstend[inum]['Row_E']+1; is++){
      var dtast = moment(EpicSprintArr_eachEpic[is-1]["Actual_Start_Date"]);
      actualstartDate1 = moment([dtast.year(), dtast.month(), dtast.date()]).format("DD-MMM-YYYY");
      var dtaed = moment(EpicSprintArr_eachEpic[is-1]["Actual_End_Date"]);
      actualEndDate1 = moment([dtaed.year(), dtaed.month(), dtaed.date()]).format("DD-MMM-YYYY");
      if(actualstartDate1==='Invalid date'){actualstartDate1=''}
      if(actualEndDate1==='Invalid date'){actualEndDate1=''}
      dt_Report = new Date();
      if(EpicSprintArr_eachEpic[is-1]["Replan_Start_Date"] !== null){
          dt_ReportPlanStDT = new Date(moment(EpicSprintArr_eachEpic[is-1]["Replan_Start_Date"]).format("MM-DD-YY"));
      }else{
        if(EpicSprintArr_eachEpic[is-1]["Plan_Start_Date"] !== null){
           dt_ReportPlanStDT = new Date(moment(EpicSprintArr_eachEpic[is-1]["Plan_Start_Date"]).format("MM-DD-YY"));
        }else{
           dt_ReportPlanStDT = '';
        }
      }  
      if(EpicSprintArr_eachEpic[is-1]["RePlan_End_Date"] !== null){
           dt_ReportPlanEndDT = new Date(moment(EpicSprintArr_eachEpic[is-1]["RePlan_End_Date"]).format("MM-DD-YY"));
      }else{
        if(EpicSprintArr_eachEpic[is-1]["Plan_End_Date"] !== null){
          dt_ReportPlanEndDT = new Date(moment(EpicSprintArr_eachEpic[is-1]["Plan_End_Date"]).format("MM-DD-YY"));
        }else{
          dt_ReportPlanEndDT = '';
        }
      }  
      var AppRAG = '';   
      if((dt_ReportPlanStDT!== '') && (dt_ReportPlanEndDT!== '')){    
        if(((EpicSprintArr_eachEpic[is-1]["status"] === 'Not Started')) 
        && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))){
              AppRAG = RAGRed;      
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'Behind Schedule') 
        && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))){  
              AppRAG = RAGRed;    
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'Behind Schedule')){
          AppRAG = RAGAmber; 
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'On Schedule')){
          AppRAG = RAGGreen; 
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'Completed')){  
          AppRAG = RAGBlue;
        }else{
          AppRAG = RAGGray;
        }
      }else{
        if((EpicSprintArr_eachEpic[is-1]["status"] === 'Behind Schedule')){
          AppRAG = RAGAmber; 
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'On Schedule')){
          AppRAG = RAGGreen; 
        }else if((EpicSprintArr_eachEpic[is-1]["status"] === 'Completed')){
          AppRAG = RAGBlue; 
        }else{
          AppRAG = RAGGray;
        }
      }
      var PlanStDt = moment(dt_ReportPlanStDT).format("DD-MMM-YYYY");
      var planEndDt = moment(dt_ReportPlanEndDT).format("DD-MMM-YYYY");
      if(PlanStDt==='Invalid date'){PlanStDt=''};
      if(planEndDt==='Invalid date'){planEndDt=''};
      // ,options:{fill:AppRAG}
      var ragstatus='';
      var ReaNotGreen='';
      var GoToGreen='';
      var RAGRemarks='';
      if(EpicSprintArr_eachEpic[is-1]["status"]===null|| EpicSprintArr_eachEpic[is-1]["status"]==='null'){
        ragstatus='';
      }else{
        ragstatus=EpicSprintArr_eachEpic[is-1]["status"];
      }
      if(EpicSprintArr_eachEpic[is-1]["Reason_Not_Green"]===null|| EpicSprintArr_eachEpic[is-1]["Reason_Not_Green"]==='null'){
        ReaNotGreen='';
      }else{
        ReaNotGreen=EpicSprintArr_eachEpic[is-1]["Reason_Not_Green"];
      }
      if(EpicSprintArr_eachEpic[is-1]["goto_Green"]===null|| EpicSprintArr_eachEpic[is-1]["goto_Green"]==='null'){
        GoToGreen='';
      }else{
        GoToGreen=EpicSprintArr_eachEpic[is-1]["goto_Green"];
      }
      if(EpicSprintArr_eachEpic[is-1]["Remarks"]===null|| EpicSprintArr_eachEpic[is-1]["Remarks"]==='null'){
        RAGRemarks='';
      }else{
        RAGRemarks=EpicSprintArr_eachEpic[is-1]["Remarks"];
      }
        rows.push([
          { text:EpicSprintArr_eachEpic[is-1]["sprintName"]},
          { text:EpicSprintArr_eachEpic[is-1]["AppName"]},
          { text:ragstatus,options:{fill:AppRAG,color:'FFFFFF'}},
          { text:PlanStDt},
          { text:planEndDt},
          { text:actualstartDate1},
          { text:actualEndDate1},
          { text:ReaNotGreen},
          { text:GoToGreen},
          { text:RAGRemarks},
          ]);

        }
      
        slidespr.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:8,fontFace:'Calibri',x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );  
  }
}else{
  var slidespr = pptx.addNewSlide();   
  EpicMastertemplate(pptx, slidespr, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
  slidespr.addText('Schedule – Scope wise', {fontSize:12, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.5,0.8,0.8,0.9,0.9,0.9,0.9,1.3,1.3,1.3]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'Sprint' ,options:options},
  { text:'Scope' ,options:options},
  { text:'Transition RAG' ,options:options},
  { text:'Start Date' ,options:options},
  { text:'End Date' ,options:options},
  { text:'Actual Start Date' ,options:options},
  { text:'Actual End Date' ,options:options},
  { text:'Reason for not green' ,options:options},
  { text:'Go to Green Plan' ,options:options},
  { text:'Remarks' ,options:options},
  ]); 
  rows.push([{ text:"No Scope for Epic" ,options:{colspan:filedarr.length}}])
  slidespr.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
}else{
    var slidespr = pptx.addNewSlide();   
    EpicMastertemplate(pptx, slidespr, todays_date, AccountName, TRantionTeamList,OverAllRAG,EpicvalData[i-1]["epicName"])
    slidespr.addText('Schedule – Scope wise', {fontSize:12, bold:true, w:8,x:0.1, y:1.02, color:'660099'});
    var rows = [];
    var colW=[0.5,0.8,0.8,0.9,0.9,0.9,0.9,1.3,1.3,1.3]
    var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
    rows.push([
    { text:'Sprint' ,options:options},
    { text:'Scope' ,options:options},
    { text:'Transition RAG' ,options:options},
    { text:'Start Date' ,options:options},
    { text:'End Date' ,options:options},
    { text:'Actual Start Date' ,options:options},
    { text:'Actual End Date' ,options:options},
    { text:'Reason for not green' ,options:options},
    { text:'Go to Green Plan' ,options:options},
    { text:'Remarks' ,options:options},
    ]); 
    rows.push([{ text:"No Scope for Epic" ,options:{colspan:filedarr.length}}])
    slidespr.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
  //Slide 3 End
//Generating Risk Slide
filedarr1 =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences','Probability']
if(EpicRisk_valData!==0){
  var EpicRiskArr_eachEpic=[];
  for( let ieR=1; ieR< EpicRisk_valData.length+1; ieR++){
    if(EpicvalData[i-1]["epicName"] === EpicRisk_valData[ieR-1]["epicName"]){
      EpicRiskArr_eachEpic.push(JSON.parse(JSON.stringify(EpicRisk_valData[ieR-1])));
    }
  }
  if(EpicRiskArr_eachEpic!=0){
    var Rowstend =[]
    var SRow= 0;
    var ERow= 0;
    var rowcount =0;
    var flag="No"
    var strlengthLevel =0;
       var strlengthDesc =0;

for (let i = 0; i < EpicRiskArr_eachEpic.length; i++) {
rowcount = rowcount + 1

var str = JSON.stringify(EpicRiskArr_eachEpic[i]['Description']); 
// strlengthDesc=strlengthDesc+str.length

var level = EpicRiskArr_eachEpic[i]['epicName'];
      if (EpicRiskArr_eachEpic[i]['sprintName'] !== null) {
          level = level + '-' + EpicRiskArr_eachEpic[i]['sprintName']
      }
      if (EpicRiskArr_eachEpic[i]['AppName'] !== null) {
          level = level + '-' + EpicRiskArr_eachEpic[i]['AppName']
      }
      if (level === null) {
          level = 'Overall Level'
      }
      //strlengthLevel = strlengthLevel + level.length

       // App Name 17 ,Discription 45

       if (level.length > (Math.abs(Math.round(str.length/45)))*17){
        strlengthLevel = strlengthLevel + level.length
      } else{
        strlengthLevel = strlengthLevel + (Math.abs(Math.round(level.length/45)))*17
      }
       
      if (str.length   > (Math.abs(Math.round(level.length/17)))*45){
        strlengthDesc=strlengthDesc+str.length  
      } else{
        strlengthDesc=strlengthDesc+(Math.abs(Math.round(level.length/17))*45)
       }
 
       

if (flag = 'No') {
  if (strlengthDesc > 650 || strlengthLevel > 250 || rowcount === 11) {
      flag = 'Yes'
      if (rowcount > 1) { 
        ERow = i - 1
        }else{
          ERow = i
        }
  }
}

if (flag === 'Yes') {
  Rowstend.push({
      "Row_S": SRow,
      "Row_E": ERow
  })
  SRow = ERow + 1
  if (rowcount > 1) {  
      i = i - 1
  }      
  rowcount = 0
  strlengthLevel =0;
  strlengthDesc =0;
  flag = 'No'
}

if ((i + 1 === EpicRiskArr_eachEpic.length) && (ERow < EpicRiskArr_eachEpic.length) && (SRow < EpicRiskArr_eachEpic.length)) {
    Rowstend.push({
      "Row_S": SRow,
      "Row_E": EpicRiskArr_eachEpic.length - 1
  })
}
}

for( let inum=0; inum< Rowstend.length; inum++){
    slide4 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide4, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide4.addText('Epic Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.35,0.83,1.7,0.82,0.87,1.4,0.9,0.9,0.9,0.9]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Risk type' ,options:options},
    { text:'Impact' ,options:options},
    { text:'Probability' ,options:options},
    ]); 

    dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var RiskCol = '';
   
    for( let ir=Rowstend[inum]['Row_S']+1; ir<= Rowstend[inum]['Row_E']+1; ir++){
  rowval =[];
  for( let j=1; j< filedarr1.length+1; j++){
  if (j=== 1){
    rowval.push( { text: ir ,options:{align:'c'}})
  } else if( filedarr1[j-1] === 'ReportingLevel')  {
    var level =EpicRiskArr_eachEpic[ir-1]['epicName'];
    if (EpicRiskArr_eachEpic[ir-1]['sprintName'] !== null ){
      level=level+'-'+EpicRiskArr_eachEpic[ir-1]['sprintName']
    }
    if (EpicRiskArr_eachEpic[ir-1]['AppName'] !== null){
      level=level+'-'+EpicRiskArr_eachEpic[ir-1]['AppName']
    }                 
        if (level === null){
      rowval.push({ text:'Overall Level' })
    } else {
      rowval.push({ text:level })
    }                  
  } else if(filedarr1[j-1] === 'TargetDate'){
      var dt = moment(EpicRiskArr_eachEpic[ir-1]['TargetDate']);
      targetDate = moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
      if(targetDate==='Invalid date'){targetDate=''} 
      rowval.push({text:targetDate })

    }else if(filedarr1[j-1] === 'Status'){

      var dt=moment(EpicRiskArr_eachEpic[ir-1]['TargetDate']);  
      var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
      dt_targer = new Date(TargetDt_Com);
                      
        if( ((EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '1-Low') ||
         (EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '2-Medium')) &&
         (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

          // Green
          RiskCol = RAGGreen;

        }else  if ((EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
           (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
         // Red
         RiskCol = RAGRed;
          
        }else  if ((EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
           (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
            
          //Amber
          RiskCol = RAGAmber;
            
        }else  if ((EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
            (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
               
          // Green
          RiskCol = RAGGreen;
             
        } else {    
          if (EpicRiskArr_eachEpic[ir-1]['ImpactConsequences'] === '')  {
              if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                // Green
                RiskCol = RAGGreen;
             
              }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                //red
                RiskCol = RAGRed;
              } 
          }else {
                //Red
                RiskCol = RAGRed;
          }                          
        }
        rowval.push({ text:EpicRiskArr_eachEpic[ir-1][filedarr1[j-1]],options:{fill:RiskCol}})
  
  }else {
  rowval.push({ text:EpicRiskArr_eachEpic[ir-1][filedarr1[j-1]] })
  } 
  }
rows.push(rowval)
} 
    slide4.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:8,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
}else{
  slide4 =pptx.addNewSlide();
  EpicMastertemplate(pptx, slide4, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
  slide4.addText('Epic Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
var rows = [];
var colW=[0.35,0.83,1.7,0.82,0.87,1.4,0.9,0.9,0.9,0.9]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Risk type' ,options:options},
  { text:'Impact' ,options:options},
  { text:'Probability' ,options:options},
  ]); 
  rows.push([{ text:"No Risks for Epic" ,options:{colspan:filedarr1.length}}])
  slide4.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
}else{
    slide4 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide4, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide4.addText('Epic Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.35,0.83,1.7,0.82,0.87,1.4,0.9,0.9,0.9,0.9]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Risk type' ,options:options},
    { text:'Impact' ,options:options},
    { text:'Probability' ,options:options},
    ]); 
    rows.push([{ text:"No Risks for Epic" ,options:{colspan:filedarr1.length}}])
    slide4.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
 //Risk Slide End
 
 //Generating Action Slide
filedarr2 =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType']
if(EpicAction_valData!=0){
  var EpicActionArr_eachEpic=[];
      for( let ieR=1; ieR< EpicAction_valData.length+1; ieR++){
        if(EpicvalData[i-1]["epicName"] === EpicAction_valData[ieR-1]["epicName"]){
          EpicActionArr_eachEpic.push(JSON.parse(JSON.stringify(EpicAction_valData[ieR-1])));
        }
      }
if(EpicActionArr_eachEpic!=0){
  var Rowstend =[]
  var SRow= 0;
  var ERow= 0;
  var rowcount =0;
  var flag="No"
  var strlengthLevel =0;
  var strlengthDesc =0;

for (let i = 0; i < EpicActionArr_eachEpic.length; i++) {
rowcount = rowcount + 1

var str = JSON.stringify(EpicActionArr_eachEpic[i]['Description']); 
// strlengthDesc=strlengthDesc+str.length

var level = EpicActionArr_eachEpic[i]['epicName'];
    if (EpicActionArr_eachEpic[i]['sprintName'] !== null) {
        level = level + '-' + EpicActionArr_eachEpic[i]['sprintName']
    }
    if (EpicActionArr_eachEpic[i]['AppName'] !== null) {
        level = level + '-' + EpicActionArr_eachEpic[i]['AppName']
    }
    if (level === null) {
        level = 'Overall Level'
    }
    // strlengthLevel = strlengthLevel + level.length

    // App Name 24 ,Discription 55

    if (level.length > (Math.abs(Math.round(str.length/55)))*24){
      strlengthLevel = strlengthLevel + level.length
    } else{
      strlengthLevel = strlengthLevel + (Math.abs(Math.round(level.length/55)))*24
    }
     
    if (str.length   > (Math.abs(Math.round(level.length/24)))*55){
      strlengthDesc=strlengthDesc+str.length  
    } else{
      strlengthDesc=strlengthDesc+(Math.abs(Math.round(level.length/24))*55)
     }


if (flag = 'No') {
if (strlengthDesc > 950 || strlengthLevel > 450 || rowcount === 11) {
    flag = 'Yes'
    if (rowcount > 1) { 
    ERow = i - 1
    }else{
      ERow = i
    }
}
}

if (flag === 'Yes') {
Rowstend.push({
    "Row_S": SRow,
    "Row_E": ERow
})
SRow = ERow + 1
if (rowcount > 1) {
    i = i - 1
}      
rowcount = 0
strlengthLevel =0;
strlengthDesc =0;
flag = 'No'
}
if ((i + 1 === EpicActionArr_eachEpic.length) && (ERow < EpicActionArr_eachEpic.length) && (SRow < EpicActionArr_eachEpic.length)) {
  Rowstend.push({
    "Row_S": SRow,
    "Row_E": EpicActionArr_eachEpic.length - 1
})
}
}
for( let inum=0; inum< Rowstend.length; inum++){
 slide5 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide5, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide5.addText('Epic Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.2,2.1,1.0,0.94,1.5,0.97,1.06]
  //var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Action Type' ,options:options},
      ]);

      dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var ActionCol = '';

      for( let ir=Rowstend[inum]['Row_S']+1; ir<= Rowstend[inum]['Row_E']+1; ir++){
      rowval =[];
      for( let j=1; j< filedarr2.length+1; j++){
      if (j=== 1){
        rowval.push( { text: ir ,options:{align:'c'}})
      } else if( filedarr2[j-1] === 'ReportingLevel')  {
        var level =EpicActionArr_eachEpic[ir-1]['epicName'];
        if (EpicActionArr_eachEpic[ir-1]['sprintName'] !== null ){
          level=level+'-'+EpicActionArr_eachEpic[ir-1]['sprintName']
        }
        if (EpicActionArr_eachEpic[ir-1]['AppName'] !== null){
          level=level+'-'+EpicActionArr_eachEpic[ir-1]['AppName']
        }                 
            if (level === null){
          rowval.push({ text:'Overall Level' })
        } else {
          rowval.push({ text:level })
        }                  
      } else if(filedarr2[j-1] === 'TargetDate'){
          var dt = moment(EpicActionArr_eachEpic[ir-1]['TargetDate']);
          targetDate = moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
          if(targetDate==='Invalid date'){targetDate=''}
          rowval.push({text:targetDate })
        }else if(filedarr2[j-1] === 'Status'){

          var dt=moment(EpicActionArr_eachEpic[ir-1]['TargetDate']);  
          var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
          dt_targer = new Date(TargetDt_Com);
                          
            if( ((EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '1-Low') ||
             (EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '2-Medium')) &&
             (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

              // Green
              ActionCol = RAGGreen;
    
            }else  if ((EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
             // Red
             ActionCol = RAGRed;
              
            }else  if ((EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                
              //Amber
              ActionCol = RAGAmber;
                
            }else  if ((EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                   
              // Green
              ActionCol = RAGGreen;
                 
            } else {    
              if (EpicActionArr_eachEpic[ir-1]['ImpactConsequences'] === '')  {
                  if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                    // Green
                    ActionCol = RAGGreen;
                 
                  }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                    //red
                    ActionCol = RAGRed;
                  } 
              }else {
                    //Red
                    ActionCol = RAGRed;
              }                          
            }
            rowval.push({ text:EpicActionArr_eachEpic[ir-1][filedarr2[j-1]],options:{fill:ActionCol}})
      }else {
      rowval.push({ text:EpicActionArr_eachEpic[ir-1][filedarr2[j-1]] })
      } 
      }
    rows.push(rowval)
    } 
    slide5.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:8,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
}else{
  slide5 =pptx.addNewSlide();
  EpicMastertemplate(pptx, slide5, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
  slide5.addText('Epic Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
var rows = [];
var colW=[0.38,1.2,2.1,1.0,0.94,1.5,0.97,1.06]
//var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
 { text:'#' ,options:options},
 { text:'Level' ,options:options},
 { text:'Description' ,options:options},
 { text:'Status' ,options:options},
 { text:'Priority' ,options:options},
 { text:'Owner' ,options:options},
 { text:'Target Date' ,options:options},
 { text:'Action Type' ,options:options},
    ]);
    rows.push([{ text:"No Actions for Epic" ,options:{colspan:filedarr2.length}}])
  slide5.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );

}
}else{
    slide5 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide5, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide5.addText('Epic Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.2,2.1,1.0,0.94,1.5,0.97,1.06]
  //var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Action Type' ,options:options},
      ]);
      rows.push([{ text:"No Actions for Epic" ,options:{colspan:filedarr2.length}}])
    slide5.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
 
  }//Action Slide End
 //Generating Issue Slide
filedarr3 =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ShowStopper']
if(EpicIssue_valData!=0){
  var EpicIssueArr_eachEpic=[];
  for( let ieR=1; ieR< EpicIssue_valData.length+1; ieR++){
    if(EpicvalData[i-1]["epicName"] === EpicIssue_valData[ieR-1]["epicName"]){
      EpicIssueArr_eachEpic.push(JSON.parse(JSON.stringify(EpicIssue_valData[ieR-1])));
    }
  }
  if(EpicIssueArr_eachEpic!=0){
    var Rowstend =[]
    var SRow= 0;
    var ERow= 0;
    var rowcount =0;
    var flag="No"
    var strlengthLevel =0;
    var strlengthDesc =0;

for (let i = 0; i < EpicIssueArr_eachEpic.length; i++) {
rowcount = rowcount + 1

var str = JSON.stringify(EpicIssueArr_eachEpic[i]['Description']); 
//strlengthDesc=strlengthDesc+str.length

var level = EpicIssueArr_eachEpic[i]['epicName'];
      if (EpicIssueArr_eachEpic[i]['sprintName'] !== null) {
          level = level + '-' + EpicIssueArr_eachEpic[i]['sprintName']
      }
      if (EpicIssueArr_eachEpic[i]['AppName'] !== null) {
          level = level + '-' + EpicIssueArr_eachEpic[i]['AppName']
      }
      if (level === null) {
          level = 'Overall Level'
      }
   //   strlengthLevel = strlengthLevel + level.length

   // App Name 18,Discription 30

   if (level.length > (Math.abs(Math.round(str.length/30)))*18){
    strlengthLevel = strlengthLevel + level.length
  } else{
    strlengthLevel = strlengthLevel + (Math.abs(Math.round(level.length/30)))*18
  }
   
  if (str.length   > (Math.abs(Math.round(level.length/18)))*30){
    strlengthDesc=strlengthDesc+str.length  
  } else{
    strlengthDesc=strlengthDesc+(Math.abs(Math.round(level.length/18))*30)
   }

if (flag = 'No') {
  if (strlengthDesc > 730 || strlengthLevel > 300 || rowcount === 11) {
      flag = 'Yes'
      if (rowcount > 1) { 
        ERow = i - 1
        }else{
          ERow = i
        }
  }
}

if (flag === 'Yes') {
  Rowstend.push({
      "Row_S": SRow,
      "Row_E": ERow
  })
  SRow = ERow + 1
  if (rowcount > 1) {  
      i = i - 1
  }      
  rowcount = 0
  strlengthLevel =0;
  strlengthDesc =0;
  flag = 'No'
}

if ((i + 1 === EpicIssueArr_eachEpic.length) && (ERow < EpicIssueArr_eachEpic.length) && (SRow < EpicIssueArr_eachEpic.length)) {
    Rowstend.push({
      "Row_S": SRow,
      "Row_E": EpicIssueArr_eachEpic.length - 1
  })
}
}

for( let inum=0; inum< Rowstend.length; inum++){

 slide6 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide6, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide6.addText('Epic Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Issue Type' ,options:options},
  { text:'Show Stopper' ,options:options},
  ]);

  dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var IssueCol = '';
    
  for( let ir=Rowstend[inum]['Row_S']+1; ir<= Rowstend[inum]['Row_E']+1; ir++){
      rowval =[];
      for( let j=1; j< filedarr3.length+1; j++){
      if (j=== 1){
        rowval.push( { text: ir ,options:{align:'c'}})
      } else if( filedarr3[j-1] === 'ReportingLevel')  {
        var level =EpicIssueArr_eachEpic[ir-1]['epicName'];
        if (EpicIssueArr_eachEpic[ir-1]['sprintName'] !== null ){
          level=level+'-'+EpicIssueArr_eachEpic[ir-1]['sprintName']
        }
        if (EpicIssueArr_eachEpic[ir-1]['AppName'] !== null){
          level=level+'-'+EpicIssueArr_eachEpic[ir-1]['AppName']
        }                 
            if (level === null){
          rowval.push({ text:'Overall Level' })
        } else {
          rowval.push({ text:level })
        }                  
      } else if(filedarr3[j-1] === 'TargetDate'){
          var dt = moment(EpicIssueArr_eachEpic[ir-1]['TargetDate']);
          targetDate = moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
          if(targetDate==='Invalid date'){targetDate=''}
          rowval.push({text:targetDate })
        }else if(filedarr3[j-1] === 'Status'){

          var dt=moment(EpicIssueArr_eachEpic[ir-1]['TargetDate']);  
          var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
          dt_targer = new Date(TargetDt_Com);
                          
            if( ((EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '1-Low') ||
             (EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '2-Medium')) &&
             (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

              // Green
              IssueCol = RAGGreen;
    
            }else  if ((EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
             // Red
             IssueCol = RAGRed;
              
            }else  if ((EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                
              //Amber
              IssueCol = RAGAmber;
                
            }else  if ((EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                   
              // Green
              IssueCol = RAGGreen;
                 
            } else {    
              if (EpicIssueArr_eachEpic[ir-1]['ImpactConsequences'] === '')  {
                  if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                    // Green
                    IssueCol = RAGGreen;
                 
                  }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                    //red
                    IssueCol = RAGRed;
                  } 
              }else {
                    //Red
                    IssueCol = RAGRed;
              }                          
            }
            rowval.push({ text:EpicIssueArr_eachEpic[ir-1][filedarr3[j-1]],options:{fill:IssueCol}})    
      }else {
      rowval.push({ text:EpicIssueArr_eachEpic[ir-1][filedarr3[j-1]] })
      } 
      }
    rows.push(rowval)
    }
    slide6.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:8,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
}else{
  slide6 =pptx.addNewSlide();
  EpicMastertemplate(pptx, slide6, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
  slide6.addText('Epic Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
var rows = [];
var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
{ text:'#' ,options:options},
{ text:'Level' ,options:options},
{ text:'Description' ,options:options},
{ text:'Status' ,options:options},
{ text:'Priority' ,options:options},
{ text:'Owner' ,options:options},
{ text:'Target Date' ,options:options},
{ text:'Issue Type' ,options:options},
{ text:'Show Stopper' ,options:options},
]);
rows.push([{ text:"No Issues for Epic",options:{colspan:filedarr3.length}}])
slide6.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
}else{
    slide6 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide6, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide6.addText('Epic Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Issue Type' ,options:options},
  { text:'Show Stopper' ,options:options},
  ]);
  rows.push([{ text:"No Issues for Epic",options:{colspan:filedarr3.length}}])
  slide6.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
 }
 //Issue Slide End
 //Generating Dependency Slide
filedarr4 =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences']
if(EpicDep_valData!=0){
  var EpicDepArr_eachEpic=[];
  for( let ieR=1; ieR< EpicDep_valData.length+1; ieR++){
    if(EpicvalData[i-1]["epicName"] === EpicDep_valData[ieR-1]["epicName"]){
      EpicDepArr_eachEpic.push(JSON.parse(JSON.stringify(EpicDep_valData[ieR-1])));
    }
  }
  if(EpicDepArr_eachEpic!=0){
    var Rowstend =[]
    var SRow= 0;
    var ERow= 0;
    var rowcount =0;
    var flag="No"
    var strlengthLevel =0;
    var strlengthDesc =0;

for (let i = 0; i < EpicDepArr_eachEpic.length; i++) {
rowcount = rowcount + 1

var str = JSON.stringify(EpicDepArr_eachEpic[i]['Description']); 
//strlengthDesc=strlengthDesc+str.length

var level = EpicDepArr_eachEpic[i]['epicName'];
      if (EpicDepArr_eachEpic[i]['sprintName'] !== null) {
          level = level + '-' + EpicDepArr_eachEpic[i]['sprintName']
      }
      if (EpicDepArr_eachEpic[i]['AppName'] !== null) {
          level = level + '-' + EpicDepArr_eachEpic[i]['AppName']
      }
      if (level === null) {
          level = 'Overall Level'
      }
  //    strlengthLevel = strlengthLevel + level.length

  // App Name 17,Discription 32

  if (level.length > (Math.abs(Math.round(str.length/32)))*17){
    strlengthLevel = strlengthLevel + level.length
  } else{
    strlengthLevel = strlengthLevel + (Math.abs(Math.round(level.length/32)))*17
  }
   
  if (str.length   > (Math.abs(Math.round(level.length/17)))*32){
    strlengthDesc=strlengthDesc+str.length  
  } else{
    strlengthDesc=strlengthDesc+(Math.abs(Math.round(level.length/17))*32)
   }

if (flag = 'No') {
  if (strlengthDesc > 720 || strlengthLevel > 300 || rowcount === 11) {
      flag = 'Yes'
      if (rowcount > 1) { 
        ERow = i - 1
        }else{
          ERow = i
        }
  }
}

if (flag === 'Yes') {
  Rowstend.push({
      "Row_S": SRow,
      "Row_E": ERow
  })
  SRow = ERow + 1
  if (rowcount > 1) {  
      i = i - 1
  }      
  rowcount = 0
  strlengthLevel =0;
  strlengthDesc =0;
  flag = 'No'
}

if ((i + 1 === EpicDepArr_eachEpic.length) && (ERow < EpicDepArr_eachEpic.length) && (SRow < EpicDepArr_eachEpic.length)) {
    Rowstend.push({
      "Row_S": SRow,
      "Row_E": EpicDepArr_eachEpic.length - 1
  })
}
}

for( let inum=0; inum< Rowstend.length; inum++){
 slide7 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide7, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide7.addText('Epic Dependency', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Dependency Type' ,options:options},
  { text:'Impact' ,options:options},
  ]);

  dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var DependencyCol = '';

  for( let ir=Rowstend[inum]['Row_S']+1; ir<= Rowstend[inum]['Row_E']+1; ir++){
    rowval =[];
    for( let j=1; j< filedarr4.length+1; j++){
    if (j=== 1){
      rowval.push( { text: ir ,options:{align:'c'}})
    } else if( filedarr4[j-1] === 'ReportingLevel')  {
      var level =EpicDepArr_eachEpic[ir-1]['epicName'];
      if (EpicDepArr_eachEpic[ir-1]['sprintName'] !== null ){
        level=level+'-'+EpicDepArr_eachEpic[ir-1]['sprintName']
      }
      if (EpicDepArr_eachEpic[ir-1]['AppName'] !== null){
        level=level+'-'+EpicDepArr_eachEpic[ir-1]['AppName']
      }                 
          if (level === null){
        rowval.push({ text:'Overall Level' })
      } else {
        rowval.push({ text:level })
      }                  
    } else if(filedarr4[j-1] === 'TargetDate'){
        var dt = moment(EpicDepArr_eachEpic[ir-1]['TargetDate']);
        targetDate = moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
        if(targetDate==='Invalid date'){targetDate=''}
        rowval.push({text:targetDate })
      }else if(filedarr4[j-1] === 'Status'){

        var dt=moment(EpicDepArr_eachEpic[ir-1]['TargetDate']);  
        var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
        dt_targer = new Date(TargetDt_Com);
                        
          if( ((EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '1-Low') ||
           (EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '2-Medium')) &&
           (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

            // Green
            DependencyCol = RAGGreen;
  
          }else  if ((EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
             (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
           // Red
           DependencyCol = RAGRed;
            
          }else  if ((EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
             (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
              
            //Amber
            DependencyCol = RAGAmber;
              
          }else  if ((EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '3-High') &&
              (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                 
            // Green
            DependencyCol = RAGGreen;
               
          } else {    
            if (EpicDepArr_eachEpic[ir-1]['ImpactConsequences'] === '')  {
                if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                  // Green
                  DependencyCol = RAGGreen;
               
                }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                  //red
                  DependencyCol = RAGRed;
                } 
            }else {
                  //Red
                  DependencyCol = RAGRed;
            }                          
          }
          rowval.push({ text:EpicDepArr_eachEpic[ir-1][filedarr4[j-1]],options:{fill:DependencyCol}})

    }else {
    rowval.push({ text:EpicDepArr_eachEpic[ir-1][filedarr4[j-1]] })
    } 
    }
  rows.push(rowval)
  } 
    slide7.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:8,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
}else{
    slide7 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide7, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide7.addText('Epic Dependency', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Dependency Type' ,options:options},
  { text:'Impact' ,options:options},
  ]);
  rows.push([{ text:"No Dependencies for Epic" ,options:{colspan:filedarr4.length}}])
  slide7.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
}else{
    slide7 =pptx.addNewSlide();
    EpicMastertemplate(pptx, slide7, todays_date, AccountName, TRantionTeamList, OverAllRAG,EpicvalData[i-1]["epicName"])
    slide7.addText('Epic Dependency', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Description' ,options:options},
  { text:'Status' ,options:options},
  { text:'Priority' ,options:options},
  { text:'Owner' ,options:options},
  { text:'Target Date' ,options:options},
  { text:'Dependency Type' ,options:options},
  { text:'Impact' ,options:options},
  ]);
  rows.push([{ text:"No Dependencies for Epic" ,options:{colspan:filedarr4.length}}])
  slide7.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
 //Dependency Slide End

  }
 pptx.save(filename);
 }, 4000) 
 setTimeout(()=>{
      filename = "EpicWiseStatusReport-"+Username.replace(/\s/g,'');
     filePath = __dirname+'\\'+filename+'.pptx';
     try {
      //  console.log('remove2' +filePath)
      fs.unlinkSync(filePath)
      //file removed
    } catch(err) {
      console.error(err)
    }
     }, 20000) 
    setTimeout(()=>{  
      filename = "EpicWiseStatusReport-"+Username.replace(/\s/g,'');
      filePath = __dirname+'\\'+filename+'.pptx';
      return res.sendFile(filePath);
    }, 12000)  
 });
 //Epicwise report header
  function EpicMastertemplate(pptx, commslide, todays_date, AccountName, TRantionTeamList, OverAllRAG,epicName){
  var imagepath =__dirname+'\\src\\assets\\IBM white.png';
  commslide.addImage({ path:imagepath, x:9, y:0.03, w:0.66, h:0.34 })
 
  var rows = [];
  var colW=[2.1, 0.8, 0.8, 0.8]
  rows.push([
  { text:'Epic & Sprint Status Legend'},
  { text:'Red', options:{fill:'FF0000',color:'FFFFFF'}},
  { text:'Amber', options:{fill:'ffbf00'}},
  { text:'Green', options:{fill:'008000',color:'FFFFFF'}},
  ]);
 
  commslide.addTable( rows, {autoPage:false,colW:colW,fontSize:7,fontFace:'Calibri', x:4.55, y:0.35,w:5.5, h:0.2} ); 
  commslide.addText('Project: ', {fontSize:12, bold:true, w:9,x:0.1, y:0.1, color:'00B0F0'});
  commslide.addText(AccountName, {fontSize:12, bold:true, w:9,x:1.1, y:0.1, color:'660099'});

 var rows = [];
 var colW=[1.3, 0.8, 0.8, 0.8, 0.8]
 rows.push([
 { text:'Application Legend',options:{wrapText: true}},
 { text:'Complete', options:{fill:'0070C0',color:'FFFFFF',wrapText: true}},
 { text:'Not Started', options:{fill:'FF0000',color:'FFFFFF',wrapText: true}}, 
 { text:'Behind Schedule', options:{fill:'ffbf00',wrapText: true}},
 { text:'On Schedule', options:{fill:'008000',color:'FFFFFF',wrapText: true}},
 ]);

 commslide.addTable( rows, {autoPage:false,colW:colW,fontSize:7,fontFace:'Calibri', x:4.55, y:0.55,w:5.5, h:0.2} );
  
  var rows = [];
  rowH =[0.15,0.15,0.15]
  colW = [1.0,3.0]
  //  top left bottom right
  let arrBorder = [{pt: '1'}, {pt: '0'}, {pt: '1'}, {pt: '1'}]
  let arrBorderT = [{pt: '1'}, {pt: '0'}, {pt: '0'}, {pt: '0'}]
  rows.push([
  { text:'Epic : ',options:{fontSize:9, color:'660099', border: {pt: '0'}}},
    { text:epicName,options:{fontSize:9, color:'660099',border: arrBorder}},
  ]);
  rows.push([
  { text:'Report Date : ',options:{fontSize:9, color:'660099', border: {pt: '0'}}},
    { text:todays_date,options:{fontSize:9, color:'660099',border: arrBorder}},
  ]);
  rows.push([
  { text:'Owner: ',options:{fontSize:9, color:'660099', border: {pt: '0'}}}, 
  { text:'' ,options:{fontSize:9, color:'660099',border: arrBorderT}},
  ]);
  
  commslide.addTable( rows, {rowH:rowH,colW:colW, x:0.2, y:0.35, w:4, h:0.7} );
  commslide.addText(TRantionTeamList.join(','),{valign:'Top',fontSize:8,x:1.1, y:0.81, h:0.64, w:6,color:'660099'});
 
  var rows = [];
  var colW=[0.8,0.8]
  var rowH=[0.3]
  rows.push([ { text:'Epic Status'},{ text:''}]);
  commslide.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:7.45, y:0.050} );
  commslide.addShape(pptx.shapes.OVAL,{ x:8.39, y:0.08, w:0.38, h:0.22, fill: OverAllRAG, line:'000000', lineSize:1  });
  
 } 
//***************Epic Wise Report End */




// Sprint level plan
app.get('/getexcelTrainee',(req,res)=>{
  ////console.log("test1")
  ////console.log(req.params)
  ////console.log(req.query)
})


app.post('/epicSave',(req,res)=>{
  var epicUNID = null;
  var epicName = req.body.epicName.trim(); 
  
  if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
    startDate='0000-00-00 00:00:00'; 
  }else{           
    var dt=moment(req.body.startDate);  
    startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
    endDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.endDate);  
    endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
    replanStartDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanStartDate);  
    replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
    replanEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanEndDate);  
    replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }  
  if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
    actualStartDate='0000-00-00 00:00:00';
  }else {
    var dt=moment(req.body.actualStartDate);  
    actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
    actualEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.actualEndDate);  
    actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  var createdBy = req.body.createdBy;
  var modifiedBy = req.body.modifiedBy;
  var dt=moment(new Date());
  var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var modifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var IntegrationID = req.body.IntegrationID;
  var Baselined = '0';
  var rag = req.body.rag;
  var Owner = req.body.Owner;
  var remarks = req.body.remarks;
  if ( rag  === 'Green'){
    var reason_for_not_green = '' ;
    var green_plan = '';
  }else{
      var reason_for_not_green = req.body.reason_for_not_green;
      var green_plan = req.body.go_to_green_plan;
  }

  queryduplicatecheckEpic = "select count(*) as cnt from epics where IntegrationID ='"+IntegrationID +"' and epicName='"+epicName+"'" ; 
  queryepicSave ="insert into epics values ("+epicUNID + ",'"+ epicName +"','"+startDate+"','"
  + endDate + "','"+ replanStartDate+ "','"+ replanEndDate+ "','"+ actualStartDate + "','"+ actualEndDate + "','"+ createdBy + "','"+ modifiedBy +"','"
  +createdDate+"','"+modifiedDate+"','"+IntegrationID+"','"+ Baselined +"','"+ rag +"','"+ Owner +"','"+ remarks +"','"+ reason_for_not_green +"','"+ green_plan +"')";
  
  //console.log(queryepicSave)
  pool.getConnection().then(conn => {  
    var result;
      //console.log(queryduplicatecheckEpic)
      conn.query(queryduplicatecheckEpic).then((queryduplicatecheckEpicResult) => {  
           result =queryduplicatecheckEpicResult[0].cnt; 
           //console.log(result)
           if (result === 0){
             //console.log("inside")
                  conn.query(queryepicSave).then((epicSave) => {
                  res.send({"save" : "success"} )       
                  conn.end();
            })
            .catch(err => {
                //handle error
                res.send({"save" : "Fail" })
                conn.end();
        })
          }else{
            //console.log("dup")
            res.send({"duplicate" : "success"} )
            conn.end();
          }

        })
        .catch(err => {
          //handle error
          res.send({"Fetch" : "Fail" })
          conn.end();
        })
        
    }).catch(err => {
      //not connected
    });
     
})


// //Epic start
// app.post('/epicSave',(req,res)=>{
//   var epicUNID = null;
//   var epicName = req.body.epicName ;      
//   if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
//     startDate='0000-00-00 00:00:00'; 
//   }else{           
//     var dt=moment(req.body.startDate);  
//     startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   }
//   if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
//     endDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.endDate);  
//     endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
//     replanStartDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.replanStartDate);  
//     replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   }
//   if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
//     replanEndDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.replanEndDate);  
//     replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }  
//   if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
//     actualStartDate='0000-00-00 00:00:00';
//   }else {
//     var dt=moment(req.body.actualStartDate);  
//     actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
//     actualEndDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.actualEndDate);  
//     actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   var createdBy = req.body.createdBy;
//   var modifiedBy = req.body.modifiedBy;
//   var dt=moment(new Date());
//   var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   var modifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   var IntegrationID = req.body.IntegrationID;
//   var Baselined = '0'
//   queryduplicatecheckEpic = "select count(*) as cnt from epics where IntegrationID ='"+IntegrationID +"' and epicName='"+epicName+"'" ; 
//   queryepicSave ="insert into epics values ("+epicUNID + ",'"+ epicName +"','"+startDate+"','"
//   + endDate + "','"+ replanStartDate+ "','"+ replanEndDate+ "','"+ actualStartDate + "','"+ actualEndDate + "','"+ createdBy + "','"+ modifiedBy +"','"
//   +createdDate+"','"+modifiedDate+"','"+IntegrationID+"','"+ Baselined +"')";
  
//   ////console.log(queryepicSave)
//   pool.getConnection().then(conn => {  
//     var result;
//       //console.log(queryduplicatecheckEpic)
//       conn.query(queryduplicatecheckEpic).then((queryduplicatecheckEpicResult) => {  
//            result =queryduplicatecheckEpicResult[0].cnt; 
//            //console.log(result)
//            if (result === 0){
//              //console.log("inside")
//                   conn.query(queryepicSave).then((epicSave) => {
//                   res.send({"save" : "success"} )       
//                   conn.end();
//             })
//             .catch(err => {
//                 //handle error
//                 res.send({"save" : "Fail" })
//                 conn.end();
//         })
//           }else{
//             //console.log("dup")
//             res.send({"duplicate" : "success"} )
//             conn.end();
//           }

//         })
//         .catch(err => {
//           //handle error
//           res.send({"Fetch" : "Fail" })
//           conn.end();
//         })
        
//     }).catch(err => {
//       //not connected
//     });
     
// })


app.get('/getEpics/:Id',(req,res)=>{
  var id = req.params.Id;
  queryEpics = "select * from epics where IntegrationID ='"+id +"'" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryEpics).then((epicResult) => {
            
            res.send(epicResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})


app.put('/updateEpic',(req,res)=>{
  var epicUNID = req.body.epicUNID;
  var epicName = req.body.epicName ;
  if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
    startDate='0000-00-00 00:00:00'; 
  }else{           
    var dt=moment(req.body.startDate);  
    startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
    endDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.endDate);  
    endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
    replanStartDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanStartDate);  
    replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
    replanEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanEndDate);  
    replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }  
  if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
    actualStartDate='0000-00-00 00:00:00';
  }else {
    var dt=moment(req.body.actualStartDate);  
    actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
    actualEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.actualEndDate);  
    actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  var modifiedBy = req.body.modifiedBy;  
  var dt=moment(new Date());
  var modifiedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var IntegrationID = req.body.IntegrationID;
  var rag = req.body.rag;
  var Owner = req.body.Owner;
  var remarks = req.body.remarks;
  // var reason_for_not_green = req.body.reason_for_not_green;
  // var green_plan = req.body.go_to_green_plan;
  var greenqry;
  if ( rag  !== 'Green'){    
      var reason_for_not_green = req.body.reason_for_not_green;
      var green_plan = req.body.go_to_green_plan;
       greenqry = "',reason_for_not_green='"+reason_for_not_green  
  +"',green_plan='"+green_plan
  }else{
    greenqry = '';
  }
  

  queryEpicUpdate = "Update epics SET epicName='"+epicName
  +"',startDate='"+startDate
  +"',endDate='"+endDate
  +"',replanStartDate='"+replanStartDate
  +"',replanEndDate='"+replanEndDate  
  +"',actualStartDate='"+actualStartDate
  +"',actualEndDate='"+actualEndDate
  +"',rag='"+rag
  +"',Owner='"+Owner
  +"',remarks='"+remarks
  +greenqry
  // +"',reason_for_not_green='"+reason_for_not_green  
  // +"',green_plan='"+green_plan
  +"',modifiedDate='"+modifiedDate
  +"',modifiedBy='"+modifiedBy
  +"' where epicUNID="+epicUNID;

  //console.log(queryEpicUdate)
  // pool.getConnection().then(conn => {        
  //     conn.query(queryEpicUdate).then((EpicUpdatedata) => {
         
  //         res.send({"insert" : "success"} )
  //         conn.end();
  //       })
  //       .catch(err => {
  //         //handle error
  //         res.send({"insert" : "Fail" })
  //         conn.end();
  //       })
        
  //   }).catch(err => {
  //     //not connected
  //   });  
  
  queryEpicUpdateCheck = "select count(*) as cnt from epics where epicName='"+epicName+ "' and IntegrationID='"+IntegrationID+"' and epicUNID <> '"+epicUNID+"'";
    pool.getConnection().then(conn => {  
      var result;
        console.log(queryEpicUpdateCheck)
        conn.query(queryEpicUpdateCheck).then((queryEpicUpdateCheckResult) => {  
             result =queryEpicUpdateCheckResult[0].cnt; 
             console.log(result)
             if (result === 0){
               console.log("inside")
                    conn.query(queryEpicUpdate).then((queryEpicUpdateResult) => {
                    res.send({"insert" : "success"} )       
                    conn.end();
              })
              .catch(err => {
                  //handle error
                  console.log(err)
                  res.send({"insert" : "Update Fail" })
                  conn.end();
          })
            }else{
              console.log("dup")
              // res.send({"duplicate" : "success"} )
              res.send({"insert" : "Duplicate record exist" })
              conn.end();
            }
    
          })
          .catch(err => {
            //handle error
            res.send({"insert" : "Update Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });


})


// app.put('/updateEpic',(req,res)=>{
//   var epicUNID = req.body.epicUNID;
//   var epicName = req.body.epicName ;
//   if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
//     startDate='0000-00-00 00:00:00'; 
//   }else{           
//     var dt=moment(req.body.startDate);  
//     startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   }
//   if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
//     endDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.endDate);  
//     endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
//     replanStartDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.replanStartDate);  
//     replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   }
//   if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
//     replanEndDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.replanEndDate);  
//     replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }  
//   if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
//     actualStartDate='0000-00-00 00:00:00';
//   }else {
//     var dt=moment(req.body.actualStartDate);  
//     actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
//     actualEndDate='0000-00-00 00:00:00';
//   }else{
//     var dt=moment(req.body.actualEndDate);  
//     actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
//   }
//   var modifiedBy = req.body.modifiedBy;  
//   var dt=moment(new Date());
//   var modifiedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
//   var IntegrationID = req.body.IntegrationID;

//   queryEpicUdate = "Update epics SET epicName='"+epicName
//   +"',startDate='"+startDate
//   +"',endDate='"+endDate
//   +"',replanStartDate='"+replanStartDate
//   +"',replanEndDate='"+replanEndDate  
//   +"',actualStartDate='"+actualStartDate
//   +"',actualEndDate='"+actualEndDate
//   +"',modifiedDate='"+modifiedDate
//   +"',modifiedBy='"+modifiedBy
//   +"' where epicUNID="+epicUNID;

//   ////console.log(queryEpicUdate)
//   pool.getConnection().then(conn => {        
//       conn.query(queryEpicUdate).then((EpicUpdatedata) => {
         
//           res.send({"insert" : "success"} )
//           conn.end();
//         })
//         .catch(err => {
//           //handle error
//           res.send({"insert" : "Fail" })
//           conn.end();
//         })
        
//     }).catch(err => {
//       //not connected
//     });  
// })

function epicDeleteCheck(Table ,Result ,unid) {
  queryreadinessget = "select distinct "
  for( let i=0; i<  Table.length; i++){
    if(i === 0){
	 queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" rqt LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%' and pc.RESOURCE_TYPE_MEASURED='"+Table[i].parameter+"')'count"+ i+"'"
      console.log(queryreadinessget)
    }else{

    queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%')'count"+ i+"'" 
    
    }
   if (i !==Table.length-1) {
    queryreadinessget= queryreadinessget + ","
  }   
 }

  pool.getConnection().then(conn => {
    conn.query(queryreadinessget).then((sprintDeleteCheckRes) => {
        for( let i=0; i< Table.length; i++){
          if (sprintDeleteCheckRes[0]['count'+i] !== 0) {
            Result.push(Table[i].UITable)
          }
        }
        conn.end();
    }).catch(err=>{
      //handle error
      //res.send({"Fetch" : "Fail" })
      conn.end();
    })
  }).catch(err => {
    //not connected
  });  
}
  
app.delete('/epicDelete/:epicUNID',(req,res)=>{   
   var epicUNID = req.params.epicUNID;     
  const Table = [{
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking",
	"parameter" : "epic"
  },
  {
    "TableName": "sprint",
    "CoulmnName": "epicUNID",
    "UITable": "* Transition Plan >> Sprint Execution Plan >> Epic Sprint "
  },
  {
    "TableName": "sprintscope",
    "CoulmnName": "epicUNID",
    "UITable": "* Transition Plan >> Sprint Execution Plan >> Sprint scope"
  }
  ];

  

  const Result = ['Epic mapped to below functionalities:',
      ''
  ];
  setTimeout(() => {
    epicDeleteCheck(Table, Result, epicUNID)
},1000)

  setTimeout(() => {

      if (Result.length === 2) {   
        
          pool.getConnection().then(conn => {                       
			  queryEpicDelete ="DELETE FROM epics WHERE epicUNID ='" + epicUNID+"'";
              conn.query(queryEpicDelete).then((queryEpicDeleteResult) => {

                      res.send({
                          "Delete": "success"
                      })
                      conn.end();
                  })
                  .catch(err => {
                      //handle error
                      res.send({
                          "Delete": "Fail"
                      })
                      conn.end();
                  })

          }).catch(err => {
              //not connected
          });
      } else { 
        console.log("no")      
          res.send({
              "Delete": Result
          })
      }
  }, 2500);
});



// app.delete('/epicDelete/:epicUNID',(req,res)=>{   
//     var epicUNID = req.params.epicUNID;        
//     queryEpicDelete ="DELETE FROM epics WHERE epicUNID ='" + epicUNID+"'";
//     pool.getConnection().then(conn => {        
//         conn.query(queryEpicDelete).then((epicDeletedata) => {           
//             res.send({"Delete" : "success"} )
//             conn.end();
//           })
//           .catch(err => {
//             //handle error
//             res.send({"Delete" : "Fail" })
//             conn.end();
//           })          
//       }).catch(err => {
//         //not connected
//       });
// } )

app.put('/epicBaseline', (req, res) => {
  var IntegrationID = req.body.IntegrationID
  queryallrecordforEpicBaseline = "select epicUNID from epics where IntegrationID='"+ IntegrationID + "'"  
  var data;
  FLAG = 0;
  pool.getConnection().then(conn => {
      conn.query(queryallrecordforEpicBaseline).then((epicBaselinedata) => {
              data = epicBaselinedata;
              //== sub loop- 2nd search
              pool.getConnection().then(conn1 => {
                  for (var i = 0; i < data.length; i++) {
                      var unid = data[i].epicUNID
                      ////console.log(unid)
                      queryEpicBaseline = "Update epics SET Baselined=1 where epicUNID='" + unid + "'"
                      //console.log(queryEpicBaseline)
                      conn1.query(queryEpicBaseline).then((queryEpicBaselineresult) => {
                              conn1.end();
                          })
                          .catch(err => {
                              //handle error
                              FLAG = 1
                              conn1.end();
                          })
                  }
              }).catch(err => {
                  //not connected
              });
              //==
              conn.end();
          })
          .catch(err => {
              //handle error
              conn.end();
          })
  }).catch(err => {
      //not connected
  });

  if (FLAG === 1) {
      res.send({
          "insert": "Fail"
      })
  } else {
      res.send({
          "insert": "success"
      })
  }
})
//Epic End
//Sprint start
//get Epic Id
app.get('/getEpicsName/:Id',(req,res)=>{
  var id = req.params.Id;
  // queryEpics = "select epicUNID,epicName,startDate,endDate from epics where IntegrationID ='"+id +"'" ; 
  queryEpics = "select epicUNID,epicName,startDate,endDate,replanStartDate,replanEndDate,actualStartDate,actualEndDate from epics where IntegrationID ='"+id +"'" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryEpics).then((epicResult) => {
            
            res.send(epicResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})
app.get('/getSprint/:Id',(req,res)=>{
  var id = req.params.Id;
  querySprint = "select sp.sprintUNID,ep.epicUNID,ep.epicName,sp.sprintName,sp.startDate,sp.endDate,sp.replanStartDate,sp.replanEndDate,"+
  "sp.actualStartDate,sp.actualEndDate,sp.createdBy,sp.modifiedBy, sp.rag,sp.owner,sp.remarks,sp.reason_for_not_green,"+
  "sp.green_plan,sp.createdDate,sp.modifiedDate,sp.IntegrationID,sp.Baselined,sp.scopelevel from epics as ep join sprint as sp"+
 " on sp.epicUNID = ep.epicUNID and sp.IntegrationID ='"+id+"'order by sp.sprintUNID"
  //console.log(querySprint)
 
  pool.getConnection().then(conn => {        
        conn.query(querySprint).then((epicResult) => {
            
            res.send(epicResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})
app.post('/sprintSave',(req,res)=>{
  var sprintUNID = null;
  var epicUNID = req.body.epicUNID
  var sprintName = req.body.sprintName.trim() ;    
  if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
    startDate='0000-00-00 00:00:00'; 
  }else{           
    var dt=moment(req.body.startDate);  
    startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
    endDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.endDate);  
    endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
    replanStartDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanStartDate);  
    replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
    replanEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanEndDate);  
    replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }  
  if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
    actualStartDate='0000-00-00 00:00:00';
  }else {
    var dt=moment(req.body.actualStartDate);  
    actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
    actualEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.actualEndDate);  
    actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  var createdBy = req.body.createdBy;
  var modifiedBy = req.body.modifiedBy;
  var dt=moment(new Date());
  var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var modifiedDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var IntegrationID = req.body.IntegrationID;
  var Baselined = '0';
  var rag = req.body.rag;
  var Owner = req.body.Owner;
  var remarks = req.body.remarks;
  if ( rag  === 'Green'){
    var reason_for_not_green = '' ;
    var green_plan = '';
  }else{
      var reason_for_not_green = req.body.reason_for_not_green;
      var green_plan = req.body.go_to_green_plan;
  }
  var scopelevel = req.body.scopelevel;

  queryduplicatechecksprint = "select count(*) as cnt from sprint where IntegrationID ='"+IntegrationID +"' and epicUNID='"+epicUNID+"' and sprintName='"+sprintName+"'" ; 
  querysprintSave ="insert into sprint values ("+sprintUNID+ ",'"+epicUNID + "','"+ sprintName +"','"+startDate+"','"
  + endDate + "','"+ replanStartDate+ "','"+ replanEndDate+ "','"+ actualStartDate + "','"+ actualEndDate + "','"+ createdBy + "','"+ modifiedBy +"','"
  +createdDate+"','"+modifiedDate+"','"+IntegrationID+"','"+ Baselined +"','"+ rag +"','"+ Owner +"','"+ remarks +"','"+ reason_for_not_green +"','"+ green_plan +"','"+ scopelevel +"')";

  pool.getConnection().then(conn => {   
    conn.query(queryduplicatechecksprint).then((queryduplicatecheckSprintResult) => {  
      if (queryduplicatecheckSprintResult[0].cnt === 0){
          conn.query(querysprintSave).then((sprintSave) => {        
          res.send({"save" : "success"} )
          conn.end();
        })
        .catch(err => {
          //handle error
          res.send({"save" : "Fail" })
          conn.end();
        })      
           
     }else{
       res.send({"duplicate" : "success"} )
       conn.end();
     }

   })
   .catch(err => {
     //handle error
     res.send({"Fetch" : "Fail" })
     conn.end();
   })   
}).catch(err => {
 //not connected
});
});
app.put('/updateSprint',(req,res)=>{
  var sprintUNID = req.body.sprintUNID;
  var sprintName = req.body.sprintName ;
  var EpicUNID = req.body.epicUNID;
  if(req.body.startDate === "undefined" || req.body.startDate === "" || req.body.startDate === null){ 
    startDate='0000-00-00 00:00:00'; 
  }else{           
    var dt=moment(req.body.startDate);  
    startDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.endDate === "undefined" || req.body.endDate === "" || req.body.endDate === null){
    endDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.endDate);  
    endDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.replanStartDate === "undefined" || req.body.replanStartDate === "" || req.body.replanStartDate === null){            
    replanStartDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanStartDate);  
    replanStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  }
  if(req.body.replanEndDate === "undefined" || req.body.replanEndDate === "" || req.body.replanEndDate === null){
    replanEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.replanEndDate);  
    replanEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }  
  if(req.body.actualStartDate === "undefined" || req.body.actualStartDate === "" || req.body.actualStartDate === null){
    actualStartDate='0000-00-00 00:00:00';
  }else {
    var dt=moment(req.body.actualStartDate);  
    actualStartDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  if(req.body.actualEndDate === "undefined" || req.body.actualEndDate === "" || req.body.actualEndDate === null){
    actualEndDate='0000-00-00 00:00:00';
  }else{
    var dt=moment(req.body.actualEndDate);  
    actualEndDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
  }
  var modifiedBy = req.body.modifiedBy;  
  var dt=moment(new Date());
  var modifiedDate=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
  var IntegrationID = req.body.IntegrationID;
  var rag = req.body.rag;
  var Owner = req.body.Owner;
  var remarks = req.body.remarks;
  var greenqry;
  if ( rag  !== 'Green'){    
      var reason_for_not_green = req.body.reason_for_not_green;
      var green_plan = req.body.go_to_green_plan;
       greenqry = "',reason_for_not_green='"+reason_for_not_green  
  +"',green_plan='"+green_plan
  }else{
    greenqry = '';
  }

  var scopelevel = req.body.scopelevel;

  querysprintUpdate = "Update sprint SET sprintName='"+sprintName
  +"',startDate='"+startDate
  +"',endDate='"+endDate
  +"',replanStartDate='"+replanStartDate
  +"',replanEndDate='"+replanEndDate  
  +"',actualStartDate='"+actualStartDate
  +"',actualEndDate='"+actualEndDate
  +"',rag='"+rag
  +"',Owner='"+Owner
  +"',remarks='"+remarks
  +greenqry
  +"',modifiedDate='"+modifiedDate
  +"',modifiedBy='"+modifiedBy
  +"',scopelevel='"+scopelevel
  +"' where sprintUNID="+sprintUNID;

    
  queryEpicSprintUpdateCheck = "select count(*) as cnt from sprint where sprintName='"+sprintName+ "' and IntegrationID='"+IntegrationID+"' and sprintUNID <> '"+sprintUNID+"' and epicUNID ='"+EpicUNID+"'";

  pool.getConnection().then(conn => {  
      var result;
       
        conn.query(queryEpicSprintUpdateCheck).then((queryEpicSprintUpdateCheckResult) => {  
             result =queryEpicSprintUpdateCheckResult[0].cnt; 
             if (result === 0){
                    conn.query(querysprintUpdate).then((querysprintUpdateResult) => {
                    res.send({"insert" : "success"} )       
                    conn.end();
              })
              .catch(err => {
                  //handle error
                  console.log(err)
                  res.send({"insert" : "Update Fail" })
                  conn.end();
          })
            }else{
              // res.send({"duplicate" : "success"} )
              res.send({"insert" : "Duplicate record exist" })
              conn.end();
            }
    
          })
          .catch(err => {
            //handle error
            res.send({"insert" : "Update Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });

  // ////console.log(querysprintUpdate)
  // pool.getConnection().then(conn => {        
  //     conn.query(querysprintUpdate).then((sprintUpdatedata) => {
         
  //         res.send({"insert" : "success"} )
  //         conn.end();
  //       })
  //       .catch(err => {
  //         //handle error
  //         res.send({"insert" : "Fail" })
  //         conn.end();
  //       })
        
  //   }).catch(err => {
  //     //not connected
  //   });  
});

function sprintDeleteCheck(Table ,Result ,unid) {
  queryreadinessget = "select distinct "
  for( let i=0; i<  Table.length; i++){
    if(i< 4){
    queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" rqt LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%' and pc.RESOURCE_TYPE_MEASURED='"+Table[i].parameter+"')'count"+ i+"'" 
  //   + "(select  pc.PARAMETER_NAME from "+  Table[i].TableName+" rqt LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%' and pc.RESOURCE_TYPE_MEASURED='"+Table[i].parameter+"')'PARAMETER_NAME"+ i+"'" 
   
    // queryreadinessget = queryreadinessget 
    // + "(select  pc.PARAMETER_NAME from "+  Table[i].TableName+" rqt LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%' and pc.RESOURCE_TYPE_MEASURED='"+Table[i].parameter+"')'count"+ i+"'" 
   
    
    }else{

    queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + unid+"%')'count"+ i+"'" 
    
    }
   if (i !==Table.length-1) {
    queryreadinessget= queryreadinessget + ","
  }   
 }
 console.log("queryreadinessget  "+queryreadinessget)
  pool.getConnection().then(conn => {
    conn.query(queryreadinessget).then((sprintDeleteCheckRes) => {
        for( let i=0; i< Table.length; i++){
          if (sprintDeleteCheckRes[0]['count'+i] !== 0) {         
            console.log("kkk " + sprintDeleteCheckRes[0]['count'+i])
            Result.push(Table[i].UITable)            
          }     
        }
        console.log("Result "+Result)
        conn.end();
    }).catch(err=>{
      //handle error
      //res.send({"Fetch" : "Fail" })
      conn.end();
    })
  }).catch(err => {
    //not connected
  });  
}
  
app.delete('/sprintDelete/:sprintUNID/:scopelevel', (req, res) => {
 var sprintUNID = req.params.sprintUNID;  
 var scopelevel = req.params.scopelevel;
 

  const Table = [{
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking",
	  "parameter" : "sprint"
  },{
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking",
	  "parameter" : "ST-sprint"
  },{
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking",
   	"parameter" : "Others-sprint"
  },
  {
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking",
	  "parameter" : "AT-sprint"
  },
  {
    "TableName": "sprintscope",
    "CoulmnName": "sprintUNID",
    "UITable": "* Transition Plan >> Sprint Execution Plan >> Sprint scope"
  }
  ];

  

  const Result = ['Epic Sprint mapped to below functionalities:',
      ''
  ];
  
  setTimeout(() => {
    sprintDeleteCheck(Table, Result, sprintUNID)
},1500)

  setTimeout(() => {

      if (Result.length === 2) {   
        console.log(Result)
console.log(Result.length)
          pool.getConnection().then(conn => {         
              querysprintDelete="DELETE FROM sprint WHERE sprintUNID ='" + sprintUNID+"'";
              conn.query(querysprintDelete).then((querysprintDeleteResult) => {

                      res.send({
                          "Delete": "success"
                      })
                      conn.end();
                  })
                  .catch(err => {
                      //handle error
                      res.send({
                          "Delete": "Fail"
                      })
                      conn.end();
                  })

          }).catch(err => {
              //not connected
          });
      } else { 
        console.log("no")      
          res.send({
              "Delete": Result
          })
      }
  }, 3500);
});



app.put('/sprintBaseline', (req, res) => {
  var IntegrationID = req.body.IntegrationID
  queryallrecordforEpicBaseline = "select sprintUNID from sprint where IntegrationID='"+ IntegrationID + "'"  
  var data;
  FLAG = 0;
  pool.getConnection().then(conn => {
      conn.query(queryallrecordforEpicBaseline).then((epicBaselinedata) => {
              data = epicBaselinedata;
              conn.end();
              //== sub loop- 2nd search
              pool.getConnection().then(conn1 => {
                  for (var i = 0; i < data.length; i++) {
                      var unid = data[i].sprintUNID
                      ////console.log(unid)
                      queryEpicBaseline = "Update sprint SET Baselined=1 where sprintUNID='" + unid + "'"
                      ////console.log(queryEpicBaseline)
                      conn1.query(queryEpicBaseline).then((queryEpicBaselineresult) => {
                              conn1.end();
                          })
                          .catch(err => {
                              //handle error
                              FLAG = 1
                              conn1.end();
                          })
                  }
              }).catch(err => {
                  //not connected
              });
              //==
              
          })
          .catch(err => {
              //handle error
              conn.end();
          })
  }).catch(err => {
      //not connected
  });
  if (FLAG === 1) {
      res.send({
          "insert": "Fail"
      })
  } else {
      res.send({
          "insert": "success"
      })
  }
})

app.get('/getSprintNames/:Id/:epicUNID/:Scope_Level',(req,res)=>{
  var id = req.params.Id;
  var epicUNID = req.params.epicUNID
  var Scope_Level = req.params.Scope_Level
   querysprints = "select sprintUNID,sprintName,startDate,endDate,replanStartDate,replanEndDate,actualStartDate,actualEndDate,scopelevel from sprint where IntegrationID ='"+id +"' and epicUNID='"+epicUNID+"' and scopelevel='"+Scope_Level+"'"; 
  pool.getConnection().then(conn => {        
        conn.query(querysprints).then((sprintResult) => {

            res.send(sprintResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })

      }).catch(err => {
        //not connected
      });
})
//Sprint end

// ************************ Tailor Exit Criteria Start ************************* // 
//TEC start

app.get('/TailoredECforAccountSpecific/:phaseName/:IntegrationID',(req,res)=>{
  
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;  
  TailoredEC =   "(select account.EXIT_CRITERIA_ID,account.EXIT_CRITERIA,admin.PHASE_NAME,AdID,ADName,"+
  "account.EXIT_CRITERIA_CREATED_BY,account.EXIT_CRITERIA_LAST_UPDATED_BY,account.EXIT_CRITERIA_CREATED_AT,"+
  "account.EXIT_CRITERIA_LAST_UPDATED_AT,account.IntegrationID,account.CheckedValue,"+
  "account.Baselined,account.EXIT_CRITERIA_Status,account.EXIT_CRITERIA_Comments,account.admin_id "+
  " from   "+
  "(SELECT EXIT_CRITERIA_ID as AdID,EXIT_CRITERIA as ADName,PHASE_NAME,null as IntegrationID,"+
  "1 as CheckedValue FROM exit_criteria where PHASE_NAME='"+phaseName+"') as admin "+
  " left JOIN"+
  "(SELECT EXIT_CRITERIA_ID ,  EXIT_CRITERIA ,PHASE_NAME,EXIT_CRITERIA_CREATED_BY,"+
  "EXIT_CRITERIA_LAST_UPDATED_BY,EXIT_CRITERIA_CREATED_AT,EXIT_CRITERIA_LAST_UPDATED_AT,"+
  "IntegrationID,CheckedValue,Baselined,EXIT_CRITERIA_Status,EXIT_CRITERIA_Comments,"+
  "admin_id FROM exit_criteria_for_accounts where PHASE_NAME='"+phaseName+"' and IntegrationID ='"+IntegrationID+"') as account "+
  " on AdID =account.admin_id )"+
  " union "+
  "(SELECT EXIT_CRITERIA_ID ,EXIT_CRITERIA,PHASE_NAME,EXIT_CRITERIA,EXIT_CRITERIA_ID,"+
  "EXIT_CRITERIA_CREATED_BY,EXIT_CRITERIA_LAST_UPDATED_BY,EXIT_CRITERIA_CREATED_AT,"+
  "EXIT_CRITERIA_LAST_UPDATED_AT,IntegrationID,CheckedValue,Baselined,EXIT_CRITERIA_Status,EXIT_CRITERIA_Comments,"+
  "admin_id FROM exit_criteria_for_accounts where PHASE_NAME='"+phaseName+"' and IntegrationID ='"+IntegrationID+"'and admin_id = 0)"



  " (SELECT STANDARD_ACTIVITY_ID ,STANDARD_ACTIVITY_NAME,MILESTONE_OR_TASK,PHASE_NAME,"+
  "STANDARD_ACTIVITY_NAME,STANDARD_ACTIVITY_ID,"+
  "STANDARD_ACTIVITY_CREATED_BY,STANDARD_ACTIVITY_LAST_UPDATED_BY,STANDARD_ACTIVITY_CREATED_AT,"+
  "STANDARD_ACTIVITY_LAST_UPDATED_AT,IntegrationID,CheckedValue,Plan_Start_Date,Plan_End_Date,Replan_Start_Date,RePlan_End_Date,"+
  "Actual_Start_Date,Actual_End_Date,Baselined,ServiceStatus,Owner_Name,Comments,Scope_UNID,"+
  "epicUNID,sprintUNID,admin_id FROM standard_activity_for_accounts "+
  " where PHASE_NAME='"+phaseName+"' and IntegrationID ='"+IntegrationID+"'and admin_id = 0)"

  //console.log(TailoredEC)
  pool.getConnection().then(conn=>{
        conn.query(TailoredEC).then((TailoredECResult)=>{
          res.send(TailoredECResult)
          conn.end();
        })        
  })
    .catch(err=>{
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
    .catch(err=>{
    //not connected
  })
})
app.get('/ECPhaseResult',(req,res)=>{
 QueryECPhaseResult="SELECT distinct(PHASE_NAME) FROM exit_criteria"
  pool.getConnection().then(conn=>{
    conn.query(QueryECPhaseResult).then((QueryECPhaseResultValues)=>{
      res.send(QueryECPhaseResultValues);
      conn.end();
    })
  })
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
})
app.get('/TailoredEC',(req,res)=>{
  
  var phase =  req.query.phase;
  var IntegrationID = req.query.IntegrationID;
  TailoredEC =   "select "+
                      "EXIT_CRITERIA_ID,EXIT_CRITERIA, PHASE_NAME,"+
                      "EXIT_CRITERIA_CREATED_BY,EXIT_CRITERIA_LAST_UPDATED_BY,"+
                      "EXIT_CRITERIA_CREATED_AT,EXIT_CRITERIA_LAST_UPDATED_AT,"+
                      "null as IntegrationID, 1 as CheckedValue,EXIT_CRITERIA_ID as admin_id  "+
                      " from exit_criteria where PHASE_NAME ='"+phase+"'"; 
  
  pool.getConnection().then(conn=>{    
        conn.query(TailoredEC).then((TailoredECResult)=>{
          res.send(TailoredECResult)
          conn.end();
        })  
  })
    .catch(err=>{
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
    .catch(err=>{
    //not connected
  })
})
app.get('/TailoredECAccount', (req, res) => {

  var phase = req.query.phase;
  var IntegrationID = req.query.IntegrationID;
  
  ECAccAccountTemplatecheck = "select * from exit_criteria_for_accounts where IntegrationID ='" 
                          + IntegrationID + "' AND  PHASE_NAME ='" + phase + "'";
// ////console.log(ECAccAccountTemplatecheck)
  pool.getConnection().then(conn => {
          conn.query(ECAccAccountTemplatecheck).then((ECAccAccountTempcheckResult) => {
              res.send(ECAccAccountTempcheckResult);
              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
})
app.post('/postTailoredECAdd',(req,res)=>{
 
  EXIT_CRITERIA_ID = null;
  EXIT_CRITERIA = req.body.EXIT_CRITERIA
  PHASE_NAME = req.body.PHASE_NAME
  IntegrationID = req.body.IntegrationID
  EXIT_CRITERIA_CREATED_BY = req.body.EXIT_CRITERIA_CREATED_BY
  EXIT_CRITERIA_LAST_UPDATED_BY = null
  var dt=moment(new Date());
  EXIT_CRITERIA_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  EXIT_CRITERIA_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
  CheckedValue = 1;
  EXIT_CRITERIA_Status = '';
  EXIT_CRITERIA_Comments = ''; 
  Baselined =0;
  admin_id = 0;
  EXIT_CRITERIA_URL = ''; 

  queryTailoredECAdd = "insert into exit_criteria_for_accounts values (" 
  + EXIT_CRITERIA_ID + ",'" 
  + EXIT_CRITERIA + "','" 
  + PHASE_NAME + "','" 
  + IntegrationID + "','" 
  + EXIT_CRITERIA_CREATED_BY + "','" 
  + EXIT_CRITERIA_LAST_UPDATED_BY + "','" 
  + EXIT_CRITERIA_CREATED_AT + "','" 
  + EXIT_CRITERIA_LAST_UPDATED_AT + "','" 
  + CheckedValue + "','" 
  + EXIT_CRITERIA_Status + "','" 
  + EXIT_CRITERIA_Comments + "','" 
  + Baselined + "','" 
  + admin_id + "','" 
  + EXIT_CRITERIA_URL+ "')"
  
//console.log(queryTailoredECAdd)
      pool.getConnection().then(conn => {        
            conn.query(queryTailoredECAdd).then((queryTailoredECAddresult) => {              
              res.send({"save": "success"});
                conn.end();
              })
              .catch(err => {
               console.log(err);
                //handle error
                res.send({"save": "fail"});
                conn.end();
              })              
          }).catch(err => {
            //not connected
          });
})
app.post('/postTailoredEC', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
        
        EXIT_CRITERIA_ID = null;
        EXIT_CRITERIA = req.body[i].EXIT_CRITERIA
        PHASE_NAME = req.body[i].PHASE_NAME
        IntegrationID = req.body[i].IntegrationID
        EXIT_CRITERIA_CREATED_BY = req.body[i].EXIT_CRITERIA_CREATED_BY
        EXIT_CRITERIA_LAST_UPDATED_BY = req.body[i].EXIT_CRITERIA_LAST_UPDATED_BY
        var dt=moment(new Date());
        EXIT_CRITERIA_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        EXIT_CRITERIA_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        CheckedValue = req.body[i].CheckedValue
        EXIT_CRITERIA_Status = null;
        EXIT_CRITERIA_Comments = '';
        admin_id = req.body[i].admin_id   
        EXIT_CRITERIA_URL = '';  
        Baselined=0


          querypostTailoredEC = "insert into exit_criteria_for_accounts values (" 
          + EXIT_CRITERIA_ID + ",'" 
          + EXIT_CRITERIA + "','" 
          + PHASE_NAME + "','" 
          + IntegrationID + "','" 
          + EXIT_CRITERIA_CREATED_BY + "','" 
          + EXIT_CRITERIA_LAST_UPDATED_BY + "','" 
          + EXIT_CRITERIA_CREATED_AT + "','" 
          + EXIT_CRITERIA_LAST_UPDATED_AT + "','" 
          + CheckedValue + "','" 
          + EXIT_CRITERIA_Status + "','" 
          + EXIT_CRITERIA_Comments + "','" 
          + Baselined + "','" 
          + admin_id + "','" 
          + EXIT_CRITERIA_URL + "')"

          conn.query(querypostTailoredEC).then((querypostTailoredECresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //console.log(err)
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
      //console.log(err)
      //console.log("not connected")
  });

  if (endres === true) {
      res.send({"save": "success"});
  } else {
      res.send({"save": "fail"});
  }

})
app.put('/putTailoredEC', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
        EXIT_CRITERIA_ID = req.body[i].EXIT_CRITERIA_ID
        EXIT_CRITERIA = req.body[i].EXIT_CRITERIA
        PHASE_NAME = req.body[i].PHASE_NAME
        EXIT_CRITERIA_LAST_UPDATED_BY = req.body[i].EXIT_CRITERIA_LAST_UPDATED_BY
        var dt=moment(new Date());
        EXIT_CRITERIA_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        CheckedValue = req.body[i].CheckedValue
        
        if (req.body[i].admin_id === null){
           EXIT_CRITERIA_ID = null;            
           EXIT_CRITERIA_CREATED_BY = req.body[i].EXIT_CRITERIA_CREATED_BY;           
           Baselined= req.body[i].Baselined         
           admin_id = req.body[i].AdID
           IntegrationID = req.body[i].IntegrationID           
           EXIT_CRITERIA_Status = ''
           EXIT_CRITERIA_Comments = null;
           EXIT_CRITERIA_URL = ''; 
           EXIT_CRITERIA_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");           
           queryputTailoredEC = "insert into exit_criteria_for_accounts values (" 
           + EXIT_CRITERIA_ID + ",'" 
           + EXIT_CRITERIA + "','" 
           + PHASE_NAME + "','" 
           + IntegrationID + "','" 
           + EXIT_CRITERIA_CREATED_BY + "','" 
           + EXIT_CRITERIA_LAST_UPDATED_BY + "','" 
           + EXIT_CRITERIA_CREATED_AT + "','" 
           + EXIT_CRITERIA_LAST_UPDATED_AT + "','" 
           + CheckedValue + "','" 
           + EXIT_CRITERIA_Status + "','" 
           + EXIT_CRITERIA_Comments + "','" 
           + Baselined + "','"
           + admin_id + "','"  
           + EXIT_CRITERIA_URL + "')"
        }else{
          queryputTailoredEC ="Update exit_criteria_for_accounts SET EXIT_CRITERIA='"
          +EXIT_CRITERIA                    
          +"',PHASE_NAME='"+PHASE_NAME
          +"',EXIT_CRITERIA_LAST_UPDATED_BY='"+EXIT_CRITERIA_LAST_UPDATED_BY
          +"',EXIT_CRITERIA_LAST_UPDATED_AT='"+EXIT_CRITERIA_LAST_UPDATED_AT
          +"',CheckedValue='"+CheckedValue    
          +"' where EXIT_CRITERIA_ID='"+EXIT_CRITERIA_ID+"'"
        }
         
          conn.query(queryputTailoredEC).then((queryputTailoredECresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  console.log(err)  
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
          }
        }).catch(err => {
          //not connected
        });
  if (endres === true) {
      res.send({"insert": "success"});
  } else {
      res.send({"insert": "fail"});
  }
})
// ************************ Tailor Exit Criteria End ************************* // 
// ************************ Exit Criteria Start******************************* // 
// Getting  ExitCriteriaStatus keywords profiles
app.get("/ExitCriteriaStatus",async(req,res)=>{
  queryEcStatus = "select * from adminprofile WHERE FieldCategoryName='ExitCriteriaStatus' ORDER BY Categoryvalues ASC" ; 

      pool.getConnection().then(conn => {        
        conn.query(queryEcStatus).then((queryEcStatusResult) => {
          
            res.send(queryEcStatusResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

app.get('/ExitCriteriaforAccount', (req, res) => {    
  var IntegrationID = req.query.IntegrationID;
  QueryExitCriteriaforAccount = "select * from exit_criteria_for_accounts"+
  " where IntegrationID ='" + IntegrationID + "' AND CheckedValue='1'" ;
//console.log(serviceBacklogQuery)  
pool.getConnection().then(conn => {
          conn.query(QueryExitCriteriaforAccount).then((QueryExitCriteriaforAccRes) => {
            //console.log(serviceBacklogRes)  
            res.send(QueryExitCriteriaforAccRes);
              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
});

app.put('/putExitCriteriaAccount', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {

        EXIT_CRITERIA_ID = req.body[i].EXIT_CRITERIA_ID
        EXIT_CRITERIA_LAST_UPDATED_BY = req.body[i].EXIT_CRITERIA_LAST_UPDATED_BY
        var dt=moment(new Date());
        EXIT_CRITERIA_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        EXIT_CRITERIA_Status = req.body[i].EXIT_CRITERIA_Status;
        EXIT_CRITERIA_Comments = req.body[i].EXIT_CRITERIA_Comments;
        EXIT_CRITERIA_URL = req.body[i].EXIT_CRITERIA_URL; 
          
          queryputExitCriteriaAcc ="Update exit_criteria_for_accounts SET EXIT_CRITERIA_Status='"
          +EXIT_CRITERIA_Status     
          +"',EXIT_CRITERIA_Comments='"+EXIT_CRITERIA_Comments 
          +"',EXIT_CRITERIA_URL='"+EXIT_CRITERIA_URL                 
          +"',EXIT_CRITERIA_LAST_UPDATED_BY='"+EXIT_CRITERIA_LAST_UPDATED_BY
          +"',EXIT_CRITERIA_LAST_UPDATED_AT='"+EXIT_CRITERIA_LAST_UPDATED_AT 
          +"' where EXIT_CRITERIA_ID='"+EXIT_CRITERIA_ID+"'"
         
          conn.query(queryputExitCriteriaAcc).then((queryputExitCriteriaAccresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
          }
        }).catch(err => {
          //not connected
        });
  if (endres === true) {
      res.send({"insert": "success"});
  } else {
      res.send({"insert": "fail"});
  }
});

// ************************ Exit Criteria End ************************* // 
// ************************ Contract Deliverable Transition closure Start******************************* // 
app.get("/CDStatus",async(req,res)=>{
  queryCDStatus = "select * from adminprofile WHERE FieldCategoryName='CDStatus' ORDER BY Categoryvalues ASC" ; 

      pool.getConnection().then(conn => {        
        conn.query(queryCDStatus).then((queryCDStatusResult) => {
          
            res.send(queryCDStatusResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

app.get('/CDforAccount', (req, res) => {    
  var IntegrationID = req.query.IntegrationID;
  QueryCDforAccount = "select * from contractualdeliverables"+
  " where IntegrationID ='" + IntegrationID + "'" ;
//console.log(serviceBacklogQuery)  
pool.getConnection().then(conn => {
          conn.query(QueryCDforAccount).then((QueryCDforAccountRes) => {
            //console.log(serviceBacklogRes)  
            res.send(QueryCDforAccountRes);
              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
});

app.put('/putCDAccount', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {

        CDUNID = req.body[i].CDUNID
        ModifiedBy = req.body[i].ModifiedBy
        var dt=moment(new Date());
        ModifiedDate = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
        ContractDeliver_Status = req.body[i].ContractDeliver_Status;
        ContractDeliver_Comments = req.body[i].ContractDeliver_Comments;
          
          queryputCDAccount ="Update contractualdeliverables SET ContractDeliver_Status='"
          +ContractDeliver_Status      
          +"',ContractDeliver_Comments='"+ContractDeliver_Comments              
          +"',ModifiedBy='"+ModifiedBy
          +"',ModifiedDate='"+ModifiedDate 
          +"' where CDUNID='"+CDUNID+"'"
          // console.log(queryputCDAccount)
          conn.query(queryputCDAccount).then((queryputCDAccountresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
          }
        }).catch(err => {
          //not connected
        });
  if (endres === true) {
      res.send({"insert": "success"});
  } else {
      res.send({"insert": "fail"});
  }
});

// ************************ Contract Deliverable Transition closure End******************************* // 


//Seven key start
//Code to fetch List of Week End Dt
app.get('/fetchWeekEndDt/:Id', (req, res) => {
  
  var id = req.params.Id;
  //console.log('fetchWeekEndDt =' + id);

  querytofetchWeekEndDt = "select weekend_date from sevenkey where IntegrationID ='" + id + "' order by weekend_date";
  //console.log('query =' + querytofetchWeekEndDt);
  pool.getConnection().then(conn => {
      conn.query(querytofetchWeekEndDt).then((weekEndDtresult) => {
              res.send(weekEndDtresult)
              conn.end();
          })
          .catch(err => {
              //handle error
              res.send({
                  "Fetch": "Fail"
              })
              conn.end();
          })
  }).catch(err => {
      //not connected
  });
});

// Code to fetch Seven Key information
app.get('/fetchSevenKeyData/:Id/:Type', (req, res) => {
  
      var id = req.params.Id;
      var type = req.params.Type;
      //console.log('fetchSevenKeyData =' + id + "||" + type);
  
      querytofetchSevenKey = "select IntegrationID,RaidID,Description,RiskType,Status,Owner,TargetDate,DateRaised,Priority from raid where IntegrationID ='" + id + "' and Type = '" + type + "' and Status = 'open' order by TargetDate";
      //console.log('query =' + querytofetchSevenKey);
      pool.getConnection().then(conn => {
          conn.query(querytofetchSevenKey).then((sevenkeyresult) => {
                  res.send(sevenkeyresult)
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "Fetch": "Fail"
                  })
                  conn.end();
              })
      }).catch(err => {
          //not connected
      });
  });
  
  // Code to fetch Seven Key information
  app.get('/fetchDetailedSchedule/:Id', (req, res) => {
  
      var id = req.params.Id;
      //console.log('fetchDetailedSchedule =' + id);
  
      querytofetchSchedule = "select * from standard_activity_for_accounts where IntegrationID ='" + id + "'";
      //console.log('query =' + querytofetchSchedule);
      pool.getConnection().then(conn => {
          conn.query(querytofetchSchedule).then((DetailedScheduleresult) => {
                  res.send(DetailedScheduleresult)
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "Fetch": "Fail"
                  })
                  conn.end();
              })
      }).catch(err => {
          //not connected
      });
  });
  

  
app.get('/fetchDeliverables/:Id', (req, res) => {
  var id = req.params.Id;
  //console.log('fetchDeliverables =' + id);

  querytofetchDeliverables = "select DeliverableName,DeliverableValues,ContractDoc_OwnerNM,ContractDeliver_Status,ContractDeliver_Comments from contractualdeliverables where IntegrationID ='" + id + "' order by DeliverableName";
  //console.log('query from Deliverables=' + querytofetchDeliverables);
  pool.getConnection().then(conn => {
      conn.query(querytofetchDeliverables).then((deliverableresult) => {
              res.send(deliverableresult)
              conn.end();
          })
          .catch(err => {
              //handle error
              res.send({
                  "Fetch": "Fail"
              })
              conn.end();
          })
  }).catch(err => {
      //not connected
  });
});



  // Code to fetch Deliverables information
  // app.get('/fetchDeliverables/:Id', (req, res) => {
  //     var id = req.params.Id;
  //     console.log('fetchDeliverables =' + id);
  
  //     querytofetchDeliverables = "select DeliverableName,DeliverableValues,ContractDoc_OwnerNM from contractualdeliverables where IntegrationID ='" + id + "' order by DeliverableName";
  //     console.log('query from Deliverables=' + querytofetchDeliverables);
  //     pool.getConnection().then(conn => {
  //         conn.query(querytofetchDeliverables).then((deliverableresult) => {
  //                 res.send(deliverableresult)
  //                 conn.end();
  //             })
  //             .catch(err => {
  //                 //handle error
  //                 res.send({
  //                     "Fetch": "Fail"
  //                 })
  //                 conn.end();
  //             })
  //     }).catch(err => {
  //         //not connected
  //     });
  // });
  
  // To check Record Exists or not
  app.post('/recordExist', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      //var endOfWeek = req.body.EndofWeek;week_end_dt
      var endOfWeek = req.body.week_end_dt;
      count = "Select count(*) result from sevenKey where IntegrationID = '" + IntegrationID + "' and weekend_date='" + endOfWeek + "'"
      //console.log("count=" + count);
      pool.getConnection().then(conn => {
          conn.query(count).then((countresult) => {
                  res.send(countresult)
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  //res.send({"save" : "Fail" })
                  conn.end();
              })
      }).catch(err => {
          //not connected
      });
  })
  
  
  // To fetch Existing record
  app.post('/fetchSevenKeyProfile', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      var endOfWeek = req.body.EndofWeek;
      //var endOfWeek = req.body.week_end_dt;
      count = "Select * from sevenKey where IntegrationID = '" + IntegrationID + "' and weekend_date='" + endOfWeek + "'"
      //console.log("count=" + count);
      pool.getConnection().then(conn => {
          conn.query(count).then((countresult) => {
                  res.send(countresult)
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  //res.send({"save" : "Fail" })
                  conn.end();
              })
      }).catch(err => {
          //not connected
      });
  })
  
  //Code to Insert KeyRisk Information
  app.post('/sevenkeyInsert', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      var RaidID = req.body.RaidID;
      var Usr_name = req.body.Usr_name;
      var endOfWeek = req.body.EndofWeek;
      var Type = req.body.Type;
      var dt = moment(new Date());
      var CurrentDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  
      querysevenkeyinsert = "insert into sevenKey(IntegrationID," + Type + ",weekend_date,Created_by,Modified_by,Created_date,Modified_date) values ('" + IntegrationID + "','" + RaidID + "','" + endOfWeek + "','" + Usr_name + "','" + Usr_name + "','" + CurrentDate + "','" + CurrentDate + "')"
  
      //console.log("querysevenkeyinsert=" + querysevenkeyinsert + "||");
      pool.getConnection().then(conn => {
          conn.query(querysevenkeyinsert).then((keyRiskresult) => {
                  res.send({
                      "save": "Success"
                  })
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "save": "Fail"
                  })
                  conn.end();
              })
  
      }).catch(err => {
          //not connected
      });
  })
  
  //Code to Update KeyRisk Information
  app.post('/sevenkeyUpdate', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      var RaidID = req.body.RaidID;
      var Usr_name = req.body.Usr_name;
      var endOfWeek = req.body.EndofWeek;
      var Type = req.body.Type;
      var dt = moment(new Date());
      var CurrentDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  
      querysevenkeyupdate = "Update sevenkey SET " + Type + "='" + RaidID + "',Modified_by='" + Usr_name + "',Modified_date='" + CurrentDate +
          "' where IntegrationID='" + IntegrationID + "' and weekend_date='" + endOfWeek + "'"
  
      //console.log("querysevenkeyupdate=" + querysevenkeyupdate + "||");
      pool.getConnection().then(conn => {
          conn.query(querysevenkeyupdate).then((keyRiskresult) => {
                  res.send({
                      "save": "Success"
                  })
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "save": "Fail"
                  })
                  conn.end();
              })
  
      }).catch(err => {
          //not connected
      });
  })
  
  app.post('/sevenkeyProfileInsert', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      var Usr_name = req.body.Usr_name;
      //var endOfWeek = req.body.EndofWeek;
      var endOfWeek = req.body.week_end_dt;
      var dt = moment(new Date());
      var CurrentDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  
      var overall_rag = req.body.overall_rag;
      var trend_as = req.body.trend_as;
      var summary_for_program = req.body.summary_for_program;
      var current_week_progress = req.body.current_week_progress;
      var next_week_plan = req.body.next_week_plan;
      var scope_color = req.body.scope_color;
      var scope_comment = req.body.scope_comment;
      var team_color = req.body.team_color;
      var team_comment = req.body.team_comment;
      var risk_color = req.body.risk_color;
      var risk_comment = req.body.risk_comment;
      var org_color = req.body.org_color;
      var org_comment = req.body.org_comment;
      var work_color = req.body.work_color;
      var work_comment = req.body.work_comment;
      var business_color = req.body.business_color;
      var business_comment = req.body.business_comment;
      var financial_color = req.body.financial_color;
      var financial_comment = req.body.financial_comment;
  
      querysevenkeyinsert = "insert into sevenKey(IntegrationID,weekend_date,overall_rag,trend_as,summary_for_program,current_week_program,next_week_plan,scope_color,scope_comment,team_color,team_comment,risk_color,risk_comment,organization_color,organization_comment,work_color,work_comment,business_color,business_comment,financial_color,financial_comment,Created_by,Modified_by,Created_date,Modified_date) values ('" + IntegrationID + "','" + endOfWeek + "','" + overall_rag + "','" + trend_as + "','" + summary_for_program + "','" + current_week_progress + "','" + next_week_plan + "','" + scope_color + "','" + scope_comment + "','" + team_color + "','" + team_comment + "','" + risk_color + "','" + risk_comment + "','" + org_color + "','" + org_comment + "','" + work_color + "','" + work_comment + "','" + business_color + "','" + business_comment + "','" + financial_color + "','" + financial_comment + "','" + Usr_name + "','" + Usr_name + "','" + CurrentDate + "','" + CurrentDate + "')"
  
      //console.log("querysevenkeyinsert=" + querysevenkeyinsert + "||");
  
      pool.getConnection().then(conn => {
          conn.query(querysevenkeyinsert).then((sevenkeyresult) => {
                  res.send({
                      "save": "Success"
                  })
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "save": "Fail"
                  })
                  conn.end();
              })
  
      }).catch(err => {
          //not connected
      });
  })
  
  //Code to Update KeyRisk Information
  app.post('/sevenkeyProfileUpdate', (req, res) => {
  
      var IntegrationID = req.body.IntegrationID;
      var Usr_name = req.body.Usr_name;
      //var endOfWeek = req.body.EndofWeek;
      var endOfWeek = req.body.week_end_dt;
      var dt = moment(new Date());
      var CurrentDate = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  
      var overall_rag = req.body.overall_rag;
      var trend_as = req.body.trend_as;
      var summary_for_program = req.body.summary_for_program;
      var current_week_progress = req.body.current_week_progress;
      var next_week_plan = req.body.next_week_plan;
      var scope_color = req.body.scope_color;
      var scope_comment = req.body.scope_comment;
      var team_color = req.body.team_color;
      var team_comment = req.body.team_comment;
      var risk_color = req.body.risk_color;
      var risk_comment = req.body.risk_comment;
      var org_color = req.body.org_color;
      var org_comment = req.body.org_comment;
      var work_color = req.body.work_color;
      var work_comment = req.body.work_comment;
      var business_color = req.body.business_color;
      var business_comment = req.body.business_comment;
      var financial_color = req.body.financial_color;
      var financial_comment = req.body.financial_comment;
  
      querysevenkeyupdate = "Update sevenkey SET overall_rag='" + overall_rag + "',trend_as='" + trend_as + "',summary_for_program='" + summary_for_program + "',current_week_program='" + current_week_progress + "',next_week_plan='" + next_week_plan + "',scope_color='" + scope_color + "',scope_comment='" + scope_comment + "',team_color='" + team_color + "',team_comment='" + team_comment + "',risk_color='" + risk_color + "',risk_comment='" + risk_comment + "',organization_color='" + org_color + "',organization_comment='" + org_comment + "',work_color='" + work_color + "',work_comment='" + work_comment + "',business_color='" + business_color + "',business_comment='" + business_comment + "',financial_color='" + financial_color + "',financial_comment='" + financial_comment + "',Modified_by='" + Usr_name + "',Modified_date='" + CurrentDate +
          "' where IntegrationID='" + IntegrationID + "' and weekend_date='" + endOfWeek + "'"
  
      //console.log("querysevenkeyupdate=" + querysevenkeyupdate + "||");
      pool.getConnection().then(conn => {
          conn.query(querysevenkeyupdate).then((sevenkeyUpdateresult) => {
                  res.send({
                      "save": "Success"
                  })
                  conn.end();
              })
              .catch(err => {
                  //handle error
                  res.send({
                      "save": "Fail"
                  })
                  conn.end();
              })
  
      }).catch(err => {
          //not connected
      });
  })

//seven key end


//sprint Execution Plan

app.get('/sprintExecutionPlanAccountExistCheck/:IntegrationID/:epic/:sprint/:app',(req,res)=>{

  var IntegrationID = req.params.IntegrationID;  
  var epic = req.params.epic;
  var sprint = req.params.sprint;
  var app = req.params.app;
  // console.log(app)
  if (app !== "x" || app !== "undefined"){
    app1= " and Scope_UNID ='"+app+"' "
  }else{
    app1=""
  }
  querysprintExecutionPlanAccountExistCheck = "select count(*) as exist from task_level_sprint_plan"+
   " where IntegrationID ='" 
  + IntegrationID + "'  and epicUNID='"+epic+"' and sprintUNID = '" + sprint+"' " +app1
  // +   "and (PHASE_NAME='PLAN' or PHASE_NAME='LEARN' or PHASE_NAME='PERFORM')"
  //console.log(querysprintExecutionPlanAccountExistCheck)
   pool.getConnection().then(conn => {
      conn.query(querysprintExecutionPlanAccountExistCheck).then((querysprintExecutionPlanAccountExistCheckresult) => {
              res.send(querysprintExecutionPlanAccountExistCheckresult)
              conn.end();
          })
          .catch(err => {
              //handle error
              res.send({"Fetch": "Fail"})
              conn.end();
          })
  }).catch(err => {
      //not connected
  });
})

app.get('/TailoredSLPPforAccount/:PLAN/:LEARN/:PERFORM/:IntegrationID/:epicUNID/:sprintUNID/:Scope_UNID/:Scope_Level', (req, res) => {    
  var PLAN = req.params.PLAN;
  var LEARN = req.params.LEARN;
  var PERFORM = req.params.PERFORM;
  var IntegrationID = req.params.IntegrationID;
  var epicUNID = req.params.epicUNID;
  var sprintUNID = req.params.sprintUNID;
  var Scope_UNID = req.params.Scope_UNID;  
  var Scope_Level = req.params.Scope_Level;  

  if(Scope_Level==='AT'){

  serviceBacklogQuery = "select * from standard_activity_for_accounts"+
  " where IntegrationID ='" + IntegrationID + "'  and epicUNID='"+epicUNID+
  "' and sprintUNID = '" + sprintUNID+"' and Scope_UNID='" +Scope_UNID+
    "' AND  (PHASE_NAME ='" + PLAN + "' OR PHASE_NAME ='"+LEARN +"' OR PHASE_NAME ='"+PERFORM+"') AND CheckedValue='1'" ;

  }else if(Scope_Level==='ST'){
    serviceBacklogQuery = "select * from standard_activity_for_accounts"+
    " where IntegrationID ='" + IntegrationID + "'  and epicUNID='"+epicUNID+
    "' and sprintUNID = '" + sprintUNID+"' and Scope_UNID='" +Scope_UNID+
      "' AND  (PHASE_NAME ='ST-PLAN' OR PHASE_NAME ='ST-DEFINE' OR PHASE_NAME ='ST-IMPLEMENT' OR PHASE_NAME ='ST-HANDOVER') AND CheckedValue='1'" ;
  
  }
   
pool.getConnection().then(conn => {
          conn.query(serviceBacklogQuery).then((serviceBacklogRes) => {
            // console.log(serviceBacklogRes)  
            res.send(serviceBacklogRes);

              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
});

app.get('/TailoredSLPPforSavedAccount/:IntegrationID/:epicUNID/:sprintUNID/:Scope_UNID/:Scope_Level', (req, res) => {    
  
  var IntegrationID = req.params.IntegrationID;
  var epicUNID = req.params.epicUNID;
  var sprintUNID = req.params.sprintUNID;
  var Scope_UNID = req.params.Scope_UNID;  
  var Scope_Level = req.params.Scope_Level

  if(Scope_Level==='AT'){

    serviceBacklogQuery =
    "select t1.STANDARD_ACTIVITY_ID,t1.STANDARD_ACTIVITY_NAME,t1.MILESTONE_OR_TASK,t1.PHASE_NAME,"+
    "t1.IntegrationID,t1.Baselined,t1.CheckedValue,"+
    "t2.T_STANDARD_ACTIVITY_ID,t2.STANDARD_ACTIVITY_CREATED_BY,t2.STANDARD_ACTIVITY_LAST_UPDATED_BY,"+
    "t2.STANDARD_ACTIVITY_CREATED_AT,t2.STANDARD_ACTIVITY_LAST_UPDATED_AT,"+     
    "t2.Plan_Start_Date,t2.Plan_End_Date,t2.Replan_Start_Date,t2.RePlan_End_Date,t2.Actual_Start_Date,t2.Actual_End_Date,"+
    "t2.ServiceStatus,t2.Owner_Name,t2.Comments,t2.Scope_UNID,t2.epicUNID,t2.sprintUNID,t2.TailoredUNID "+
    "from "+
    "((select STANDARD_ACTIVITY_ID,STANDARD_ACTIVITY_NAME,MILESTONE_OR_TASK,PHASE_NAME,IntegrationID,Baselined,CheckedValue "+ 
     "from standard_activity_for_accounts where IntegrationID ='"+IntegrationID+"'  and epicUNID='0' and sprintUNID = '0' "+
    "and Scope_UNID='0' AND  (PHASE_NAME ='AT-PLAN' OR PHASE_NAME ='AT-LEARN' OR PHASE_NAME ='AT-PERFORM') AND CheckedValue='1') as t1 "+
    "left join "+
    "(select * from task_level_sprint_plan where IntegrationID ='"+IntegrationID+"'  and epicUNID='"+epicUNID+
    "' and sprintUNID = '"+sprintUNID+"' and Scope_UNID='"+Scope_UNID+"' AND CheckedValue='1')as t2 "+
    "on t1.STANDARD_ACTIVITY_ID = t2.TailoredUNID)"
  }else if(Scope_Level==='ST'){

    serviceBacklogQuery =
    "select t1.STANDARD_ACTIVITY_ID,t1.STANDARD_ACTIVITY_NAME,t1.MILESTONE_OR_TASK,t1.PHASE_NAME,"+
    "t1.IntegrationID,t1.Baselined,t1.CheckedValue,"+
    "t2.T_STANDARD_ACTIVITY_ID,t2.STANDARD_ACTIVITY_CREATED_BY,t2.STANDARD_ACTIVITY_LAST_UPDATED_BY,"+
    "t2.STANDARD_ACTIVITY_CREATED_AT,t2.STANDARD_ACTIVITY_LAST_UPDATED_AT,"+     
    "t2.Plan_Start_Date,t2.Plan_End_Date,t2.Replan_Start_Date,t2.RePlan_End_Date,t2.Actual_Start_Date,t2.Actual_End_Date,"+
    "t2.ServiceStatus,t2.Owner_Name,t2.Comments,t2.Scope_UNID,t2.epicUNID,t2.sprintUNID,t2.TailoredUNID "+
    "from "+
    "((select STANDARD_ACTIVITY_ID,STANDARD_ACTIVITY_NAME,MILESTONE_OR_TASK,PHASE_NAME,IntegrationID,Baselined,CheckedValue "+ 
     "from standard_activity_for_accounts where IntegrationID ='"+IntegrationID+"'  and epicUNID='0' and sprintUNID = '0' "+
    "and Scope_UNID='0' AND  (PHASE_NAME ='ST-PLAN' OR PHASE_NAME ='ST-DEFINE' OR PHASE_NAME ='ST-IMPLEMENT' OR PHASE_NAME ='ST-HANDOVER') AND CheckedValue='1') as t1 "+
    "left join "+
    "(select * from task_level_sprint_plan where IntegrationID ='"+IntegrationID+"'  and epicUNID='"+epicUNID+
    "' and sprintUNID = '"+sprintUNID+"' and Scope_UNID='"+Scope_UNID+"' AND CheckedValue='1')as t2 "+
    "on t1.STANDARD_ACTIVITY_ID = t2.TailoredUNID)"

  }  

// console.log(serviceBacklogQuery)  
pool.getConnection().then(conn => {
          conn.query(serviceBacklogQuery).then((serviceBacklogRes) => {
            // console.log(serviceBacklogRes)  
            res.send(serviceBacklogRes);

              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
});

app.put('/sprintExecutionPlanUpdate', (req, res) => {
  //console.log("put")
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          T_STANDARD_ACTIVITY_ID = req.body[i].T_STANDARD_ACTIVITY_ID
          var dt=moment(new Date());
          STANDARD_ACTIVITY_CREATED_BY =req.body[i].STANDARD_ACTIVITY_CREATED_BY;
          STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY;
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID;
          CheckedValue = req.body[i].CheckedValue;
          ServiceStatus = req.body[i].ServiceStatus;
          Owner_Name = req.body[i].Owner_Name;
          Comments = req.body[i].Comments;
          Baselined = 0;
          TailoredUNID = req.body[i].STANDARD_ACTIVITY_ID

          if(req.body[i].Plan_Start_Date == "undefined" || req.body[i].Plan_Start_Date == "" || req.body[i].Plan_Start_Date == null){            
            Plan_Start_Date='0000-00-00 00:00:00'          
          }else{
              var dt=moment(req.body[i].Plan_Start_Date);
              Plan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }
          if(req.body[i].Plan_End_Date == "undefined" || req.body[i].Plan_End_Date == "" || req.body[i].Plan_End_Date == null){
            Plan_End_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Plan_End_Date);
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }

          if(req.body[i].Replan_Start_Date == "undefined" || req.body[i].Replan_Start_Date == "" || req.body[i].Replan_Start_Date == null){
            Replan_Start_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Replan_Start_Date);
              Replan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].RePlan_End_Date == "undefined" || req.body[i].RePlan_End_Date == "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].Actual_Start_Date == "undefined" || req.body[i].Actual_Start_Date == "" || req.body[i].Actual_Start_Date == null){
            Actual_Start_Date='0000-00-00 00:00:00'
          }else{
                    var dt=moment(req.body[i].Actual_Start_Date);
                    Actual_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");       
          }

          if(req.body[i].Actual_End_Date == "undefined" || req.body[i].Actual_End_Date == "" || req.body[i].Actual_End_Date == null){
            Actual_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].Actual_End_Date);
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          }
          Baselined = 0;
          epicUNID = req.body[i].epicUNID;
          sprintUNID =req.body[i].sprintUNID;
          if(req.body[i].Scope_UNID === 'x'){
            Scope_UNID = 0
          }else{
            Scope_UNID = req.body[i].Scope_UNID;
          }
          // console.log(req.body[i].T_STANDARD_ACTIVITY_ID)
          if( T_STANDARD_ACTIVITY_ID === null){
            //console.log("enter into null")
            //console.log("dfdsfds")
                putTailoredWBSSB = "insert into task_level_sprint_plan values (" 
                + T_STANDARD_ACTIVITY_ID + ",'" 
                + STANDARD_ACTIVITY_CREATED_BY + "','" 
                + STANDARD_ACTIVITY_LAST_UPDATED_BY + "','" 
                + STANDARD_ACTIVITY_CREATED_AT + "','" 
                + STANDARD_ACTIVITY_LAST_UPDATED_AT + "','" 
                + IntegrationID + "','" 
                + CheckedValue + "','" 
                + Plan_Start_Date + "','" 
                + Plan_End_Date + "','" 
                + Replan_Start_Date + "','"           
                + RePlan_End_Date + "','" 
                + Actual_Start_Date + "','" 
                + Actual_End_Date + "','" 
                + Baselined  + "','" 
                + ServiceStatus  + "','" 
                + Owner_Name  + "','" 
                + Comments  + "','" 
                + Scope_UNID  + "','" 
                + epicUNID  + "','" 
                + sprintUNID  + "','" 
                + TailoredUNID + "')"   
                //console.log("putTailoredWBSSB")         
          }else{
                putTailoredWBSSB ="Update task_level_sprint_plan SET STANDARD_ACTIVITY_LAST_UPDATED_BY='"
                +STANDARD_ACTIVITY_LAST_UPDATED_BY                              
                +"',STANDARD_ACTIVITY_LAST_UPDATED_AT='"+STANDARD_ACTIVITY_LAST_UPDATED_AT
                +"',CheckedValue='"+CheckedValue
                +"',Plan_Start_Date='"+Plan_Start_Date
                +"',Plan_End_Date='"+Plan_End_Date
                +"',Replan_Start_Date='"+Replan_Start_Date
                +"',RePlan_End_Date='"+RePlan_End_Date
                +"',Actual_Start_Date='"+Actual_Start_Date
                +"',Actual_End_Date='"+Actual_End_Date          
                +"',ServiceStatus='"+ServiceStatus  
                +"',Owner_Name='"+Owner_Name
                +"',Comments='"+Comments
                +"',epicUNID='"+epicUNID
                +"',sprintUNID='"+sprintUNID
                +"',Scope_UNID='"+Scope_UNID
                +"' where T_STANDARD_ACTIVITY_ID='"+T_STANDARD_ACTIVITY_ID+"'"
          }
          
          conn.query(putTailoredWBSSB).then((putTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                console.log("eerrrrr")
                  endres = false;
                  // console.log(err)
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"0":{"insert": "success"}});
  } else {
      res.send({"0":{"insert": "fail"}});
  }
})



app.post('/sprintExecutionPlanSave', (req, res) => {
  var endres = true
  var len = req.body.length
//console.log("test")
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          TailoredUNID = req.body[i].STANDARD_ACTIVITY_ID;
          T_STANDARD_ACTIVITY_ID = null;
          // STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          // MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          // PHASE_NAME = req.body[i].PHASE_NAME
          STANDARD_ACTIVITY_CREATED_BY = req.body[i].STANDARD_ACTIVITY_CREATED_BY
          STANDARD_ACTIVITY_LAST_UPDATED_BY = null
          var dt=moment(new Date());
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID
          CheckedValue = req.body[i].CheckedValue
          if(req.body[i].Plan_Start_Date == "undefined" || req.body[i].Plan_Start_Date == "" || req.body[i].Plan_Start_Date == null){            
            Plan_Start_Date='0000-00-00 00:00:00'          
          }else{
              var dt=moment(req.body[i].Plan_Start_Date);
              Plan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }
          if(req.body[i].Plan_End_Date == "undefined" || req.body[i].Plan_End_Date == "" || req.body[i].Plan_End_Date == null){
            Plan_End_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Plan_End_Date);
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }

          if(req.body[i].Replan_Start_Date == "undefined" || req.body[i].Replan_Start_Date == "" || req.body[i].Replan_Start_Date == null){
            Replan_Start_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Replan_Start_Date);
              Replan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].RePlan_End_Date == "undefined" || req.body[i].RePlan_End_Date == "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].Actual_Start_Date == "undefined" || req.body[i].Actual_Start_Date == "" || req.body[i].Actual_Start_Date == null){
            Actual_Start_Date='0000-00-00 00:00:00'
          }else{
                    var dt=moment(req.body[i].Actual_Start_Date);
                    Actual_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");       
          }

          if(req.body[i].Actual_End_Date == "undefined" || req.body[i].Actual_End_Date == "" || req.body[i].Actual_End_Date == null){
            Actual_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].Actual_End_Date);
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          }      
          Baselined=0
		      ServiceStatus = req.body[i].ServiceStatus;
          Owner_Name = req.body[i].Owner_Name
          Comments = req.body[i].Comments;
          epicUNID = req.body[i].epicUNID;
          sprintUNID =req.body[i].sprintUNID;          
          if (req.body[i].Scope_UNID ==='x' ){
            Scope_UNID = 0
          }else{
            Scope_UNID = req.body[i].Scope_UNID;
          }
          postTailoredWBSSB = "insert into task_level_sprint_plan values (" 
          + T_STANDARD_ACTIVITY_ID + ",'" 
          + STANDARD_ACTIVITY_CREATED_BY + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_BY + "','" 
          + STANDARD_ACTIVITY_CREATED_AT + "','" 
          + STANDARD_ACTIVITY_LAST_UPDATED_AT + "','" 
          + IntegrationID + "','" 
          + CheckedValue + "','" 
          + Plan_Start_Date + "','" 
          + Plan_End_Date + "','" 
          + Replan_Start_Date + "','"           
          + RePlan_End_Date + "','" 
          + Actual_Start_Date + "','" 
          + Actual_End_Date + "','" 
          + Baselined  + "','" 
          + ServiceStatus  + "','" 
          + Owner_Name  + "','" 
          + Comments  + "','" 
          + Scope_UNID  + "','" 
          + epicUNID  + "','" 
          + sprintUNID  + "','" 
          + TailoredUNID + "')"
          
//console.log(postTailoredWBSSB)
          conn.query(postTailoredWBSSB).then((postTailoredWBSSBresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  console.log(err)
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
      console.log(err)
      console.log("not connected")
  });

  if (endres === true) {
      res.send({"0":{"save": "success"}});
  } else {
      res.send({"0":{"save": "fail"}});
  }

})


app.put('/putSLPBaseline', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID;
          putTailoredSBBaselineQuery =
              "Update standard_activity_for_accounts SET Baselined=1 where STANDARD_ACTIVITY_ID='" + STANDARD_ACTIVITY_ID + "'"
          conn.query(putTailoredSBBaselineQuery).then((putTailoredSBBaselineQueryresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({
          "0": {
              "insert": "success"
          }
      });
  } else {
      res.send({
          "0": {
              "insert": "fail"
          }
      });
  }
})
//Sprint Execution Plan


//Application level sprint plan
app.get('/TrnPlanApplnLevelAccountExistCheck/:IntegrationID/:epic/:sprint',(req,res)=>{
  var IntegrationID = req.params.IntegrationID;  
  var epic = req.params.epic;
  var sprint = req.params.sprint;
  var condition = '';
  //console.log("test")
  //console.log(req.params.sprint)
  if (sprint !== 'x'){
    condition = " and sprintUNID = '" + sprint+"'"
  }

  queryAppLevelSpPlan = "select count(*) as exist from appln_level_sprint_plan where IntegrationID ='" + IntegrationID + "'  and epicUNID='"+epic+"' "+condition  
  pool.getConnection().then(conn => {
      conn.query(queryAppLevelSpPlan).then((queryAppLevelSpPlanresult) => {
              res.send(queryAppLevelSpPlanresult)
              conn.end();
          })
          .catch(err => {
              //handle error
              res.send({"Fetch": "Fail"})
              conn.end();
          })
  }).catch(err => {
      //not connected
  });
})

app.get("/appLevelSpPlanResultFromSavedLocation/:Id/:epic/:sprint/:Scope_Level",(req,res)=>{  
  // From Sprint_scope table
  var id = req.params.Id; 
  var epic = req.params.epic;
  var sprint = req.params.sprint;
  var Scope_Level = req.params.Scope_Level;
  var condition;
  //console.log("test")
  //console.log(req.params.sprint)
  if (sprint !== 'x'){
    condition = " and sc.sprintUNID = '" + sprint +"' ";
  }else{
    condition = '';
  }
  if(Scope_Level==='AT'){
  queryappLevelSpPlanResultFromSaveLocation =    
"select sc.Scope_UNID,sc.insertFlag,spt.DinsertFlag,sc.Scope_IntegrationID,ep.epicName,spt.AppLevelSPUNID, "+
"spt.status,spt.Plan_Start_Date,spt.Plan_End_Date,spt.Replan_Start_Date,spt.RePlan_End_Date,spt.Actual_Start_Date,"+
"spt.Actual_End_Date,spt.psCompleted_per,spt.asCompleted_per,spt.sch_Var,spt.ktSummary,spt.Remarks,spt.Baselined,"+
"spt.modifiedBy,spt.Owner_Name,spt.Reason_Not_Green,spt.goto_Green,sc.epicUNID,ep.epicName,sc.sprintUNID,sp.sprintName,sc.AppUNID,sc.Scope_Level,ai.AppId,ai.AppName from  "+
"sprintscope AS sc "+
"left outer join appln_level_sprint_plan as spt on (sc.Scope_UNID = spt.Scope_UNID) "+
"left outer join epics as ep on (sc.epicUNID=ep.epicUNID) "+
"left outer join sprint as sp on (sc.sprintUNID = sp.sprintUNID) "+
"left outer join application_information as ai on (sc.AppUNID=ai.AppUNID) "+
"WHERE sc.Scope_IntegrationID='"+id+"' and sc.Scope_Level='AT' and sc.epicUNID = '"+epic+"' "  + condition

  }else if(Scope_Level==='ST'){
    queryappLevelSpPlanResultFromSaveLocation =    
"select sc.Scope_UNID,sc.insertFlag,spt.DinsertFlag,sc.Scope_IntegrationID,ep.epicName,spt.AppLevelSPUNID, "+
"spt.status,spt.Plan_Start_Date,spt.Plan_End_Date,spt.Replan_Start_Date,spt.RePlan_End_Date,spt.Actual_Start_Date,"+
"spt.Actual_End_Date,spt.psCompleted_per,spt.asCompleted_per,spt.sch_Var,spt.ktSummary,spt.Remarks,spt.Baselined,"+
"spt.modifiedBy,spt.Owner_Name,spt.Reason_Not_Green,spt.goto_Green,sc.epicUNID,ep.epicName,sc.sprintUNID,sp.sprintName,sc.AppUNID,sc.Scope_Level,"+
"st.MasterSTInfoid,st.STScopeLevel,st.STScope,st.STDetailedScope,st.STScopeActivity from  "+
"sprintscope AS sc "+
"left outer join appln_level_sprint_plan as spt on (sc.Scope_UNID = spt.Scope_UNID) "+
"left outer join epics as ep on (sc.epicUNID=ep.epicUNID) "+
"left outer join sprint as sp on (sc.sprintUNID = sp.sprintUNID) "+
"left outer join masterstinfo as st on (sc.STUNID=st.MasterSTInfoid) "+
"WHERE sc.Scope_IntegrationID='"+id+"' and sc.Scope_Level='ST' and sc.epicUNID = '"+epic+"' "  + condition

  }else if(Scope_Level==='Others'){

    queryappLevelSpPlanResultFromSaveLocation =    
    "select sc.Scope_UNID,sc.insertFlag,spt.DinsertFlag,sc.Scope_IntegrationID,ep.epicName,spt.AppLevelSPUNID, "+
    "spt.status,spt.Plan_Start_Date,spt.Plan_End_Date,spt.Replan_Start_Date,spt.RePlan_End_Date,spt.Actual_Start_Date,"+
    "spt.Actual_End_Date,spt.psCompleted_per,spt.asCompleted_per,spt.sch_Var,spt.ktSummary,spt.Remarks,spt.Baselined,"+
    "spt.modifiedBy,spt.Owner_Name,spt.Reason_Not_Green,spt.goto_Green,sc.epicUNID,ep.epicName,sc.sprintUNID,sp.sprintName,sc.AppUNID,sc.Scope_Level,"+
    "sc.Scope_BacklogActivity from  "+
    "sprintscope AS sc "+
    "left outer join appln_level_sprint_plan as spt on (sc.Scope_UNID = spt.Scope_UNID) "+
    "left outer join epics as ep on (sc.epicUNID=ep.epicUNID) "+
    "left outer join sprint as sp on (sc.sprintUNID = sp.sprintUNID) "+
    "WHERE sc.Scope_IntegrationID='"+id+"' and sc.Scope_Level='Others' and sc.epicUNID = '"+epic+"' "  + condition
    
  }  
   
    pool.getConnection().then(conn => {        
          conn.query(queryappLevelSpPlanResultFromSaveLocation).then((queryappLevelSpPlanResultFromSaveLocation) => {
              res.send(queryappLevelSpPlanResultFromSaveLocation)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })

        }).catch(err => {
          //not connected
        });
});

app.get("/appLevelSpPlanResult/:Id/:epic/:sprint/:Scope_Level",(req,res)=>{  
  // From Sprint_scope table
  var id = req.params.Id; 
  var epic = req.params.epic;
  var sprint = req.params.sprint;
  var Scope_Level = req.params.Scope_Level;
  var condition;
  var querySprintScopeDataResult='';

  if (sprint !== 'x'){
    condition = "' and sc.sprintUNID = '" + sprint;
  }else{
    condition = '';
  }

  if(Scope_Level==='AT'){
    querySprintScopeDataResult = 
    "select sc.Scope_UNID,Scope_IntegrationID as IntegrationID, sc.epicUNID,ep.epicName,sc.sprintUNID,"+
    "sp.sprintName,sc.AppUNID,ai.AppId,ai.AppName,sc.Scope_Level "+
    "from sprintscope AS sc, epics as ep , sprint as sp , application_information as ai "+
    "WHERE Scope_IntegrationID='"+id+"' and sc.epicUNID=ep.epicUNID and sc.epicUNID = '"+ epic + condition +"' and "+
    "sc.sprintUNID = sp.sprintUNID and sc.AppUNID=ai.AppUNID and sc.Scope_Level='AT' order by epicUNID,sprintUNID,AppName"
  }else if(Scope_Level==='ST'){

    querySprintScopeDataResult = 
    "select sc.Scope_UNID,Scope_IntegrationID as IntegrationID, sc.epicUNID,ep.epicName,sc.sprintUNID,"+
    "sp.sprintName,sc.Scope_Level,st.MasterSTInfoid,st.STScopeLevel,st.STScope,st.STDetailedScope,st.STScopeActivity,sc.STUNID "+
    "from sprintscope AS sc, epics as ep , sprint as sp , masterstinfo as st "+
    "WHERE Scope_IntegrationID='"+id+"' and sc.epicUNID=ep.epicUNID and sc.epicUNID = '"+ epic + condition +"' and "+
    "sc.sprintUNID = sp.sprintUNID and sc.STUNID=st.MasterSTInfoid and sc.Scope_Level='ST' order by epicUNID,sprintUNID"

  }else if(Scope_Level==='Others'){
    querySprintScopeDataResult = 
    "select sc.Scope_UNID,Scope_IntegrationID as IntegrationID, sc.epicUNID,ep.epicName,sc.sprintUNID,"+
    "sp.sprintName,sc.Scope_Level,sc.Scope_BacklogActivity "+
    "from sprintscope AS sc, epics as ep , sprint as sp "+
    "WHERE Scope_IntegrationID='"+id+"' and sc.epicUNID=ep.epicUNID and sc.epicUNID = '"+ epic + condition +"' and "+
    "sc.sprintUNID = sp.sprintUNID and sc.Scope_Level='Others' order by epicUNID,sprintUNID"
  }
    pool.getConnection().then(conn => {        
          conn.query(querySprintScopeDataResult).then((querySprintScopeDataKeyword) => {

               res.send(querySprintScopeDataKeyword)
              conn.end();
            })
            .catch(err => {
              //handle error
              res.send({"Fetch" : "Fail" })
              conn.end();
            })

        }).catch(err => {
          //not connected
        });
});

app.post('/saveappLevelSpPlanResult', (req, res) => {
  var endres = true
  var len = req.body.length
//console.log("test")
  pool.getConnection().then(conn => {
      for (var i in req.body) {        
          AppLevelSPUNID = null;
          Scope_UNID = req.body[i].Scope_UNID
          // if(req.body[i].status === "undefined"){
          //   sprintStatus = ''
          // }else{
            status = req.body[i].status
          // }
          IntegrationID = req.body[i].IntegrationID          
          var dt=moment(new Date());
   
          if(req.body[i].Plan_Start_Date === "undefined" || req.body[i].Plan_Start_Date === "Invalid date" || req.body[i].Plan_Start_Date === "" || req.body[i].Plan_Start_Date === null){ 
            Plan_Start_Date='0000-00-00 00:00:00'; 
          }else{           
            var dt=moment(req.body[i].Plan_Start_Date);  
            Plan_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
          }
          if(req.body[i].Plan_End_Date === "undefined" || req.body[i].Plan_End_Date === "Invalid date" || req.body[i].Plan_End_Date === "" || req.body[i].Plan_End_Date === null){
            Plan_End_Date='0000-00-00 00:00:00';
          }else{
            var dt=moment(req.body[i].Plan_End_Date);  
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
          }
          if(req.body[i].Replan_Start_Date === "undefined" || req.body[i].Replan_Start_Date === "Invalid date"  || req.body[i].Replan_Start_Date === "" || req.body[i].Replan_Start_Date === null){            
            Replan_Start_Date='0000-00-00 00:00:00';
          }else{
            var dt=moment(req.body[i].Replan_Start_Date);  
            Replan_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
          }
          if(req.body[i].RePlan_End_Date === "undefined" || req.body[i].RePlan_End_Date === "Invalid date" || req.body[i].RePlan_End_Date === "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00';
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);  
            RePlan_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
          }  
          if(req.body[i].Actual_Start_Date === "undefined" || req.body[i].Actual_Start_Date === "Invalid date" || req.body[i].Actual_Start_Date === "" || req.body[i].Actual_Start_Date === null){
            Actual_Start_Date='0000-00-00 00:00:00';
          }else {
            var dt=moment(req.body[i].Actual_Start_Date);  
            Actual_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
          }
          if(req.body[i].Actual_End_Date === "undefined" || req.body[i].Actual_End_Date === "Invalid date" || req.body[i].Actual_End_Date === "" || req.body[i].Actual_End_Date === null){
            Actual_End_Date='0000-00-00 00:00:00';
          }else{
            var dt=moment(req.body[i].Actual_End_Date);  
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
          }
          plannedCompletePercent = +req.body[i].psCompleted_per;
          actualCompletePercent = +req.body[i].asCompleted_per;
          schVariance = +req.body[i].sch_Var
          if(req.body[i].ktSummary === "undefined"){
              ktSummary = ''
          }else{
            ktSummary = req.body[i].ktSummary
          }
        
          if(req.body[i].Remarks === "undefined"){
            remarks = ''
          }else{
            remarks = req.body[i].Remarks;
          }
          var createdBy = req.body[i].createdBy;
          var modifiedBy = req.body[i].modifiedBy;
          var createdAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          var modifiedAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          Baselined=0
          epicUNID = req.body[i].epicUNID;
          sprintUNID = req.body[i].sprintUNID
          insertFlag = 1
          //console.log(req.body[i].Owner_Name)
          //console.log(req.body[i].Reason_Not_Green)
          //console.log(req.body[i].goto_Green)
          if(req.body[i].Owner_Name === "undefined"){
            Owner_Name = ''
          }else{
            Owner_Name = req.body[i].Owner_Name;
          }

          if(req.body[i].Reason_Not_Green === "undefined"){
            Reason_Not_Green = ''
          }else{
            Reason_Not_Green = req.body[i].Reason_Not_Green;
          }

          if(req.body[i].goto_Green === "undefined"){
            goto_Green = ''
          }else{
            goto_Green = req.body[i].goto_Green;
          }

          saveappLevelSpPlan = "insert into appln_level_sprint_plan values (" 
          + AppLevelSPUNID + ",'" 
          + Scope_UNID + "','"           
          + IntegrationID + "','"           
          + Plan_Start_Date + "','" 
          + Plan_End_Date + "','" 
          + Replan_Start_Date + "','" 
          + RePlan_End_Date + "','" 
          + Actual_Start_Date + "','" 
          + Actual_End_Date + "','" 
          + plannedCompletePercent + "','" 
          + actualCompletePercent + "','" 
          + schVariance + "','"
          + status + "','"  
          + ktSummary + "','" 
          + remarks + "','" 
          + createdBy + "','" 
          + modifiedBy + "','" 
          + createdAT + "','" 
          + modifiedAT + "','"           
          + Baselined + "','"           
          + epicUNID + "','"           
          + sprintUNID + "','"  
          + insertFlag + "','"  
          + Owner_Name + "','"  
          + Reason_Not_Green + "','"  
          +  goto_Green + "')"
                    
          
          

// console.log(saveappLevelSpPlan)
          conn.query(saveappLevelSpPlan).then((saveappLevelSpPlanresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  console.log(err)
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
      console.log(err)
      console.log("not connected")
  });

  if (endres === true) {
      res.send({"0":{"save": "success"}});
  } else {
      res.send({"0":{"save": "fail"}});
  }

})

app.put('/putappLevelSpPlanResult', (req, res) => {
  //console.log("put")
  var endres = true
  var len = req.body.length
   pool.getConnection().then(conn => {
      for (var i in req.body) {
        AppLevelSPUNID = req.body[i].AppLevelSPUNID;
        Scope_UNID = req.body[i].Scope_UNID        
        status = req.body[i].status        
        IntegrationID = req.body[i].Scope_IntegrationID          
        var dt=moment(new Date());        
        if(req.body[i].Plan_Start_Date === "undefined" || req.body[i].Plan_Start_Date === "Invalid date" || req.body[i].Plan_Start_Date === "" || req.body[i].Plan_Start_Date === null){ 
          Plan_Start_Date='0000-00-00 00:00:00'; 
        }else{           
          var dt=moment(req.body[i].Plan_Start_Date);  
          Plan_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
        }
        if(req.body[i].Plan_End_Date === "undefined" || req.body[i].Plan_End_Date === "Invalid date" || req.body[i].Plan_End_Date === "" || req.body[i].Plan_End_Date === null){
          Plan_End_Date='0000-00-00 00:00:00';
        }else{
          var dt=moment(req.body[i].Plan_End_Date);  
          Plan_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
        }
        if(req.body[i].Replan_Start_Date === "undefined" || req.body[i].Replan_Start_Date === "Invalid date"  || req.body[i].Replan_Start_Date === "" || req.body[i].Replan_Start_Date === null){            
          Replan_Start_Date='0000-00-00 00:00:00';
        }else{
          var dt=moment(req.body[i].Replan_Start_Date);  
          Replan_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD"); 
        }
        if(req.body[i].RePlan_End_Date === "undefined" || req.body[i].RePlan_End_Date === "Invalid date" || req.body[i].RePlan_End_Date === "" || req.body[i].RePlan_End_Date === null){
          RePlan_End_Date='0000-00-00 00:00:00';
        }else{
          var dt=moment(req.body[i].RePlan_End_Date);  
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
        }  
        if(req.body[i].Actual_Start_Date === "undefined" || req.body[i].Actual_Start_Date === "Invalid date" || req.body[i].Actual_Start_Date === "" || req.body[i].Actual_Start_Date === null){
          Actual_Start_Date='0000-00-00 00:00:00';
        }else {
          var dt=moment(req.body[i].Actual_Start_Date);  
          Actual_Start_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
        }
        if(req.body[i].Actual_End_Date === "undefined" || req.body[i].Actual_End_Date === "Invalid date" || req.body[i].Actual_End_Date === "" || req.body[i].Actual_End_Date === null){
          Actual_End_Date='0000-00-00 00:00:00';
        }else{
          var dt=moment(req.body[i].Actual_End_Date);  
          Actual_End_Date=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");    
        }
        plannedCompletePercent = +req.body[i].psCompleted_per;
        actualCompletePercent = +req.body[i].asCompleted_per;
        schVariance = +req.body[i].sch_Var
        if(req.body[i].ktSummary === "undefined"){
            ktSummary = ''
        }else{
          ktSummary = req.body[i].ktSummary
        }
        //console.log(req.body[i].Remarks)
        if(req.body[i].Remarks === "undefined"){
          remarks = ''
        }else{
          remarks = req.body[i].Remarks;
        }      
        var createdBy = req.body[i].createdBy;
        var modifiedBy = req.body[i].modifiedBy;      
        var createdAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
        var modifiedAT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
        Baselined=0 
        epicUNID = req.body[i].epicUNID;
        sprintUNID = req.body[i].sprintUNID
        DinsertFlag = req.body[i].DinsertFlag
        insertFlag = 1
        if(req.body[i].Owner_Name === "undefined"){
          Owner_Name = ''
        }else{
          Owner_Name = req.body[i].Owner_Name;
        }

        if(req.body[i].Reason_Not_Green === "undefined"){
          Reason_Not_Green = ''
        }else{
          Reason_Not_Green = req.body[i].Reason_Not_Green;
        }

        if(req.body[i].goto_Green === "undefined"){
          goto_Green = ''
        }else{
          goto_Green = req.body[i].goto_Green;
        }

        // console.log(DinsertFlag)        
          if(DinsertFlag === null ){        
            updatespLevelplandata = "insert into appln_level_sprint_plan values (" 
                + AppLevelSPUNID + ",'" 
                + Scope_UNID + "','"           
                + IntegrationID + "','"           
                + Plan_Start_Date + "','" 
                + Plan_End_Date + "','" 
                + Replan_Start_Date + "','" 
                + RePlan_End_Date + "','" 
                + Actual_Start_Date + "','" 
                + Actual_End_Date + "','" 
                + plannedCompletePercent + "','" 
                + actualCompletePercent + "','" 
                + schVariance + "','"
                + status + "','"  
                + ktSummary + "','" 
                + remarks + "','" 
                + createdBy + "','" 
                + modifiedBy + "','" 
                + createdAT + "','" 
                + modifiedAT + "','"           
                + Baselined + "','"           
                + epicUNID + "','"           
                + sprintUNID + "','"  
                + insertFlag + "','"  
                + Owner_Name + "','"  
                + Reason_Not_Green + "','"  
                + goto_Green + "')"       
          }else{          
                updatespLevelplandata ="Update appln_level_sprint_plan SET Plan_Start_Date='"
                +Plan_Start_Date                    
                +"',Plan_End_Date='"+Plan_End_Date
                +"',Replan_Start_Date='"+Replan_Start_Date
                +"',RePlan_End_Date='"+RePlan_End_Date
                +"',Actual_Start_Date='"+Actual_Start_Date
                +"',Actual_End_Date='"+Actual_End_Date
                +"',psCompleted_per='"+plannedCompletePercent
                +"',asCompleted_per='"+actualCompletePercent
                +"',sch_Var='"+schVariance
                +"',status='"+status
                +"',ktSummary='"+ktSummary
                +"',remarks='"+remarks
                +"',modifiedBy='"+modifiedBy
                +"',Owner_Name='"+Owner_Name
                +"',Reason_Not_Green='"+Reason_Not_Green
                +"',goto_Green='"+goto_Green
                
                +"' where AppLevelSPUNID='"+AppLevelSPUNID+"'"

              

          }
          //console.log(updatespLevelplandata)          
          conn.query(updatespLevelplandata).then((updatespLevelplandataresult) => {
                   conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
        }).catch(err => {
          //not connected
      });

  if (endres === true) {    
      res.send({"0":{"insert": "success"}});
  } else {    
      res.send({"0":{"insert": "fail"}});
  }
});

app.put('/appLevelTSPBaseline', (req, res) => {
    var endres = true
    var len = req.body.length
    pool.getConnection().then(conn => {
        for (var i in req.body) {
          AppLevelSPUNID = req.body[i].AppLevelSPUNID;
            putTailoredSBBaselineQuery =
                "Update appln_level_sprint_plan SET Baselined=1 where AppLevelSPUNID='" + AppLevelSPUNID + "'"
                //console.log(putTailoredSBBaselineQuery)
            conn.query(putTailoredSBBaselineQuery).then((putTailoredSBBaselineQueryresult) => {
                    conn.end();
                })
                .catch(err => {
                    endres = false;
                    //handle error
                    // res.send({"save" : "Fail" })
                    conn.end();
                })
        }
    }).catch(err => {
        //not connected
    });

    if (endres === true) {
        res.send({
            "0": {
                "insert": "success"
            }
        });
    } else {
        res.send({
            "0": {
                "insert": "fail"
            }
        });
    }
});
//Application level sprint plan end

 // Getting  Scope Level values for radio
 app.get("/getScopeLvels",(req,res)=>{
  querygetScopeLvelsyword = "select * from adminprofile WHERE FieldCategoryName='ScopeLevel'" ; 
  pool.getConnection().then(conn => {        
        conn.query(querygetScopeLvelsyword).then((getScopeLvelsywordResult) => {           
            res.send(getScopeLvelsywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
});

app.get("/getScopeTaskLvels",(req,res)=>{
  querygetScopeTaskLvelsyword = "select * from adminprofile WHERE FieldCategoryName='ScopeTaskLevel'" ; 
  pool.getConnection().then(conn => {        
  
    conn.query(querygetScopeTaskLvelsyword).then((getScopeTaskLvelsywordResult) => {           
            res.send(getScopeTaskLvelsywordResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err => {
        //not connected
      });
});

//seven key report
function SevenKeyMastertemplate(pptx, commslide, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend, LegendKey){
  var imagepath =__dirname+'\\src\\assets\\IBM white.png';
  commslide.addImage({ path:imagepath, x:9, y:0.03, w:0.66, h:0.34 })

  var rows = [];
 // var colW=[1.0, 0.4, 0.37,0.54,0.51]
  var colW=[1, 0.65, 0.65,0.94,0.54]
  rows.push([
  { text:'Legend'},
  { text:'No Risk', options:{fill:'008000',color:'FFFFFF'}},
  { text:'At Risk', options:{fill:'FFC000',color:'FFFFFF'}},
  { text:'In Jeopardy', options:{fill:'FF0000',color:'FFFFFF'}},
  { text:'Completed', options:{fill:'00B0F0',color:'FFFFFF'}},
  ]
 );

  commslide.addTable( rows, {colW:colW,fontSize:7,fontFace:'Calibri', x:5.36, y:0.67, h:0.2} );
if (LegendKey === 'EpicScopeLegend'){

  var rows = [];
  var colW=[1, 0.52, 0.92, 1.33]
  rows.push([
  { text:'Row Legend'},
  { text:'EPIC', options:{fill:'C0C0C0'}},
  { text:'Sprint', options:{fill:'E0FFFF'}},
  { text:'Scope Stream', options:{fill:'FFFFE0'}},
  ]);
    commslide.addTable( rows, {colW:colW,fontSize:7,fontFace:'Calibri', x:5.36, y:0.88, h:0.2} );

} else if(LegendKey === 'ScopeLegend'){
  var rows = [];
  var colW=[1, 0.69, 0.5, 0.6, 1]
  rows.push([
  { text:'Row Legend'},
  { text:'OverAll', options:{fill:'fdeada'}},
  { text:'EPIC', options:{fill:'C0C0C0'}},
  { text:'Sprint', options:{fill:'E0FFFF'}},
  { text:'Scope Stream', options:{fill:'FFFFE0'}},
  ]);
    commslide.addTable( rows, {colW:colW,fontSize:7,fontFace:'Calibri', x:5.36, y:0.88, h:0.2} );
  }

  //, 
commslide.addText('Project: ', {fontSize:12, bold:true, w:9,x:0.1, y:0.1, color:'00B0F0'});
commslide.addText(SevenkeyAccount, {fontSize:12, bold:true, w:9,x:1, y:0.1, color:'660099'});
  var rows = [];
  rowH =[0.15,0.35]
  //  top left bottom right
  let arrBorder = [{pt: '1'}, {pt: '0'}, {pt: '1'}, {pt: '1'}]
  let arrBorderT = [{pt: '1'}, {pt: '0'}, {pt: '0'}, {pt: '0'}]
  rows.push([
    { text:'Report for Week Ending Date : ',options:{fontSize:9, color:'660099', border: {pt: '0'}}},
   { text:weekend_date,options:{fontSize:9, color:'660099',border: arrBorder}},
    ]);
  rows.push([
    { text:'Transition Manager: ',options:{fontSize:9, color:'660099', border: {pt: '0'}}}, 
    { text:'' ,options:{fontSize:9, color:'660099',border: arrBorderT}},
    ]);
    // console.log(TRantionTeamList.join(','))
    commslide.addTable( rows, {rowH:rowH, x:0.2, y:0.4, w:4, h:0.4, color:'363636'} );
    commslide.addText(TRantionTeamList.join(','),{valign:'Top',fontSize:8,x:2.1, y:0.63, h:0.64, w:3.26,color:'660099'});

  var rows = [];
  var colW=[1.2, 1.2, 0.4]
  var rowH=[0.2,0.3]
  rows.push([{ text:'Previous week status'}, { text:'Reporting Week Status'}, { text:'Trend'},]);
  rows.push([{ text:''}, { text:''}, { text:''},]);
  commslide.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:5.36, y:0.03} );
  commslide.addShape(pptx.shapes.OVAL,{ x:5.65, y:0.26, w:0.38, h:0.22, fill: LastweekOverRAG , line:'000000', lineSize:1  });
  commslide.addShape(pptx.shapes.OVAL,{ x:6.91, y:0.26, w:0.38, h:0.22, fill: CurweekOverRAG, line:'000000', lineSize:1  });
  if(CurweekTrend === 'up'){
    commslide.addShape(pptx.shapes.UP_ARROW,{ x:7.91, y:0.26, w:0.14, h:0.25,fill:'800080', lineSize:1  });
  }else if(CurweekTrend === 'down'){
    commslide.addShape(pptx.shapes.DOWN_ARROW,{ x:7.91, y:0.26, w:0.14, h:0.25,fill:'800080', lineSize:1  });      
  }else if(CurweekTrend === 'same_status'){
    commslide.addShape(pptx.shapes.LEFT_RIGHT_ARROW,{ x:7.83, y:0.3, w:0.27, h:0.15,fill:'800080', lineSize:1  });
  }
} 

// //7 Key report start
app.get('/ExportkeyPPT/:USername/:lastWeekDate/:weekend_date/:IntegrationID/:TAccName', (req, res) => {
  SevenkeyAccount = '';
  SevenkeyArr = [];
  ScopeKeyArr = [];
  TeamkeyArr = [];
  RiskskeyArr = [];
  OrgkeyArr = [];
  WorkkeyArr = [];
  BuskeyArr = [];
  FinkeyArr = [];
  Del_StatusArr = [];
  Key_RiskArr = [];
  Key_IssueArr = [];
  Key_ActionArr = [];
  Key_DependenciesArr = [];
  Detailval = [];
  var RAGGreen= '#008000';
  var RAGAmber = '#FFC000';
  var RAGRed = '#FF0000';
  var RAGGray = '#A6A6A6';
  var RAGWhite = '#FFFFFF';
  var RAGBlue = '#00B0F0';

  var USername = req.params.USername; 
  var Intval = req.params.IntegrationID;
  var IntegrationID = Intval.split(".")[0];
   
  if (req.params.lastWeekDate === 'undefined') {
    
    var bckLastWeekdate = 'Invalid date'
  } else {
    
    var lastdt=moment(req.params.lastWeekDate);
    var bckLastWeekdate =moment([lastdt.year(), lastdt.month(), lastdt.date(),lastdt.hours(),lastdt.minutes(),lastdt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
   
  }
  var dt=moment(req.params.weekend_date);
  var weekend_date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
  var bckWeekdate =moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");

  filename = "SevenKeyReport-"+USername.replace(/\s/g,'');
  var filePath = __dirname+'\\'+filename+'.pptx';

  var pptx = new PptxGenJS();
  if (bckLastWeekdate === 'Invalid date') {
    LastweekOverRAG = 'FFFFFF'
  } else {
  queryLastweekRAG = "Select overall_rag from sevenkey where IntegrationID = '" + IntegrationID + "' AND weekend_date= '" + bckLastWeekdate + "'";
  pool.getConnection().then(conn => {
    conn.query(queryLastweekRAG).then((queryLastweekRAGRes) => {     
      var lastwkRAG = JSON.parse(JSON.stringify(queryLastweekRAGRes));
        setTimeout(() => { 
            if(lastwkRAG[0]["overall_rag"] === 'green'){
              LastweekOverRAG = '008000'
             }else  if(lastwkRAG[0]["overall_rag"] === 'amber'){
              LastweekOverRAG = 'ffbf00'
             }else  if(lastwkRAG[0]["overall_rag"] === 'red'){
              LastweekOverRAG = 'FF0000'
           }  
        }, 2000)                 
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });
}

queryIntAccount = "Select * from transitionprofile where IntegrationID = '" + IntegrationID + "'";
  pool.getConnection().then(conn => {
    conn.query(queryIntAccount).then((queryIntAccountRes) => {
      var SevenAccount = JSON.parse(JSON.stringify(queryIntAccountRes));
        setTimeout(() => { 
          for( let i=1; i< SevenAccount.length+1; i++){
            SevenkeyAccount = SevenAccount[i-1]["ClientName"]  
          }  
        }, 2000)           
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Transition Team//
  queryTransitionTeam= "Select USER_FULLNAME from user_transition where TRANSITION_ID = '" + IntegrationID +"' AND USER_TYPE = 'Transition'" ;

  TRantionTeamList =[];
  pool.getConnection().then(conn => {
    conn.query(queryTransitionTeam).then((queryTransitionTeamRes) => {
      SevenkeyTransition = JSON.parse(JSON.stringify(queryTransitionTeamRes));
              setTimeout(() => { 
          for( let i=1; i< SevenkeyTransition.length+1; i++){
            if (SevenkeyTransition[i-1]["USER_FULLNAME"] !== null) {
            TRantionTeamList.push(SevenkeyTransition[i-1]["USER_FULLNAME"])
            }
          }  
        }, 2000)           
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //End Transition Team//

  //Deliverable Status start //
  queryIntDelviverables = "Select * from contractualdeliverables where IntegrationID = '" + IntegrationID + "'";
  pool.getConnection().then(conn => {
    conn.query(queryIntDelviverables).then((queryIntDelviverablesRes) => {
       Del_StatusArr  = JSON.parse(JSON.stringify(queryIntDelviverablesRes));
             
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Deliverabale status end//


  //Key Risk //
  queryIntKeyRisk = "Select Risk from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
    pool.getConnection().then(conn => {
    conn.query(queryIntKeyRisk).then((queryIntKeyRiskRes) => {
   
      setTimeout(() => { 
        let arr =[];
        if (queryIntKeyRiskRes.length !==0){
           if (queryIntKeyRiskRes[0].Risk !== null && queryIntKeyRiskRes[0].Risk.includes(',') === true  ) { 
        
          arr =queryIntKeyRiskRes[0].Risk.split(',');
                  } else if (queryIntKeyRiskRes[0].Risk === null) {
         
          Key_RiskArr=[];
         }
         else{
          
          arr.push(queryIntKeyRiskRes[0].Risk);
          }  
        }       
       // for( let i=1; i< arr.length+1; i++){
          pool.getConnection().then(conn => {
           queryIntKey_Risk ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName) ,"+
           " r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType, r.ImpactConsequences,"+
           " r.Probability,r.ScopeLevel,e.epicName,s.sprintName,a.AppName,ss.Scope_BacklogActivity,"+
           " CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
           "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#e0ffff',"+
           "IF( e.epicName != 'null','#c0c0c0','#FDEADA'))) as color,"+
          " r.scopeOverall from Raid r"+
          " LEFT JOIN epics e on r.epicUNID = e.epicUNID"+
          " LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID"+
          " LEFT JOIN application_information a on r.AppUNID = a.AppUNID"+
          " LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid"+
           " LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID"+ 
           " where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+")"+
           " ORDER BY 1;"
                 
             conn.query(queryIntKey_Risk).then((queryIntKey_RiskRes) => {
                                           // if (JSON.parse(JSON.stringify(queryIntKey_RiskRes)) !== ''){
                           Key_RiskArr.push(JSON.parse(JSON.stringify(queryIntKey_RiskRes)))
             conn.end();

              })
        
         
           
                  .catch(err => {
                      conn.end();
                  })
                }).catch(err => {
                  //not connected
              });
            
           // } 
            }, 2000);
          
                    conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Key Risk end//

  //Key Issue //
  queryIntKeyIssue = "Select Issue from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
       pool.getConnection().then(conn => {
    conn.query(queryIntKeyIssue).then((queryIntKeyIssueRes) => {
      setTimeout(() => { 
        let arr=[];
        if (queryIntKeyIssueRes.length !==0){
        if (queryIntKeyIssueRes[0].Issue !== null && queryIntKeyIssueRes[0].Issue.includes(',') === true ) { 
                 arr =queryIntKeyIssueRes[0].Issue.split(',');
        } else if (queryIntKeyIssueRes[0].Issue === null ) {
          Key_IssueArr=[];
                   }
         else{
                                 arr.push(queryIntKeyIssueRes[0].Issue);
                               }
                              }
    
                   pool.getConnection().then(conn => {
               // queryIntKey_Issue = "Select * from raid where RaidID = '" + arr[i-1] + "' AND  IntegrationID='"+IntegrationID+ "'";
                
               queryIntKey_Issue ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
               "r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ShowStopper,r.ScopeLevel,"+
               "ss.Scope_BacklogActivity, "+
               "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
               "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#e0ffff',"+
               "IF( e.epicName != 'null','#c0c0c0','#FDEADA'))) as color,"+
               "e.epicName,s.sprintName,a.AppName from Raid r "+
               "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
               "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
               "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
               "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
               "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
               "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"

                 conn.query(queryIntKey_Issue).then((queryIntKey_IssueRes) => {
                                    Key_IssueArr.push(JSON.parse(JSON.stringify(queryIntKey_IssueRes))) 
                                        conn.end();
                    
                 })            
                
                  .catch(err => {
                      conn.end();
                  })
                 }).catch(err => {
                  //not connected
             
                });
          
             // }
                        }, 2000);
            
                      
                    conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Key issues end//

  //Key Actions //
  
  queryIntKeyActions = "Select Action from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
  pool.getConnection().then(conn => {
    conn.query(queryIntKeyActions).then((queryIntKeyActionsRes) => {
   
      setTimeout(() => { 
        let arr=[];
        if (queryIntKeyActionsRes.length !==0){
        if (queryIntKeyActionsRes[0].Action !== null && queryIntKeyActionsRes[0].Action.includes(',') === true ) { 
          arr =queryIntKeyActionsRes[0].Action.split(',');
        } else if (queryIntKeyActionsRes[0].Action === null) {
          Key_ActionArr=[];
         }
         else{
          arr.push(queryIntKeyActionsRes[0].Action);
              }
        }           
         pool.getConnection().then(conn => {
                queryIntKey_Actions = "select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
                "r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ScopeLevel,e.epicName,"+
                "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
                "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#e0ffff',"+
                 "IF( e.epicName != 'null','#c0c0c0','#FDEADA'))) as color,"+
                "ss.Scope_BacklogActivity,s.sprintName,a.AppName from Raid r "+
                "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
                "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID "+ 
                "LEFT JOIN application_information a on r.AppUNID =a.AppUNID "+
                "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
                "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
                "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"
                  conn.query(queryIntKey_Actions).then((queryIntKey_ActionsRes) => {
                                    Key_ActionArr.push(JSON.parse(JSON.stringify(queryIntKey_ActionsRes))) 
                                        conn.end();
                    
                 })
             
           
                  .catch(err => {
                      conn.end();
                  })
                }).catch(err => {
                  //not connected
              });
            
             
            }, 2000);
          
                    conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Key Action end//

  //Key Dependencies //
  queryIntKeyDependencies = "Select Dependency from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
  
      pool.getConnection().then(conn => {
    conn.query(queryIntKeyDependencies).then((queryIntKeyDependenciesRes) => {
   
      setTimeout(() => { 
        let arr=[];
        if (queryIntKeyDependenciesRes.length !==0){
        if (queryIntKeyDependenciesRes[0].Dependency !== null && queryIntKeyDependenciesRes[0].Dependency.includes(',') ) { 
          arr =queryIntKeyDependenciesRes[0].Dependency.split(',');
        } else if (queryIntKeyDependenciesRes[0].Dependency === null) {
          Key_DependenciesArr=[]; 
         }
         else{
          arr.push(queryIntKeyDependenciesRes[0].Dependency);
         }
        } 
     
                    pool.getConnection().then(conn => {
                      
                      queryIntKey_Dependencies ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
                     " r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ScopeLevel,r.ImpactConsequences,ss.Scope_BacklogActivity, "+
                      "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity), r.scopeOverall,"+
                      "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#e0ffff',"+
                      "IF( e.epicName != 'null','#c0c0c0','#FDEADA'))) as color,"+
                      "e.epicName,s.sprintName,a.AppName from Raid r "+
                      "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
                      "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
                      "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
                      "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
                      "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
                      "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"
                  
                               conn.query(queryIntKey_Dependencies).then((queryIntKey_DependenciesRes) => {
                                    Key_DependenciesArr.push(JSON.parse(JSON.stringify(queryIntKey_DependenciesRes))) 
                                        conn.end();
                    
                 })
             
           
                  .catch(err => {
                      conn.end();
                  })
                }).catch(err => {
                  //not connected
              });
                        
            }, 2000);
          
                    conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

  //Key Dependencies end//

  //
// stert Detail schedule 

queryDSchedule ="SELECT  epicName, '', '', epicName, epicName,"+
" rag,startDate,endDate,replanStartDate,replanEndDate,actualStartDate,"+
" actualEndDate, 'color' from epics WHERE IntegrationID= '" + IntegrationID + "'"+
" UNION"+
" SELECT ep.epicName, s.sprintName,'', CONCAT(ep.epicName, '-', IF(s.scopelevel='Others', CONCAT('T', s.scopelevel), s.scopelevel), '-', s.sprintName), CONCAT(ep.epicName, '-', s.scopelevel, '-', s.sprintName), s.rag,"+
" s.startDate, s.endDate, s.replanStartDate,"+
" s.replanEndDate,s.actualStartDate,s.actualEndDate ,'#E0FFFF'"+
" from sprint s"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=s.epicUNID"+
" WHERE s.IntegrationID= '" + IntegrationID + "'"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, ai.AppName, CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-',ai.AppName),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-',ai.AppName),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM application_information ai"+
" LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE ai.IntegrationID= '" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>''"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, stc.STScopeLevel,"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM masterstinfo stc"+
" LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE stc.IntegrationID='" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>''"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, sc.Scope_BacklogActivity,"+
" CONCAT(ep.epicName, '-T', sc.Scope_Level, '-', sp.sprintName, '-', sc.Scope_BacklogActivity),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', sc.Scope_BacklogActivity),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM sprintscope sc"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE sc.Scope_IntegrationID= '" + IntegrationID + "'and ep.epicName<>'' and sp.sprintName<>''"+
" and sc.Scope_BacklogActivity<>'' ORDER BY 4;"

  pool.getConnection().then(conn => {
    conn.query(queryDSchedule).then((queryDScheduleRes) => {
     Detailval.push(JSON.parse(JSON.stringify(queryDScheduleRes))); 
       conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });

//End Details Schedule
  queryExportkeyPPT = "Select * from sevenkey where IntegrationID = '" + IntegrationID + "' AND weekend_date= '" + bckWeekdate + "'";
     pool.getConnection().then(conn => {
    conn.query(queryExportkeyPPT).then((queryExportkeyPPTRes) => {
      var Sevenkeyval = JSON.parse(JSON.stringify(queryExportkeyPPTRes));
        setTimeout(() => { 
          for( let i=1; i< Sevenkeyval.length+1; i++){
            var dt=moment(Sevenkeyval[i-1]["weekend_date"]);
            var wkDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
            SevenkeyArr.push(wkDate) 
           if(Sevenkeyval[i-1]["scope_color"] === 'green'){
            ScopeKeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["scope_comment"])
           }else  if(Sevenkeyval[i-1]["scope_color"] === 'amber'){
            ScopeKeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["scope_comment"])
           }else  if(Sevenkeyval[i-1]["scope_color"] === 'red'){
            ScopeKeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["scope_comment"])
           }else{
            ScopeKeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["scope_comment"])
           }  

           if(Sevenkeyval[i-1]["team_color"] === 'green'){
            TeamkeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["team_comment"])
           }else  if(Sevenkeyval[i-1]["team_color"] === 'amber'){
            TeamkeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["team_comment"])
           }else  if(Sevenkeyval[i-1]["team_color"] === 'red'){
            TeamkeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["team_comment"])
           }else{
            TeamkeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["team_comment"])
           }  

           if(Sevenkeyval[i-1]["risk_color"] === 'green'){
            RiskskeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["risk_comment"])
           }else  if(Sevenkeyval[i-1]["risk_color"] === 'amber'){
            RiskskeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["risk_comment"])
           }else  if(Sevenkeyval[i-1]["risk_color"] === 'red'){
            RiskskeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["risk_comment"])
           }else{
            RiskskeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["risk_comment"])
           }  

           if(Sevenkeyval[i-1]["organization_color"] === 'green'){
            OrgkeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["organization_comment"])
           }else  if(Sevenkeyval[i-1]["organization_color"] === 'amber'){
            OrgkeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["organization_comment"])
           }else  if(Sevenkeyval[i-1]["organization_color"] === 'red'){
            OrgkeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["organization_comment"])
           }else{
            OrgkeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["organization_comment"])
           }   

           if(Sevenkeyval[i-1]["work_color"] === 'green'){
            WorkkeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["work_comment"])
           }else  if(Sevenkeyval[i-1]["work_color"] === 'amber'){
            WorkkeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["work_comment"])
           }else  if(Sevenkeyval[i-1]["work_color"] === 'red'){
            WorkkeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["work_comment"])
           }else{
            WorkkeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["work_comment"])
           }  

           if(Sevenkeyval[i-1]["business_color"] === 'green'){
            BuskeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["business_comment"])
           }else  if(Sevenkeyval[i-1]["business_color"] === 'amber'){
            BuskeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["business_comment"])
           }else  if(Sevenkeyval[i-1]["business_color"] === 'red'){
            BuskeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["business_comment"])
           }else{
            BuskeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["business_comment"])
           }  

           if(Sevenkeyval[i-1]["financial_color"] === 'green'){
            FinkeyArr.push('008000$sl!pt$'+Sevenkeyval[i-1]["financial_comment"])
           }else  if(Sevenkeyval[i-1]["financial_color"] === 'amber'){
            FinkeyArr.push('ffbf00$sl!pt$'+Sevenkeyval[i-1]["financial_comment"])
           }else  if(Sevenkeyval[i-1]["financial_color"] === 'red'){
            FinkeyArr.push('FF0000$sl!pt$'+Sevenkeyval[i-1]["financial_comment"])
           }else{
            FinkeyArr.push('FFFFFF$sl!pt$'+Sevenkeyval[i-1]["financial_comment"])
           }  

           if(Sevenkeyval[i-1]["overall_rag"] === 'green'){
            CurweekOverRAG = '008000'
           }else  if(Sevenkeyval[i-1]["overall_rag"] === 'amber'){
            CurweekOverRAG = 'ffbf00'
           }else  if(Sevenkeyval[i-1]["overall_rag"] === 'red'){
            CurweekOverRAG = 'FF0000'
           }  

           CurweekTrend = Sevenkeyval[i-1]["trend_as"];
           CurweekProgress = Sevenkeyval[i-1]["current_week_program"];
           NextweekPlan = Sevenkeyval[i-1]["next_week_plan"];
           CurweekSummary = Sevenkeyval[i-1]["summary_for_program"];
          }  
        }, 6000)           
      // res.send(queryExportkeyPPTRes)
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
    }).catch(err => {
      //not connected
  });


   setTimeout(() => {     
    //Slide 1
    var slide1 = pptx.addNewSlide();
    var rows = [];
    rows.push([{ text:'',options:{fill:'00B0F0', color:'fdfefe'}}]);
    slide1.addTable( rows, { x:0.43, y:0.27, w:9, h:5, color:'00B0F0'} );  
    var imagepath =__dirname+'\\src\\assets\\IBM blue.png';
    slide1.addText('<Client Logo>', {fontSize:12, w:1.5,x:3, y:1, align:'l',valign:'b',color:'000000'});
    slide1.addImage({ path:imagepath, x:1, y:1, w:1.4, h:0.58 })    
    slide1.addText(SevenkeyAccount, {fontSize:15, bold:true, w:9,x:.43, y:3.5, color:'fdfefe', align:'c'});
    slide1.addText('Transition Management', {fontSize:15, bold:true, w:9,x:.43, y:3.8, color:'fdfefe', align:'c'});
    slide1.addText('Weekly Status Report – Week Ending '+weekend_date, {fontSize:15, bold:true, w:9,x:.431, y:4.1, color:'fdfefe', align:'c'});
    
    rows.push([
      { text:'Week End Date',options:{fill:'2471a3', color:'fdfefe',valign:'c'}} ,  { text:'' , options:{fill:'2471a3', color:'fdfefe',align:'l'  }}, { text:'' , options:{fill:'2471a3', color:'fdfefe',align:'l' }}
      ]);
 
//slide2
 var slide2 = pptx.addNewSlide();   
   SevenKeyMastertemplate(pptx, slide2, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'NoScopeLegend')
    
   var rows = []; 
      var colW=[4.79]
      var rowH=[4.05]
      rows.push([
      { text:''},
      ]);
       slide2.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:0.21, y:1.19} );
       slide2.addText('7 Keys Status', {fontSize:8, bold:true, w:4,x:0.23, y:1.20, color:'800080'});
           
     var rows = [];
       var colW=[1.5,3]
       var rowH=[0.1,0.4,0.4,0.4,0.4,0.4,0.4,0.4]
       var options1= {fill:'0070C0', color:'fdfefe', align:'c', valign:'c', bold:true}
  
      rows.push([
        { text:'7 Key', options:options1},
        { text:'Comments', options:{fill:'0070C0', color:'fdfefe',align:'c'} }
        ]);
        
        if (ScopeKeyArr.length !== 0) {
          rows.push([
            { text:'Scope is realistic and Managed'},
             { text:ScopeKeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:ScopeKeyArr[0].split("$sl!pt$")[0]} }
            ]);
        } else {
          rows.push([
            { text:'Scope is realistic and Managed'},
             { text:'' }
            ]);
        }
      
        if (TeamkeyArr.length !== 0) {
      rows.push([
          { text:'Team is high performing' },
           { text:TeamkeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:TeamkeyArr[0].split("$sl!pt$")[0]} }
          ]);
        } else {
          rows.push([
          { text:'Team is high performing' },
          { text:'' }
         ]); 
        }

        if (RiskskeyArr.length !== 0) {
                rows.push([
            { text:'Risks are mitigated' },
             { text:RiskskeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:RiskskeyArr[0].split("$sl!pt$")[0]} }
            ]);
          } else {
            rows.push([
              { text:'Risks are mitigated' },
               { text:'' }
              ]); 
          }
          if (OrgkeyArr.length !== 0) {
      rows.push([
              { text:'Organization Benefits are realized' },
               { text:OrgkeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:OrgkeyArr[0].split("$sl!pt$")[0]} }
              ]);
            } else {
              rows.push([
                { text:'Organization Benefits are realized' },
                 { text:'' }
                ]);
            }
            if (WorkkeyArr.length !== 0) {
      rows.push([
                { text:'Work and Schedule are predictable'},
                 { text:WorkkeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:WorkkeyArr[0].split("$sl!pt$")[0]} }
                ]);
              } else {
                rows.push([
                  { text:'Work and Schedule are predictable'},
                   { text:'' }
                  ]);  
              }
              if (BuskeyArr.length !== 0) {
      rows.push([
                  { text:'Business benefits are realized' },
                   { text:BuskeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:BuskeyArr[0].split("$sl!pt$")[0]} }
                  ]);
                } else {
                  rows.push([
                    { text:'Business benefits are realized' },
                     { text:'' }
                    ]);   
                }
                if (FinkeyArr.length !== 0) {
      rows.push([
                    { text:'Financials in control'},
                     { text:FinkeyArr[0].split("$sl!pt$")[1].replace(/\n/g,''), options:{fill:FinkeyArr[0].split("$sl!pt$")[0]} }
                    ]);
                  } else {
                    rows.push([
                    { text:'Financials in control'},
                    { text:'' }
                   ]);  
                  }
      slide2.addTable( rows, {lineWeight:1.0,colW:colW,rowH:rowH,fontSize:9,fontFace:'Calibri', x:0.39, y:1.55, border:{pt:'1', color:'D3D3D3'}});

       var rows = [];
      var colW=[4.0]
      var rowH=[1.35 ,1.35,1.35]
      rows.push([
      { text:''},
      ]);
      rows.push([
        { text:''},
        ]);
        rows.push([
          { text:''},
          ]);
       slide2.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:5.36, y:1.19} );
       slide2.addText('Summary for program for the week:', {fontSize:8, fontFace:'Calibri',bold:true, w:4,x:5.38, y:1.15, color:'800080'});
       slide2.addText(CurweekSummary.replace(/\n/g,''), {valign:'Top',fontSize:7,fontFace:'Calibri', w:4,x:5.38, y:1.38});
       
       slide2.addText('Current Week Progress:', {fontSize:8,fontFace:'Calibri', bold:true, w:4,x:5.38, y:2.5, color:'800080'});
       slide2.addText(CurweekProgress.replace(/\n/g,''), {valign:'Top',fontSize:7,fontFace:'Calibri', w:4,x:5.38, y:2.77});

       slide2.addText('Plan for the Next Week: ', {fontSize:8,fontFace:'Calibri', bold:true, w:4,x:5.38, y:3.85, color:'800080'});
       slide2.addText(NextweekPlan.replace(/\n/g,''), {valign:'Top',fontSize:7,fontFace:'Calibri', w:4,x:5.38, y:4.14});
      
      
      
       //Slide 3 Key Risk
       let filedarr=[];
       let rowval=[];
       
      filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences','Probability']

    if (Key_RiskArr.length !== 0) {
            var Rowstend =[]
        var SRow= 0;
        var ERow= 0;
        var rowcount =0;
        var flag="No"
        var strlength =0;
        var strlengthlevel =0;

       

        for( let i=0; i< Key_RiskArr[0].length; i++){

          rowcount=rowcount+1
           var str = JSON.stringify(Key_RiskArr[0][i]['Description']); 
            // strlength=strlength+str.length         
            
          var level =Key_RiskArr[0][i]['epicName'];
          if(Key_RiskArr[0][i]['ScopeLevel'] !== null && Key_RiskArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_RiskArr[0][i]['ScopeLevel']
          }
          if (Key_RiskArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_RiskArr[0][i]['sprintName']
          }
         
          if(Key_RiskArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_RiskArr[0][i]['AppName']
          }else if(Key_RiskArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_RiskArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_RiskArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_RiskArr[0][i]['Scope_BacklogActivity']
         }
        
          
          if (level === null){
            level='Overall Level' 
          }          
         // strlengthlevel=strlengthlevel+level.length


 // App Name 12 ,Discription 17
if (level.length > (Math.abs(Math.round(str.length/17)))*12){
  strlengthlevel=strlengthlevel+level.length
} else{
  strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/17)))*12
}

if (str.length   > (Math.abs(Math.round(level.length/12)))*17){
  strlength=strlength+str.length  
} else{
  strlength=strlength+(Math.abs(Math.round(level.length/12))*17)
 }



if (flag= 'No') {
  if ( strlength > 450 ||strlengthlevel > 200 || rowcount === 11){
    flag ='Yes'
    if (rowcount > 1) { 
      ERow = i - 1
      }else{
        ERow = i
      }
}}

        if ( flag=== 'Yes') {
          Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
            SRow=ERow+1
                         if (rowcount > 1) {

                          i=i-1 
            }
            strlengthlevel=0;
            rowcount=0
            strlength =0;

                    flag ='No'

        }

        if ((i+1 === Key_RiskArr[0].length) && (ERow < Key_RiskArr[0].length) && (SRow < Key_RiskArr[0].length)) {

            Rowstend.push({"Row_S":SRow, "Row_E":Key_RiskArr[0].length-1 })
        }
        }

        for( let inum=0; inum< Rowstend.length; inum++){
          slide3 =pptx.addNewSlide();
       SevenKeyMastertemplate(pptx, slide3, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
      slide3.addText('Key Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
      var rows = [];
      var colW=[0.35,0.83,1.7,0.92,0.87,1.4,0.9,0.9,0.9,0.9]
      var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
      rows.push([
        { text:'#' ,options:options},
        { text:'Level' ,options:options},
        { text:'Description' ,options:options},
        { text:'Status' ,options:options},
        { text:'Priority' ,options:options},
        { text:'Owner' ,options:options},
        { text:'Target Date' ,options:options},
        { text:'Risk type' ,options:options},
        { text:'Impact' ,options:options},
        { text:'Probability' ,options:options},
        ]);

        dt_Report = new Date();
        dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
        var RiskCol = '';
    
        for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
                     rowval =[];
               if(Key_RiskArr[0][i-1] !== undefined){
            
              for( let j=1; j< filedarr.length+1; j++){
                var Rowcol = Key_RiskArr[0][i-1]['color']
                if (j=== 1){
                 rowval.push( { text: i ,options:{align:'c' ,fill:Rowcol}})
                } else if( filedarr[j-1] === 'ReportingLevel')  {

                  var level =Key_RiskArr[0][i-1]['epicName'] ;
                  if(Key_RiskArr[0][i-1]['ScopeLevel'] !== null && Key_RiskArr[0][i-1]['ScopeLevel'] !== ''){
                    var level =level+"-"+Key_RiskArr[0][i-1]['ScopeLevel'] ;
                  }
                   if (Key_RiskArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_RiskArr[0][i-1]['sprintName']
                  }
                
                   if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'AT'){
                   level=level+'-'+Key_RiskArr[0][i-1]['AppName']
                  }else if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_RiskArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                  }else if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_RiskArr[0][i-1]['Scope_BacklogActivity']
                }
                  
                  
                  if (level === null){
                    rowval.push({ text:'Overall Level',options:{fill:Rowcol} })
                  } else {
                    rowval.push({ text:level ,options:{fill:Rowcol}})
                  }
                  
                } else {

               if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_RiskArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                if(Target_Date === 'Invalid date'){
                  rowval.push({ text:'' ,options:{fill:Rowcol}})
                }else{
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
                }
               }else if(filedarr[j-1] === 'Status'){
                if(Key_RiskArr[0][i-1]['Status'] === 'Open'){   
                var dt=moment(Key_RiskArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_RiskArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    RiskCol = RAGGreen;
          
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   RiskCol = RAGRed;
                    
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    RiskCol = RAGAmber;
                      
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    RiskCol = RAGGreen;
                       
                  } else {    
                    if (Key_RiskArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          RiskCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          RiskCol = RAGRed;
                        } 
                    }else {
                          //Red
                          RiskCol = RAGRed;
                    }                          
                  }
                }else{               
                    RiskCol = RAGBlue;
                }
                  rowval.push({ text:Key_RiskArr[0][i-1][filedarr[j-1]],options:{fill:RiskCol}})
               }else{   
                 rowval.push({ text:Key_RiskArr[0][i-1][filedarr[j-1]],options:{fill:Rowcol} })
               }
             } 
               }
               rows.push(rowval )
            }
           }
           slide3.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
       
        }       
          
    } else {
     
      slide3 =pptx.addNewSlide();
      SevenKeyMastertemplate(pptx, slide3, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
     slide3.addText('Key Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
     var rows = [];
     var colW=[0.35,0.83,1.7,0.92,0.87,1.4,0.8,0.9,0.9,0.9]
     var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
     rows.push([
       { text:'#' ,options:options},
       { text:'Level' ,options:options},
       { text:'Description' ,options:options},
       { text:'Status' ,options:options},
       { text:'Priority' ,options:options},
       { text:'Owner' ,options:options},
       { text:'Target Date' ,options:options},
       { text:'Risk type' ,options:options},
       { text:'Impact' ,options:options},
       { text:'Probability' ,options:options},
       ]);
           rows.push([
        { text:"No Key Risks" ,options:{colspan:filedarr.length}}
      ])
      slide3.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
    }
   
     //Slide 4 Key Issues
     
    filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ShowStopper']

 if (Key_IssueArr.length !== 0) {
  var strlength=0
  var strlengthlevel =10;
  var strlengthComment =0;
  var SRow= 0;
      var ERow= 0;
      Rowstend =[]
      var rowcount =0;
      var flag="No"
        for( let i=0; i< Key_IssueArr[0].length; i++){
          rowcount=rowcount+1
           var str = JSON.stringify(Key_IssueArr[0][i]['Description']);
         // strlength=strlength+str.length

          var level =Key_IssueArr[0][i]['epicName'];
          if(Key_IssueArr[0][i]['ScopeLevel'] !== null && Key_IssueArr[0][i]['ScopeLevel'] !== '' ){
            var level =level+'-'+Key_IssueArr[0][i]['ScopeLevel']
          }
          if (Key_IssueArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_IssueArr[0][i]['sprintName']
          }
          
         
          if(Key_IssueArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_IssueArr[0][i]['AppName']
          }else if(Key_IssueArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_IssueArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_IssueArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_IssueArr[0][i]['Scope_BacklogActivity']
         }
        

      
          if (level === null){
            level='Overall Level' 
          }          
        //  strlengthlevel=strlengthlevel+level.length

         // App Name 11 ,Discription 20
if (level.length > (Math.abs(Math.round(str.length/20)))*11){
  strlengthlevel=strlengthlevel+level.length
} else{
  strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/20)))*11
}

if (str.length   > (Math.abs(Math.round(level.length/11)))*20){
  strlength=strlength+str.length  
} else{
  strlength=strlength+(Math.abs(Math.round(level.length/11))*20)
 }

          if (flag= 'No') {
            if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
              flag ='Yes'
              if (rowcount > 1) { 
                ERow = i - 1
                }else{
                  ERow = i
                }
          }}

                  if ( flag=== 'Yes') {
                    Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                      SRow=ERow+1

                      if (rowcount > 1) {

                                    i=i-1 
                      }
                      strlengthlevel=0;
                      rowcount=0
                      strlength =0;

                              flag ='No'

                  }


          if ((i+1 === Key_IssueArr[0].length) && (ERow < Key_IssueArr[0].length) && (SRow < Key_IssueArr[0].length)) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_IssueArr[0].length-1 })
          }
         }

  for( let inum=0; inum< Rowstend.length; inum++){
   
   slide4 =pptx.addNewSlide();
     SevenKeyMastertemplate(pptx, slide4, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide4.addText('Key Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Issue Type' ,options:options},
   { text:'Show Stopper' ,options:options},
   ]);

   dt_Report = new Date();
   dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
   var IssueCol = '';


   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];

    if(Key_IssueArr[0][i-1] !== undefined){
             for( let j=1; j< filedarr.length+1; j++){
              var Rowcol = Key_IssueArr[0][i-1]['color']
         if (j=== 1){
          rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
        } else if( filedarr[j-1] === 'ReportingLevel')  {
         
          var level =Key_IssueArr[0][i-1]['epicName'];
          if(Key_IssueArr[0][i-1]['ScopeLevel'] !== null && Key_IssueArr[0][i-1]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_IssueArr[0][i-1]['ScopeLevel']
          }
          if (Key_IssueArr[0][i-1]['sprintName'] !== null ){
            level=level+'-'+Key_IssueArr[0][i-1]['sprintName']
          }
          
          if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_IssueArr[0][i-1]['AppName']
          }else if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_IssueArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_IssueArr[0][i-1]['Scope_BacklogActivity']
         }
        
              if (level === null){
            rowval.push({ text:'Overall Level',options:{fill:Rowcol}})
          } else {
            rowval.push({ text:level ,options:{fill:Rowcol}})
          }

        } else {
          if(filedarr[j-1] === 'TargetDate'){
            var dt=moment(Key_IssueArr[0][i-1][filedarr[j-1]]);  
            Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
            rowval.push({ text:Target_Date,options:{fill:Rowcol} })
           }else if(filedarr[j-1] === 'Status'){
            if(Key_IssueArr[0][i-1]['Status'] === 'Open'){
            var dt=moment(Key_IssueArr[0][i-1]['TargetDate']);  
            var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
            dt_targer = new Date(TargetDt_Com);
                            
              if( ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
               (Key_IssueArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                // Green
                IssueCol = RAGGreen;
      
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                 (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
               // Red
               IssueCol = RAGRed;
                
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                 (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                  
                //Amber
                IssueCol = RAGAmber;
                  
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                  (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                     
                // Green
                IssueCol = RAGGreen;
                   
              } else {    
                if (Key_IssueArr[0][i-1]['ImpactConsequences'] === '')  {
                    if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                      // Green
                      IssueCol = RAGGreen;
                   
                    }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                      //red
                      IssueCol = RAGRed;
                    } 
                }else {
                      //Red
                      IssueCol = RAGRed;
                }                          
              }
            }else{               
              IssueCol = RAGBlue;
            }
              rowval.push({ text:Key_IssueArr[0][i-1][filedarr[j-1]],options:{fill:IssueCol}})
           }else{ 
             rowval.push({ text:Key_IssueArr[0][i-1][filedarr[j-1]] ,options:{fill:Rowcol}})
           }
      } 
        }
        rows.push(
          rowval
        )
    }
    }
    slide4.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
} else {
  
  slide4 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide4, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
slide4.addText('Key Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
var rows = [];
var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
{ text:'#' ,options:options},
{ text:'Level' ,options:options},
{ text:'Description' ,options:options},
{ text:'Status' ,options:options},
{ text:'Priority' ,options:options},
{ text:'Owner' ,options:options},
{ text:'Target Date' ,options:options},
{ text:'Issue Type' ,options:options},
{ text:'Show Stopper' ,options:options},
]);
  rows.push([
    { text:"No Key Issues" ,options:{colspan:filedarr.length}}
  ])
  slide4.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
  
     
 //Slide 5 Key Actions
 filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType']
 if (Key_ActionArr.length !== 0) {
  var SRow= 0;
  var strlength=0
  var strlengthlevel =0;
  var strlengthComment =0;
      var ERow= 0;
      var Rowstend =[]
      var rowcount =0;
      var flag="No"
      
        for( let i=0; i< Key_ActionArr[0].length; i++){
          rowcount=rowcount+1
           var str = JSON.stringify(Key_ActionArr[0][i]['Description']);
        // strlength=strlength+str.length

          var level =Key_ActionArr[0][i]['epicName'];

          if(Key_ActionArr[0][i]['ScopeLevel'] !== null  && Key_ActionArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_ActionArr[0][i]['ScopeLevel']
          }
          if (Key_ActionArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_ActionArr[0][i]['sprintName']
          }
        
          if(Key_ActionArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_ActionArr[0][i]['AppName']
          }else if(Key_ActionArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_ActionArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_ActionArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_ActionArr[0][i]['Scope_BacklogActivity']
         }
        

          if (level === null){
            level='Overall Level' 
          }          
        //  strlengthlevel=strlengthlevel+level.length
//app 15 , disc 32
        if (level.length > (Math.abs(Math.round(str.length/32)))*15){
          strlengthlevel=strlengthlevel+level.length
        } else{
          strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/32)))*15
        }

        if (str.length   > (Math.abs(Math.round(level.length/15)))*32){
          strlength=strlength+str.length  
        } else{
          strlength=strlength+(Math.abs(Math.round(level.length/15))*32)
         }

          if (flag= 'No') {
            if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
              flag ='Yes'
              if (rowcount > 1) { 
                ERow = i - 1
                }else{
                  ERow = i
                }
          }}

                  if ( flag=== 'Yes') {
                    Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                      SRow=ERow+1

                      if (rowcount > 1) {

                                    i=i-1 
                      }
                      strlengthlevel=0;
                      rowcount=0
                      strlength =0;

                              flag ='No'

                  }

          if (i+1 === Key_ActionArr[0].length && ERow < Key_ActionArr[0].length  && SRow < Key_ActionArr[0].length) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_ActionArr[0].length-1 })
          }
         }

    for( let inum=0; inum< Rowstend.length; inum++){
     
   slide5=pptx.addNewSlide()
  SevenKeyMastertemplate(pptx, slide5, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
  slide5.addText('Key Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.0,2.0,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Action Type' ,options:options},
       ]);

       dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var ActionCol = '';

       for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];
    if(Key_ActionArr[0][i-1] !== undefined){
      
          for( let j=1; j< filedarr.length+1; j++){
            var Rowcol = Key_ActionArr[0][i-1]['color']
            if (j=== 1){
             rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
            } else if( filedarr[j-1] === 'ReportingLevel')  {
              var level =Key_ActionArr[0][i-1]['epicName'];

              if(Key_ActionArr[0][i-1]['ScopeLevel'] !== null && Key_ActionArr[0][i-1]['ScopeLevel'] !== ''){
                var level =level+'-'+Key_ActionArr[0][i-1]['ScopeLevel']
              }
                  if (Key_ActionArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_ActionArr[0][i-1]['sprintName']
                  }
                  
                  if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'AT'){
                    level=level+'-'+Key_ActionArr[0][i-1]['AppName']
                  }else if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_ActionArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                 }else if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_ActionArr[0][i-1]['Scope_BacklogActivity']
                 }
                
             
                  if (level === null){
                rowval.push({ text:'Overall Level' ,options:{fill:Rowcol}})
              } else {
                rowval.push({ text:level,options:{fill:Rowcol} })
              }

            } else {
              if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_ActionArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
              }else if(filedarr[j-1] === 'Status'){
                if(Key_ActionArr[0][i-1]['Status'] === 'Open'){
                var dt=moment(Key_ActionArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_ActionArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    ActionCol = RAGGreen;
          
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   ActionCol = RAGRed;
                    
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    ActionCol = RAGAmber;
                      
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    ActionCol = RAGGreen;
                       
                  } else {    
                    if (Key_ActionArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          ActionCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          ActionCol = RAGRed;
                        } 
                    }else {
                          //Red
                          ActionCol = RAGRed;
                    }                          
                  }
                }else{               
                  ActionCol = RAGBlue;
              }
                  rowval.push({ text:Key_ActionArr[0][i-1][filedarr[j-1]],options:{fill:ActionCol}})
              }else{ 
                 rowval.push({ text:Key_ActionArr[0][i-1][filedarr[j-1]] ,options:{fill:Rowcol}})
               }
         } 
           }
           rows.push(
            rowval
          )
       }}
       slide5.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
      }   
     } else {
       slide5=pptx.addNewSlide()
  SevenKeyMastertemplate(pptx, slide5, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
  slide5.addText('Key Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.0,2.0,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Action Type' ,options:options},
       ]);
           rows.push([
         { text:"No Key Actions" ,options:{colspan:filedarr.length}}
       ])
       slide5.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
     }
  
 //Slide 6 Key dependency
 filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences']

 if (Key_DependenciesArr.length !== 0) {
  var SRow= 0;
  var strlength=0
  var strlengthlevel =0;
  var strlengthComment =0;
  var rowcount =0;
      var ERow= 0;
      var flag="No"
      var Rowstend =[]
        for( let i=0; i< Key_DependenciesArr[0].length; i++){
          rowcount=rowcount+1 
          var str = JSON.stringify(Key_DependenciesArr[0][i]['Description']);
         // strlength=strlength+str.length
          var level =Key_DependenciesArr[0][i]['epicName'];
          if(Key_DependenciesArr[0][i]['ScopeLevel'] !== null && Key_DependenciesArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_DependenciesArr[0][i]['ScopeLevel']
          }
        if (Key_DependenciesArr[0][i]['sprintName'] !== null ){
          level=level+'-'+Key_DependenciesArr[0][i]['sprintName']
        }
        
        if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'AT'){
          level=level+'-'+Key_DependenciesArr[0][i]['AppName']
        }else if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'ST'){
          level=level+'-'+Key_DependenciesArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
       }else if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'Others'){
        level=level+'-'+Key_DependenciesArr[0][i]['Scope_BacklogActivity']
       }
      
        if (level === null){
          level='Overall Level' 
        }          
       // strlengthlevel=strlengthlevel+level.length
       //app 15 , disc 32
       if (level.length > (Math.abs(Math.round(str.length/32)))*15){
        strlengthlevel=strlengthlevel+level.length
      } else{
        strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/32)))*15
      }

      if (str.length   > (Math.abs(Math.round(level.length/15)))*32){
        strlength=strlength+str.length  
      } else{
        strlength=strlength+(Math.abs(Math.round(level.length/15))*32)
       }
        if (flag= 'No') {
          if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
            flag ='Yes'
            if (rowcount > 1) { 
              ERow = i - 1
              }else{
                ERow = i
              }
        }}

                if ( flag=== 'Yes') {
                  Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                    SRow=ERow+1

                    if (rowcount > 1) {

                                  i=i-1 
                    }
                    strlengthlevel=0;
                    rowcount=0
                    strlength =0;

                            flag ='No'

                }


          if (i+1 === Key_DependenciesArr[0].length && ERow < Key_DependenciesArr[0].length && SRow < Key_DependenciesArr[0].length) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_DependenciesArr[0].length-1 })
          }
         }
  for( let inum=0; inum< Rowstend.length; inum++){
  
   slide6 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide6, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide6.addText('Key Dependencies', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Dependency Type' ,options:options},
   { text:'Impact' ,options:options},
   ]);

   dt_Report = new Date();
   dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
   var DependencyCol = '';

   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];
    if(Key_DependenciesArr[0][i-1] !== undefined){
      
          for( let j=1; j< filedarr.length+1; j++){
            var Rowcol = Key_DependenciesArr[0][i-1]['color']
            if (j=== 1){
             rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
            } else if( filedarr[j-1] === 'ReportingLevel')  {

              var level =Key_DependenciesArr[0][i-1]['epicName'];
              if(Key_DependenciesArr[0][i-1]['ScopeLevel'] !== null && Key_DependenciesArr[0][i-1]['ScopeLevel'] !== ''){
                var level =level+'-'+Key_DependenciesArr[0][i-1]['ScopeLevel']
              }
                  if (Key_DependenciesArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['sprintName']
                  }

                  
                  if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'AT'){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['AppName']
                  }else if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                 }else if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_DependenciesArr[0][i-1]['Scope_BacklogActivity']
                 }
                


                  if (level === null){
                rowval.push({ text:'Overall Level',options:{fill:Rowcol} })
              } else {
                rowval.push({ text:level,options:{fill:Rowcol} })
              }

            } else {
              if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_DependenciesArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
              }else if(filedarr[j-1] === 'Status'){
                if(Key_DependenciesArr[0][i-1]['Status'] === 'Open'){ 
                var dt=moment(Key_DependenciesArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    DependencyCol = RAGGreen;
          
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   DependencyCol = RAGRed;
                    
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    DependencyCol = RAGAmber;
                      
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    DependencyCol = RAGGreen;
                       
                  } else {    
                    if (Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          DependencyCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          DependencyCol = RAGRed;
                        } 
                    }else {
                          //Red
                          DependencyCol = RAGRed;
                    }                          
                  }
                }else{               
                  DependencyCol = RAGBlue;
                }
                  rowval.push({ text:Key_DependenciesArr[0][i-1][filedarr[j-1]],options:{fill:DependencyCol}})
              }else{ 
                 rowval.push({ text:Key_DependenciesArr[0][i-1][filedarr[j-1]],options:{fill:Rowcol} })
               }
         } 
           }
           rows.push(
            rowval
          )
       }}
       slide6.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
      }
 } else {
 slide6 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide6, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide6.addText('Key Dependencies', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Depencdcy Type' ,options:options},
   { text:'Impact' ,options:options},
   ]);
  
   rows.push([
     { text:"No Key Dependencies" ,options:{colspan:filedarr.length}}
   ])
   slide6.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
 }
   
 //Slide 7 Deliverable Status  
    if (Del_StatusArr.length === 0){
      var slide7 = pptx.addNewSlide();  
  SevenKeyMastertemplate(pptx, slide7, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'NoScopeLegend')
slide7.addText('Deliverable Status', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows7 = [];
 var colW7=[0.38,2.0,2.0,1.5,1.0,2.0]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 
  rows7.push([
    { text:'#' ,options:options},
    { text:'Deliverable Names' ,options:options},
    { text:'Deliverable Description' ,options:options},
    { text:'Contract Owner Name' ,options:options},
    { text:'Status' ,options:options},
    { text:'Comments' ,options:options},
     ]);

       rows7.push([
    { text:"No Deliverable Status" ,options:{colspan:6}}
  ])
 
  slide7.addTable( rows7, {colW:colW7,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
} else{
  var SRow= 0;
  var ERow= 0;
  var flag="No"
  Rowstend =[]
  var rowcount=0;
  strlength=0;
  var strlengthlevel =0;
  var strlengthComment =0;

    for( let i=0; i< Del_StatusArr.length; i++){
      rowcount=rowcount+1
      var str = JSON.stringify(Del_StatusArr[i]["ContractDeliver_Comments"]);
      strlength=strlength+str.length      

      if (flag = 'No') {
        if (strlength > 550 || rowcount === 11) {
            flag = 'Yes'
            if (rowcount > 1) { 
              ERow = i - 1
              }else{
                ERow = i
              }
        }
      }

      if ( flag=== 'Yes') {
        Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
        SRow=ERow+1
        strlength =0; 
        if (rowcount>1){
          i=i-1;
        }
      
        flag ='No'
        rowcount=0;
      }
      if ( i+1=== Del_StatusArr.length && ERow < Del_StatusArr.length && SRow < Del_StatusArr.length){
        Rowstend.push({"Row_S":SRow, "Row_E":Del_StatusArr.length-1 })            
      } 
     
    }
  for( let inum=0; inum< Rowstend.length; inum++){
    var slide7 = pptx.addNewSlide();  
  SevenKeyMastertemplate(pptx, slide7, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'NoScopeLegend')
slide7.addText('Deliverable Status', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows = [];
 var colW=[0.38,2.0,2.0,1.5,1.0,2.0]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 
  rows.push([
    { text:'#' ,options:options},
    { text:'Deliverable Names' ,options:options},
    { text:'Deliverable Description' ,options:options},
    { text:'Contract Owner Name' ,options:options},
    { text:'Status' ,options:options},
    { text:'Comments' ,options:options},
     ]);
     var delstatus ='';
     var delcolor = '';

     for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){

      if(Del_StatusArr[i-1]["ContractDeliver_Status"] === 'null'){
        delstatus = ''
        delcolor = RAGWhite;
      }else{
        delstatus = Del_StatusArr[i-1]["ContractDeliver_Status"]
        if(delstatus === 'Completed'){
          delcolor = RAGBlue;
        }else if(delstatus === 'Delayed'){
          delcolor = RAGRed;
        }else if(delstatus === 'In progress'){
          delcolor = RAGAmber;
        }else if(delstatus === 'Not Started'){
          delcolor = RAGGray;
        }else{
          delcolor = RAGWhite;
        }
      }    

         rows.push([
        { text: i ,options:{align:'c'}},
        { text:Del_StatusArr[i-1]["DeliverableName"] },
        { text:Del_StatusArr[i-1]["DeliverableValues"] },
        { text:Del_StatusArr[i-1]["ContractDoc_OwnerNM"]},
        { text:delstatus,options:{fill:delcolor}},
        { text:Del_StatusArr[i-1]["ContractDeliver_Comments"]},
         ]);
      
    }
       slide7.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
    
  }
}

 //Slide 8 Schedule
    
 if (Detailval[0].length === 0){
  slide8 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide8, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'EpicScopeLegend')
 slide8.addText('Schedule', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  
var rows8 = [];
var colW8=[0.38,2.5,1.0,0.85,0.85,0.85,0.85,0.85,0.85]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}

rows8.push([
{ text:'#' ,options:options},
{ text:'Level' ,options:options},
{ text:'Status' ,options:options},
{ text:'Plan Start Date' ,options:options},
{ text:'Plan End Date' ,options:options},
{ text:'Re-Plan Start Date' ,options:options},
{ text:'Re-Plan End Date' ,options:options},
{ text:'Actual Start Date' ,options:options},
{ text:'Actual End Date' ,options:options},
 ]);

   rows8.push([
{ text:"No Detail Schedule" ,options:{colspan:9}}
])

slide8.addTable( rows8, {colW:colW8,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
} else{

  var Rowstend =[]
  var SRow= 0;
  var ERow= 0;
  var rowcount =0;
  var flag="No"
  var strlength =0;
  var strlengthlevel =0;
 
for (i=0; i<Detailval[0].length ;i++){
 rowcount=rowcount+1;
  var level =Detailval[0][i]['epicName'];
 if(level !== null){
  strlengthlevel=strlengthlevel+level.length
 }

if(flag === 'No'){
  if (strlengthlevel > 350 || rowcount === 11 ) {
    flag ='Yes'
    if (rowcount > 1) { 
      ERow = i - 1
      }else{
        ERow = i
      }
    }
}
if ( flag=== 'Yes') {
  Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
    SRow=ERow+1
                 if (rowcount > 1) {
     
                  i=i-1 
    }
    strlengthlevel=0;
    rowcount=0
    strlength =0;
                          
            flag ='No'
            
}

if ((i+1 === Detailval[0].length) && (ERow < Detailval[0].length) && (SRow < Detailval[0].length)) {
         
  Rowstend.push({"Row_S":SRow, "Row_E":Detailval[0].length-1 })
}
}

for( let inum=0; inum< Rowstend.length; inum++){
var slide8 = pptx.addNewSlide();  
SevenKeyMastertemplate(pptx, slide8, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'EpicScopeLegend')
slide8.addText('Detail Schedule', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});


var rows = [];
var colW=[0.38,2.5,1.0,0.85,0.85,0.85,0.85,0.85,0.85]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Status' ,options:options},
  { text:'Plan Start Date' ,options:options},
  { text:'Plan End Date' ,options:options},
  { text:'Re-Plan Start Date' ,options:options},
  { text:'Re-Plan End Date' ,options:options},
  { text:'Actual Start Date' ,options:options},
  { text:'Actual End Date' ,options:options},
   ]);
  
   

   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    var PSDate='';
    var PEDate='';
    var RpSDate='';
    var RpEDate='';
    var ASDate='';
    var AEDate='';
    var dt;
        if (Detailval[0][i-1]["color"] === 'color') {
          var options ={fill:'#C0C0C0'}
          var options1 = {fill:'#C0C0C0',align:'c'}
        } else {
          var options1 = {fill:Detailval[0][i-1]["color"],align:'c'}
          var options ={fill:Detailval[0][i-1]["color"]}
        }

        if (Detailval[0][i-1]["rag"] === 'null') {
          var Statusval = '';
        } else {
          var Statusval = Detailval[0][i-1]["rag"];
        }
       

        if(Detailval[0][i-1]["startDate"] !== null) {
         dt = moment(Detailval[0][i-1]["startDate"])
         PSDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
        }
        
        if(Detailval[0][i-1]["endDate"] !== null) {
          dt = moment(Detailval[0][i-1]["endDate"])
          PEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["replanStartDate"] !== null) {
          dt = moment(Detailval[0][i-1]["replanStartDate"])
          RpSDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["replanEndDate"] !== null) {
          dt = moment(Detailval[0][i-1]["replanEndDate"])
          RpEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["actualStartDate"] !== null) {
          dt = moment(Detailval[0][i-1]["actualStartDate"])
          ASDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["actualEndDate"] !== null) {
          dt = moment(Detailval[0][i-1]["actualEndDate"])
          AEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         var detailColor = '';
         dt_Report = new Date();
     
         if(Detailval[0][i-1]["replanStartDate"] !== null){
           dt_ReportPlanStDT = new Date(moment(Detailval[0][i-1]["replanStartDate"]).format("MM-DD-YY"));
         }else{
           if(Detailval[0][i-1]["startDate"] !== null){
             dt_ReportPlanStDT = new Date(moment(Detailval[0][i-1]["startDate"]).format("MM-DD-YY"));
           }else{
             dt_ReportPlanStDT = '';
           }
         }  
         
         if(Detailval[0][i-1]["replanEndDate"] !== null){
           dt_ReportPlanEndDT = new Date(moment(Detailval[0][i-1]["replanEndDate"]).format("MM-DD-YY"));
         }else{
           if(Detailval[0][i-1]["endDate"] !== null){
             dt_ReportPlanEndDT = new Date(moment(Detailval[0][i-1]["endDate"]).format("MM-DD-YY"));
           }else{
             dt_ReportPlanEndDT = '';
           }
         }  
   
         if(Detailval[0][i-1]["rag"] === 'Green'){
           detailColor = {fill:RAGGreen};
         }else if(Detailval[0][i-1]["rag"] === 'Amber'){
           detailColor = {fill:RAGAmber};
         }else if(Detailval[0][i-1]["rag"] === 'Red'){
           detailColor = {fill:RAGRed};
         }else{
   
           if((dt_ReportPlanStDT!== '') && (dt_ReportPlanEndDT!== '')){
     
             if(((Detailval[0][i-1]["rag"] === 'Not Started')) 
             && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))){
               detailColor = {fill:RAGRed};
   
             }else if((Detailval[0][i-1]["rag"] === 'Behind Schedule') 
             && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))){  
              detailColor = {fill:RAGRed};
   
             }else if((Detailval[0][i-1]["rag"] === 'Behind Schedule')){
               detailColor = {fill:RAGAmber};
   
             }else if((Detailval[0][i-1]["rag"] === 'On Schedule')){
               detailColor = {fill:RAGGreen};
   
             }else if((Detailval[0][i-1]["rag"] === 'Completed')){
               detailColor = {fill:RAGBlue};
   
             }else if((Detailval[0][i-1]["rag"] === 'Not Started')){
                 detailColor = {fill:RAGGray};
               
             }else {
               detailColor = options;
             } 
           }else{
               if((Detailval[0][i-1]["rag"] === 'Behind Schedule')){
                 detailColor = {fill:RAGAmber};
   
               }else if((Detailval[0][i-1]["rag"] === 'On Schedule')){
                 detailColor = {fill:RAGGreen};
   
               }else if((Detailval[0][i-1]["rag"] === 'Completed')){
                 detailColor = {fill:RAGBlue};
   
               }else if((Detailval[0][i-1]["rag"] === 'Not Started')){
                 detailColor = {fill:RAGGray};
   
               }else {
                 detailColor = options;
               } 
           } 
         }   

      rows.push([
    { text: i ,options:options1},
    { text:Detailval[0][i-1]["epicName"],options:options },
    // { text:Statusval,options:detailColor },
    { text:'',options:detailColor},
    { text:PSDate,options:options},
    { text:PEDate,options:options},
    { text:RpSDate,options:options},
    { text:RpEDate,options:options },
    { text:ASDate,options:options },
    { text:AEDate,options:options  },
     ]);
  }
    slide8.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  
}
}



      //end
       pptx.save(filename);
      
     }, 15000)  
  
  
    setTimeout(()=>{
      filename = "SevenKeyReport-"+USername.replace(/\s/g,'');
    var filePath = __dirname+'\\'+filename+'.pptx';
     try {
      //  // console.log('remove2' +filePath)
      fs.unlinkSync(filePath)
      //file removed
    } catch(err) {
      console.error(err)
    }
     }, 17000) 
    setTimeout(()=>{  
      filename = "SevenKeyReport-"+USername.replace(/\s/g,'');
    var filePath = __dirname+'\\'+filename+'.pptx';
    return res.sendFile(filePath);
    }, 16000) 

});
//7 Key REport end

//WSR start
app.get('/WSRPPT/:USername/:lastWeekDate/:weekend_date/:IntegrationID/:TAccName', (req, res) => {

  SevenkeyAccount = '';
  SevenkeyArr = [];
  ScopeKeyArr = [];
  TeamkeyArr = [];
  RiskskeyArr = [];
  OrgkeyArr = [];
  WorkkeyArr = [];
  BuskeyArr = [];
  FinkeyArr = [];
  Del_StatusArr = [];
Key_RiskArr = [];
Key_IssueArr = [];
Key_ActionArr = [];
Key_DependenciesArr = [];
Detailval = [];
var USername = req.params.USername; 
var IntegrationID = req.params.IntegrationID;
var RAGGreen= '#008000';
var RAGAmber = '#FFC000';
var RAGRed = '#FF0000';
var RAGGray = '#A6A6A6';
var RAGWhite = '#FFFFFF';
var RAGBlue = '#00B0F0';

//var IntegrationID = Intval.split(".")[0];

if (req.params.lastWeekDate === 'undefined') {  
  var bckLastWeekdate = 'Invalid date'
} else {  
  var lastdt=moment(req.params.lastWeekDate);
  var bckLastWeekdate =moment([lastdt.year(), lastdt.month(), lastdt.date(),lastdt.hours(),lastdt.minutes(),lastdt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
}
var dt=moment(req.params.weekend_date);
var weekend_date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
var bckWeekdate =moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");

filename = "WSRReport-"+USername.replace(/\s/g,'');
var filePath = __dirname+'\\'+filename+'.pptx';

var pptx = new PptxGenJS();
if (bckLastWeekdate === 'Invalid date') {
  LastweekOverRAG = 'FFFFFF'
} else {
queryLastweekRAG = "Select overall_rag from sevenkey where IntegrationID = '" + IntegrationID + "' AND weekend_date= '" + bckLastWeekdate + "'";
pool.getConnection().then(conn => {
  conn.query(queryLastweekRAG).then((queryLastweekRAGRes) => {     
    var lastwkRAG = JSON.parse(JSON.stringify(queryLastweekRAGRes));
      setTimeout(() => { 
          if(lastwkRAG[0]["overall_rag"] === 'green'){
            LastweekOverRAG = '008000'
           }else  if(lastwkRAG[0]["overall_rag"] === 'amber'){
            LastweekOverRAG = 'ffbf00'
           }else  if(lastwkRAG[0]["overall_rag"] === 'red'){
            LastweekOverRAG = 'FF0000'
         }  
      }, 2000)                 
        conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});
}

queryIntAccount = "Select * from transitionprofile where IntegrationID = '" + IntegrationID + "'";
pool.getConnection().then(conn => {
  conn.query(queryIntAccount).then((queryIntAccountRes) => {
    var SevenAccount = JSON.parse(JSON.stringify(queryIntAccountRes));
      setTimeout(() => { 
        for( let i=1; i< SevenAccount.length+1; i++){
          SevenkeyAccount = SevenAccount[i-1]["ClientName"]  
        }  
      }, 2000)           
        conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Transition Team//
queryTransitionTeam= "Select USER_FULLNAME from user_transition where TRANSITION_ID = '" + IntegrationID +"' AND USER_TYPE = 'Transition'" ;

TRantionTeamList =[];
pool.getConnection().then(conn => {
  conn.query(queryTransitionTeam).then((queryTransitionTeamRes) => {
    SevenkeyTransition = JSON.parse(JSON.stringify(queryTransitionTeamRes));
            setTimeout(() => { 
        for( let i=1; i< SevenkeyTransition.length+1; i++){
          if (SevenkeyTransition[i-1]["USER_FULLNAME"] !== null) {
          TRantionTeamList.push(SevenkeyTransition[i-1]["USER_FULLNAME"])
          }
        }  
      }, 2000)           
        conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//End Transition Team//

//Deliverable Status start //
queryIntDelviverables = "Select * from contractualdeliverables where IntegrationID = '" + IntegrationID + "'";
pool.getConnection().then(conn => {
  conn.query(queryIntDelviverables).then((queryIntDelviverablesRes) => {
     Del_StatusArr  = JSON.parse(JSON.stringify(queryIntDelviverablesRes));
           
        conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Deliverabale status end//


//Key Risk //
queryIntKeyRisk = "Select Risk from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
  pool.getConnection().then(conn => {
  conn.query(queryIntKeyRisk).then((queryIntKeyRiskRes) => {
 
    setTimeout(() => { 
      let arr =[];
      if (queryIntKeyRiskRes.length !==0){
         if (queryIntKeyRiskRes[0].Risk !== null && queryIntKeyRiskRes[0].Risk.includes(',') === true  ) { 
      
        arr =queryIntKeyRiskRes[0].Risk.split(',');
                } else if (queryIntKeyRiskRes[0].Risk === null) {
       
        Key_RiskArr=[];
       }
       else{
        
        arr.push(queryIntKeyRiskRes[0].Risk);
        }  
      }       
  
        pool.getConnection().then(conn => {
          queryIntKey_Risk ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName) ,"+
          " r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType, r.ImpactConsequences,"+
          " r.Probability,r.ScopeLevel,e.epicName,s.sprintName,a.AppName,ss.Scope_BacklogActivity,"+
          " CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
          "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#E0FFFF',"+
          "IF( e.epicName != 'null','#C0C0C0','#FDEADA'))) as color,"+
         " r.scopeOverall from Raid r"+
         " LEFT JOIN epics e on r.epicUNID = e.epicUNID"+
         " LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID"+
         " LEFT JOIN application_information a on r.AppUNID = a.AppUNID"+
         " LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid"+
          " LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID"+ 
          " where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+")"+
          " ORDER BY 1;"
             
           conn.query(queryIntKey_Risk).then((queryIntKey_RiskRes) => {
                                         // if (JSON.parse(JSON.stringify(queryIntKey_RiskRes)) !== ''){
                         Key_RiskArr.push(JSON.parse(JSON.stringify(queryIntKey_RiskRes)))

                       // }    


                                     conn.end();

            })
      
       
         
                .catch(err => {
                    conn.end();
                })
              }).catch(err => {
                //not connected
            });
          
         // } 
          }, 2000);
        
                  conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Key Risk end//

//Key Issue //
queryIntKeyIssue = "Select Issue from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
     pool.getConnection().then(conn => {
  conn.query(queryIntKeyIssue).then((queryIntKeyIssueRes) => {
    setTimeout(() => { 
      let arr=[];
      if (queryIntKeyIssueRes.length !==0){
      if (queryIntKeyIssueRes[0].Issue !== null && queryIntKeyIssueRes[0].Issue.includes(',') === true ) { 
               arr =queryIntKeyIssueRes[0].Issue.split(',');
      } else if (queryIntKeyIssueRes[0].Issue === null ) {
        Key_IssueArr=[];
                 }
       else{
                               arr.push(queryIntKeyIssueRes[0].Issue);
                             }
                            }

                 pool.getConnection().then(conn => {
                  queryIntKey_Issue ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
                  "r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ShowStopper,r.ScopeLevel,"+
                  "ss.Scope_BacklogActivity, "+
                  "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
                  "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#E0FFFF',"+
                  "IF( e.epicName != 'null','#C0C0C0','#FDEADA'))) as color,"+
                  "e.epicName,s.sprintName,a.AppName from Raid r "+
                  "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
                  "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
                  "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
                  "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
                  "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
                  "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"
            
                                   conn.query(queryIntKey_Issue).then((queryIntKey_IssueRes) => {
                                  Key_IssueArr.push(JSON.parse(JSON.stringify(queryIntKey_IssueRes))) 
                                      conn.end();
                  
               })            
              
                .catch(err => {
                    conn.end();
                })
               }).catch(err => {
                //not connected
           
              });
        
           // }
                      }, 2000);
          
                    
                  conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Key issues end//

//Key Actions //

queryIntKeyActions = "Select Action from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";
pool.getConnection().then(conn => {
  conn.query(queryIntKeyActions).then((queryIntKeyActionsRes) => {
 
    setTimeout(() => { 
      let arr=[];
      if (queryIntKeyActionsRes.length !==0){
      if (queryIntKeyActionsRes[0].Action !== null && queryIntKeyActionsRes[0].Action.includes(',') === true ) { 
        arr =queryIntKeyActionsRes[0].Action.split(',');
      } else if (queryIntKeyActionsRes[0].Action === null) {
        Key_ActionArr=[];
       }
       else{
        arr.push(queryIntKeyActionsRes[0].Action);
            }
      }           
    for( let i=1; i< arr.length+1; i++){
                  pool.getConnection().then(conn => {
                    queryIntKey_Actions = "select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
                    "r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ScopeLevel,e.epicName,"+
                    "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity),"+
                    "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#E0FFFF',"+
                     "IF( e.epicName != 'null','#C0C0C0','#FDEADA'))) as color,"+
                    "ss.Scope_BacklogActivity,s.sprintName,a.AppName from Raid r "+
                    "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
                    "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID "+ 
                    "LEFT JOIN application_information a on r.AppUNID =a.AppUNID "+
                    "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
                    "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
                    "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"
            
              
              conn.query(queryIntKey_Actions).then((queryIntKey_ActionsRes) => {
                                  Key_ActionArr.push(JSON.parse(JSON.stringify(queryIntKey_ActionsRes))) 
                                      conn.end();
                  
               })
           
         
                .catch(err => {
                    conn.end();
                })
              }).catch(err => {
                //not connected
            });
          
           } 
          }, 2000);
        
                  conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Key Action end//

//Key Dependencies //
queryIntKeyDependencies = "Select Dependency from sevenkey where IntegrationID = '" + IntegrationID + "' AND  weekend_date='"+bckWeekdate+ "'";

    pool.getConnection().then(conn => {
  conn.query(queryIntKeyDependencies).then((queryIntKeyDependenciesRes) => {
 
    setTimeout(() => { 
      let arr=[];
      if (queryIntKeyDependenciesRes.length !==0){
      if (queryIntKeyDependenciesRes[0].Dependency !== null && queryIntKeyDependenciesRes[0].Dependency.includes(',') ) { 
        arr =queryIntKeyDependenciesRes[0].Dependency.split(',');
      } else if (queryIntKeyDependenciesRes[0].Dependency === null) {
        Key_DependenciesArr=[]; 
       }
       else{
        arr.push(queryIntKeyDependenciesRes[0].Dependency);
       }
      } 
    for( let i=1; i< arr.length+1; i++){
                  pool.getConnection().then(conn => {
                    queryIntKey_Dependencies ="select CONCAT(e.epicName,IF(r.ScopeLevel='AT', 1,IF(r.ScopeLevel='ST', 2,3)),s.sprintName),"+
                     " r.Description,r.Status,r.Priority,r.Owner,r.TargetDate,r.RiskType,r.ScopeLevel,r.ImpactConsequences,ss.Scope_BacklogActivity, "+
                      "CONCAT(st.STScopeLevel,'-',st.STScope,'-',st.STDetailedScope,'-',st.STScopeActivity), r.scopeOverall,"+
                      "IF( r.ScopeLevel != 'null' AND r.ScopeLevel != '' ,'#FFFFE0',IF(s.sprintName != 'null', '#E0FFFF',"+
                      "IF( e.epicName != 'null','#C0C0C0','#FDEADA'))) as color,"+
                      "e.epicName,s.sprintName,a.AppName from Raid r "+
                      "LEFT JOIN epics e on r.epicUNID = e.epicUNID "+
                      "LEFT JOIN sprint s on r.sprintUNID = s.sprintUNID  "+
                      "LEFT JOIN application_information a on r.AppUNID = a.AppUNID "+
                      "LEFT JOIN masterstinfo st on r.MasterSTInfoid = st.MasterSTInfoid "+
                      "LEFT JOIN sprintscope ss on r.scopeOverall = ss.Scope_UNID "+
                      "where r.IntegrationID='"+ IntegrationID+"' and  RaidID in ("+arr+") ORDER BY 1;"
                    

                                conn.query(queryIntKey_Dependencies).then((queryIntKey_DependenciesRes) => {
                                  Key_DependenciesArr.push(JSON.parse(JSON.stringify(queryIntKey_DependenciesRes))) 
                                      conn.end();
                  
               })
           
         
                .catch(err => {
                    conn.end();
                })
              }).catch(err => {
                //not connected
            });
          
           } 
          }, 2000);
        
                  conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//Key Dependencies end//
// stert Detail schedule 
queryDSchedule ="SELECT  epicName, '', '', epicName, epicName,"+
" rag,startDate,endDate,replanStartDate,replanEndDate,actualStartDate,"+
" actualEndDate, 'color' from epics WHERE IntegrationID= '" + IntegrationID + "'"+
" UNION"+
" SELECT ep.epicName, s.sprintName,'', CONCAT(ep.epicName, '-', IF(s.scopelevel='Others', CONCAT('T', s.scopelevel), s.scopelevel), '-', s.sprintName), CONCAT(ep.epicName, '-', s.scopelevel, '-', s.sprintName), s.rag,"+
" s.startDate, s.endDate, s.replanStartDate,"+
" s.replanEndDate,s.actualStartDate,s.actualEndDate ,'#E0FFFF'"+
" from sprint s"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=s.epicUNID"+
" WHERE s.IntegrationID= '" + IntegrationID + "'"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, ai.AppName, CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-',ai.AppName),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-',ai.AppName),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM application_information ai"+
" LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE ai.IntegrationID= '" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>''"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, stc.STScopeLevel,"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM masterstinfo stc"+
" LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE stc.IntegrationID='" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>''"+
" UNION"+
" SELECT ep.epicName, sp.sprintName, sc.Scope_BacklogActivity,"+
" CONCAT(ep.epicName, '-T', sc.Scope_Level, '-', sp.sprintName, '-', sc.Scope_BacklogActivity),"+
" CONCAT(ep.epicName, '-', sc.Scope_Level, '-', sp.sprintName, '-', sc.Scope_BacklogActivity),"+
" st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date,"+
" st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,'#FFFFE0'"+
" FROM sprintscope sc"+
" LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID"+
" LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID"+
" LEFT OUTER JOIN appln_level_sprint_plan st"+
" ON st.Scope_UNID = sc.Scope_UNID"+
" WHERE sc.Scope_IntegrationID= '" + IntegrationID + "'and ep.epicName<>'' and sp.sprintName<>''"+
" and sc.Scope_BacklogActivity<>'' ORDER BY 4;"

    pool.getConnection().then(conn => {
  conn.query(queryDSchedule).then((queryDScheduleRes) => {
   Detailval.push(JSON.parse(JSON.stringify(queryDScheduleRes))); 
     conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});

//End Details Schedule
queryExportkeyPPT = "Select * from sevenkey where IntegrationID = '" + IntegrationID + "' AND weekend_date= '" + bckWeekdate + "'";
   pool.getConnection().then(conn => {
  conn.query(queryExportkeyPPT).then((queryExportkeyPPTRes) => {
    var Sevenkeyval = JSON.parse(JSON.stringify(queryExportkeyPPTRes));
      setTimeout(() => { 
        for( let i=1; i< Sevenkeyval.length+1; i++){
          var dt=moment(Sevenkeyval[i-1]["weekend_date"]);
          var wkDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
          SevenkeyArr.push(wkDate) 
         if(Sevenkeyval[i-1]["overall_rag"] === 'green'){
          CurweekOverRAG = '008000'
         }else  if(Sevenkeyval[i-1]["overall_rag"] === 'amber'){
          CurweekOverRAG = 'ffbf00'
         }else  if(Sevenkeyval[i-1]["overall_rag"] === 'red'){
          CurweekOverRAG = 'FF0000'
         }  

         CurweekTrend = Sevenkeyval[i-1]["trend_as"];
         CurweekProgress = Sevenkeyval[i-1]["current_week_program"];
         NextweekPlan = Sevenkeyval[i-1]["next_week_plan"];
         CurweekSummary = Sevenkeyval[i-1]["summary_for_program"];
        }  
      }, 6000)           
    // res.send(queryExportkeyPPTRes)
        conn.end();
    })
    .catch(err => {
        conn.end();
    })
  }).catch(err => {
    //not connected
});


   setTimeout(() => {     
   //Slide 1

  
  var slide1 = pptx.addNewSlide();
   var rows = [];
   rows.push([{ text:'',options:{fill:'00B0F0', color:'fdfefe'}}]);
   slide1.addTable( rows, { x:0.43, y:0.27, w:9, h:5, color:'00B0F0'} );  
   var imagepath =__dirname+'\\src\\assets\\IBM blue.png';
   slide1.addText('<Client Logo>', {fontSize:12, w:1.5,x:3, y:1, align:'l',valign:'b',color:'000000'});
   slide1.addImage({ path:imagepath, x:1, y:1, w:1.4, h:0.58 })    
   slide1.addText(SevenkeyAccount, {fontSize:15, bold:true, w:9,x:.43, y:3.5, color:'fdfefe', align:'c'});
   slide1.addText('Transition Management', {fontSize:15, bold:true, w:9,x:.43, y:3.8, color:'fdfefe', align:'c'});
   slide1.addText('Weekly Status Report – Week Ending '+weekend_date, {fontSize:15, bold:true, w:9,x:.431, y:4.1, color:'fdfefe', align:'c'});
   
   rows.push([
     { text:'Week End Date',options:{fill:'2471a3', color:'fdfefe',valign:'c'}} ,  { text:'' , options:{fill:'2471a3', color:'fdfefe',align:'l'  }}, { text:'' , options:{fill:'2471a3', color:'fdfefe',align:'l' }}
     ]);
 
//slide 2
var slide2 = pptx.addNewSlide();   
   SevenKeyMastertemplate(pptx, slide2, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend)
         var rows = [];
      var colW=[9.0]
      var rowH=[1.35 ,1.35,1.35]
      rows.push([
      { text:''},
      ]);
      rows.push([
        { text:''},
        ]);
        rows.push([
          { text:''},
          ]);
       slide2.addTable( rows, {colW:colW,rowH:rowH,fontSize:8,fontFace:'Calibri', x:0.2, y:1.19} );
       slide2.addText('Summary for program for the week:', {fontSize:8, fontFace:'Calibri',bold:true, w:9,x:0.21, y:1.15, color:'800080'});
       slide2.addText(CurweekSummary.replace(/\n/g,''), {valign:'Top', fontSize:7,fontFace:'Calibri', w:9,x:0.22, y:1.6});
       
       slide2.addText('Current Week Progress:', {fontSize:8,fontFace:'Calibri', bold:true, w:9,x:0.21, y:2.5, color:'800080'});
       slide2.addText(CurweekProgress.replace(/\n/g,''), {valign:'Top', fontSize:7,fontFace:'Calibri', w:9,x:0.22, y:2.8});

       slide2.addText('Plan for the Next Week: ', {fontSize:8,fontFace:'Calibri', bold:true, w:9,x:0.21, y:3.85, color:'800080'});
       slide2.addText(NextweekPlan.replace(/\n/g,''), {valign:'Top', fontSize:7,fontFace:'Calibri', w:9,x:0.22, y:4.18});
            
      
       //Slide 3 Key Risk
       let filedarr=[];
       let rowval=[];
       
      filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences','Probability']

    if (Key_RiskArr.length !== 0) {
            var Rowstend =[]
        var SRow= 0;
        var ERow= 0;
        var rowcount =0;
        var flag="No"
        var strlength =0;
        var strlengthlevel =0;

       

        for( let i=0; i< Key_RiskArr[0].length; i++){

          rowcount=rowcount+1
           var str = JSON.stringify(Key_RiskArr[0][i]['Description']); 
            // strlength=strlength+str.length         
            
          var level =Key_RiskArr[0][i]['epicName'];
          if(Key_RiskArr[0][i]['ScopeLevel'] !== null && Key_RiskArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_RiskArr[0][i]['ScopeLevel']
          }
          if (Key_RiskArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_RiskArr[0][i]['sprintName']
          }
         
          if(Key_RiskArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_RiskArr[0][i]['AppName']
          }else if(Key_RiskArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_RiskArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_RiskArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_RiskArr[0][i]['Scope_BacklogActivity']
         }
        
          
          if (level === null){
            level='Overall Level' 
          }          
         // strlengthlevel=strlengthlevel+level.length


 // App Name 12 ,Discription 17
if (level.length > (Math.abs(Math.round(str.length/17)))*12){
  strlengthlevel=strlengthlevel+level.length
} else{
  strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/17)))*12
}

if (str.length   > (Math.abs(Math.round(level.length/12)))*17){
  strlength=strlength+str.length  
} else{
  strlength=strlength+(Math.abs(Math.round(level.length/12))*17)
 }



if (flag= 'No') {
  if ( strlength > 450 ||strlengthlevel > 200 || rowcount === 11){
    flag ='Yes'
    if (rowcount > 1) { 
      ERow = i - 1
      }else{
        ERow = i
      }
}}

        if ( flag=== 'Yes') {
          Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
            SRow=ERow+1
                         if (rowcount > 1) {

                          i=i-1 
            }
            strlengthlevel=0;
            rowcount=0
            strlength =0;

                    flag ='No'

        }

        if ((i+1 === Key_RiskArr[0].length) && (ERow < Key_RiskArr[0].length) && (SRow < Key_RiskArr[0].length)) {

            Rowstend.push({"Row_S":SRow, "Row_E":Key_RiskArr[0].length-1 })
        }
        }

        for( let inum=0; inum< Rowstend.length; inum++){
          slide3 =pptx.addNewSlide();
       SevenKeyMastertemplate(pptx, slide3, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
      slide3.addText('Key Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
      var rows = [];
      var colW=[0.35,0.83,1.7,0.92,0.87,1.4,0.9,0.9,0.9,0.9]
      var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
      rows.push([
        { text:'#' ,options:options},
        { text:'Level' ,options:options},
        { text:'Description' ,options:options},
        { text:'Status' ,options:options},
        { text:'Priority' ,options:options},
        { text:'Owner' ,options:options},
        { text:'Target Date' ,options:options},
        { text:'Risk type' ,options:options},
        { text:'Impact' ,options:options},
        { text:'Probability' ,options:options},
        ]);

        dt_Report = new Date();
        dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
        var RiskCol = '';
    
        for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
                     rowval =[];
               if(Key_RiskArr[0][i-1] !== undefined){
            
              for( let j=1; j< filedarr.length+1; j++){
                var Rowcol = Key_RiskArr[0][i-1]['color']
                if (j=== 1){
                 rowval.push( { text: i ,options:{align:'c' ,fill:Rowcol}})
                } else if( filedarr[j-1] === 'ReportingLevel')  {

                  var level =Key_RiskArr[0][i-1]['epicName'] ;
                  if(Key_RiskArr[0][i-1]['ScopeLevel'] !== null && Key_RiskArr[0][i-1]['ScopeLevel'] !== ''){
                    var level =level+"-"+Key_RiskArr[0][i-1]['ScopeLevel'] ;
                  }
                   if (Key_RiskArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_RiskArr[0][i-1]['sprintName']
                  }
                
                   if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'AT'){
                   level=level+'-'+Key_RiskArr[0][i-1]['AppName']
                  }else if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_RiskArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                  }else if(Key_RiskArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_RiskArr[0][i-1]['Scope_BacklogActivity']
                }
                  
                  
                  if (level === null){
                    rowval.push({ text:'Overall Level',options:{fill:Rowcol} })
                  } else {
                    rowval.push({ text:level ,options:{fill:Rowcol}})
                  }
                  
                } else {

               if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_RiskArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                if(Target_Date === 'Invalid date'){
                  rowval.push({ text:'' ,options:{fill:Rowcol}})
                }else{
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
                }
               }else if(filedarr[j-1] === 'Status'){
                if(Key_RiskArr[0][i-1]['Status'] === 'Open'){   
                var dt=moment(Key_RiskArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_RiskArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    RiskCol = RAGGreen;
          
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   RiskCol = RAGRed;
                    
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    RiskCol = RAGAmber;
                      
                  }else  if ((Key_RiskArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    RiskCol = RAGGreen;
                       
                  } else {    
                    if (Key_RiskArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          RiskCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          RiskCol = RAGRed;
                        } 
                    }else {
                          //Red
                          RiskCol = RAGRed;
                    }                          
                  }
                }else{               
                    RiskCol = RAGBlue;
                }
                  rowval.push({ text:Key_RiskArr[0][i-1][filedarr[j-1]],options:{fill:RiskCol}})
               }else{   
                 rowval.push({ text:Key_RiskArr[0][i-1][filedarr[j-1]],options:{fill:Rowcol} })
               }
             } 
               }
               rows.push(rowval )
            }
           }
           slide3.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
       
        }       
          
    } else {
     
      slide3 =pptx.addNewSlide();
      SevenKeyMastertemplate(pptx, slide3, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
     slide3.addText('Key Risks', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
     var rows = [];
     var colW=[0.35,0.83,1.7,0.92,0.87,1.4,0.8,0.9,0.9,0.9]
     var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
     rows.push([
       { text:'#' ,options:options},
       { text:'Level' ,options:options},
       { text:'Description' ,options:options},
       { text:'Status' ,options:options},
       { text:'Priority' ,options:options},
       { text:'Owner' ,options:options},
       { text:'Target Date' ,options:options},
       { text:'Risk type' ,options:options},
       { text:'Impact' ,options:options},
       { text:'Probability' ,options:options},
       ]);
           rows.push([
        { text:"No Key Risks" ,options:{colspan:filedarr.length}}
      ])
      slide3.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
    }
   
     //Slide 4 Key Issues
     
    filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ShowStopper']

 if (Key_IssueArr.length !== 0) {
  var strlength=0
  var strlengthlevel =10;
  var strlengthComment =0;
  var SRow= 0;
      var ERow= 0;
      Rowstend =[]
      var rowcount =0;
      var flag="No"
        for( let i=0; i< Key_IssueArr[0].length; i++){
          rowcount=rowcount+1
           var str = JSON.stringify(Key_IssueArr[0][i]['Description']);
         // strlength=strlength+str.length

          var level =Key_IssueArr[0][i]['epicName'];
          if(Key_IssueArr[0][i]['ScopeLevel'] !== null && Key_IssueArr[0][i]['ScopeLevel'] !== '' ){
            var level =level+'-'+Key_IssueArr[0][i]['ScopeLevel']
          }
          if (Key_IssueArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_IssueArr[0][i]['sprintName']
          }
          
         
          if(Key_IssueArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_IssueArr[0][i]['AppName']
          }else if(Key_IssueArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_IssueArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_IssueArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_IssueArr[0][i]['Scope_BacklogActivity']
         }
        

      
          if (level === null){
            level='Overall Level' 
          }          
        //  strlengthlevel=strlengthlevel+level.length

         // App Name 11 ,Discription 20
if (level.length > (Math.abs(Math.round(str.length/20)))*11){
  strlengthlevel=strlengthlevel+level.length
} else{
  strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/20)))*11
}

if (str.length   > (Math.abs(Math.round(level.length/11)))*20){
  strlength=strlength+str.length  
} else{
  strlength=strlength+(Math.abs(Math.round(level.length/11))*20)
 }

          if (flag= 'No') {
            if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
              flag ='Yes'
              if (rowcount > 1) { 
                ERow = i - 1
                }else{
                  ERow = i
                }
          }}

                  if ( flag=== 'Yes') {
                    Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                      SRow=ERow+1

                      if (rowcount > 1) {

                                    i=i-1 
                      }
                      strlengthlevel=0;
                      rowcount=0
                      strlength =0;

                              flag ='No'

                  }


          if ((i+1 === Key_IssueArr[0].length) && (ERow < Key_IssueArr[0].length) && (SRow < Key_IssueArr[0].length)) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_IssueArr[0].length-1 })
          }
         }

  for( let inum=0; inum< Rowstend.length; inum++){
   
   slide4 =pptx.addNewSlide();
     SevenKeyMastertemplate(pptx, slide4, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide4.addText('Key Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Issue Type' ,options:options},
   { text:'Show Stopper' ,options:options},
   ]);

   dt_Report = new Date();
   dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
   var IssueCol = '';


   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];

    if(Key_IssueArr[0][i-1] !== undefined){
             for( let j=1; j< filedarr.length+1; j++){
              var Rowcol = Key_IssueArr[0][i-1]['color']
         if (j=== 1){
          rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
        } else if( filedarr[j-1] === 'ReportingLevel')  {
         
          var level =Key_IssueArr[0][i-1]['epicName'];
          if(Key_IssueArr[0][i-1]['ScopeLevel'] !== null && Key_IssueArr[0][i-1]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_IssueArr[0][i-1]['ScopeLevel']
          }
          if (Key_IssueArr[0][i-1]['sprintName'] !== null ){
            level=level+'-'+Key_IssueArr[0][i-1]['sprintName']
          }
          
          if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_IssueArr[0][i-1]['AppName']
          }else if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_IssueArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_IssueArr[0][i-1]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_IssueArr[0][i-1]['Scope_BacklogActivity']
         }
        
              if (level === null){
            rowval.push({ text:'Overall Level',options:{fill:Rowcol}})
          } else {
            rowval.push({ text:level ,options:{fill:Rowcol}})
          }

        } else {
          if(filedarr[j-1] === 'TargetDate'){
            var dt=moment(Key_IssueArr[0][i-1][filedarr[j-1]]);  
            Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
            rowval.push({ text:Target_Date,options:{fill:Rowcol} })
           }else if(filedarr[j-1] === 'Status'){
            if(Key_IssueArr[0][i-1]['Status'] === 'Open'){
            var dt=moment(Key_IssueArr[0][i-1]['TargetDate']);  
            var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
            dt_targer = new Date(TargetDt_Com);
                            
              if( ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
               (Key_IssueArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
               (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                // Green
                IssueCol = RAGGreen;
      
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                 (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
               // Red
               IssueCol = RAGRed;
                
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                 (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                  
                //Amber
                IssueCol = RAGAmber;
                  
              }else  if ((Key_IssueArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                  (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                     
                // Green
                IssueCol = RAGGreen;
                   
              } else {    
                if (Key_IssueArr[0][i-1]['ImpactConsequences'] === '')  {
                    if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                      // Green
                      IssueCol = RAGGreen;
                   
                    }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                      //red
                      IssueCol = RAGRed;
                    } 
                }else {
                      //Red
                      IssueCol = RAGRed;
                }                          
              }
            }else{               
              IssueCol = RAGBlue;
            }
              rowval.push({ text:Key_IssueArr[0][i-1][filedarr[j-1]],options:{fill:IssueCol}})
           }else{ 
             rowval.push({ text:Key_IssueArr[0][i-1][filedarr[j-1]] ,options:{fill:Rowcol}})
           }
      } 
        }
        rows.push(
          rowval
        )
    }
    }
    slide4.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  }
} else {
  
  slide4 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide4, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
slide4.addText('Key Issues', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
var rows = [];
var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
{ text:'#' ,options:options},
{ text:'Level' ,options:options},
{ text:'Description' ,options:options},
{ text:'Status' ,options:options},
{ text:'Priority' ,options:options},
{ text:'Owner' ,options:options},
{ text:'Target Date' ,options:options},
{ text:'Issue Type' ,options:options},
{ text:'Show Stopper' ,options:options},
]);
  rows.push([
    { text:"No Key Issues" ,options:{colspan:filedarr.length}}
  ])
  slide4.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
}
  
     
 //Slide 5 Key Actions
 filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType']
 if (Key_ActionArr.length !== 0) {
  var SRow= 0;
  var strlength=0
  var strlengthlevel =0;
  var strlengthComment =0;
      var ERow= 0;
      var Rowstend =[]
      var rowcount =0;
      var flag="No"
      
        for( let i=0; i< Key_ActionArr[0].length; i++){
          rowcount=rowcount+1
           var str = JSON.stringify(Key_ActionArr[0][i]['Description']);
        // strlength=strlength+str.length

          var level =Key_ActionArr[0][i]['epicName'];

          if(Key_ActionArr[0][i]['ScopeLevel'] !== null  && Key_ActionArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_ActionArr[0][i]['ScopeLevel']
          }
          if (Key_ActionArr[0][i]['sprintName'] !== null ){
            level=level+'-'+Key_ActionArr[0][i]['sprintName']
          }
        
          if(Key_ActionArr[0][i]['ScopeLevel'] === 'AT'){
            level=level+'-'+Key_ActionArr[0][i]['AppName']
          }else if(Key_ActionArr[0][i]['ScopeLevel'] === 'ST'){
            level=level+'-'+Key_ActionArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
         }else if(Key_ActionArr[0][i]['ScopeLevel'] === 'Others'){
          level=level+'-'+Key_ActionArr[0][i]['Scope_BacklogActivity']
         }
        

          if (level === null){
            level='Overall Level' 
          }          
        //  strlengthlevel=strlengthlevel+level.length
//app 15 , disc 32
        if (level.length > (Math.abs(Math.round(str.length/32)))*15){
          strlengthlevel=strlengthlevel+level.length
        } else{
          strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/32)))*15
        }

        if (str.length   > (Math.abs(Math.round(level.length/15)))*32){
          strlength=strlength+str.length  
        } else{
          strlength=strlength+(Math.abs(Math.round(level.length/15))*32)
         }

          if (flag= 'No') {
            if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
              flag ='Yes'
              if (rowcount > 1) { 
                ERow = i - 1
                }else{
                  ERow = i
                }
          }}

                  if ( flag=== 'Yes') {
                    Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                      SRow=ERow+1

                      if (rowcount > 1) {

                                    i=i-1 
                      }
                      strlengthlevel=0;
                      rowcount=0
                      strlength =0;

                              flag ='No'

                  }

          if (i+1 === Key_ActionArr[0].length && ERow < Key_ActionArr[0].length  && SRow < Key_ActionArr[0].length) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_ActionArr[0].length-1 })
          }
         }

    for( let inum=0; inum< Rowstend.length; inum++){
     
   slide5=pptx.addNewSlide()
  SevenKeyMastertemplate(pptx, slide5, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
  slide5.addText('Key Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.0,2.0,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Action Type' ,options:options},
       ]);

       dt_Report = new Date();
       dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
       var ActionCol = '';

       for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];
    if(Key_ActionArr[0][i-1] !== undefined){
      
          for( let j=1; j< filedarr.length+1; j++){
            var Rowcol = Key_ActionArr[0][i-1]['color']
            if (j=== 1){
             rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
            } else if( filedarr[j-1] === 'ReportingLevel')  {
              var level =Key_ActionArr[0][i-1]['epicName'];

              if(Key_ActionArr[0][i-1]['ScopeLevel'] !== null && Key_ActionArr[0][i-1]['ScopeLevel'] !== ''){
                var level =level+'-'+Key_ActionArr[0][i-1]['ScopeLevel']
              }
                  if (Key_ActionArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_ActionArr[0][i-1]['sprintName']
                  }
                  
                  if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'AT'){
                    level=level+'-'+Key_ActionArr[0][i-1]['AppName']
                  }else if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_ActionArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                 }else if(Key_ActionArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_ActionArr[0][i-1]['Scope_BacklogActivity']
                 }
                
             
                  if (level === null){
                rowval.push({ text:'Overall Level' ,options:{fill:Rowcol}})
              } else {
                rowval.push({ text:level,options:{fill:Rowcol} })
              }

            } else {
              if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_ActionArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
              }else if(filedarr[j-1] === 'Status'){
                if(Key_ActionArr[0][i-1]['Status'] === 'Open'){
                var dt=moment(Key_ActionArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_ActionArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    ActionCol = RAGGreen;
          
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   ActionCol = RAGRed;
                    
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    ActionCol = RAGAmber;
                      
                  }else  if ((Key_ActionArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    ActionCol = RAGGreen;
                       
                  } else {    
                    if (Key_ActionArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          ActionCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          ActionCol = RAGRed;
                        } 
                    }else {
                          //Red
                          ActionCol = RAGRed;
                    }                          
                  }
                }else{               
                  ActionCol = RAGBlue;
              }
                  rowval.push({ text:Key_ActionArr[0][i-1][filedarr[j-1]],options:{fill:ActionCol}})
              }else{ 
                 rowval.push({ text:Key_ActionArr[0][i-1][filedarr[j-1]] ,options:{fill:Rowcol}})
               }
         } 
           }
           rows.push(
            rowval
          )
       }}
       slide5.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
      }   
     } else {
       slide5=pptx.addNewSlide()
  SevenKeyMastertemplate(pptx, slide5, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
  slide5.addText('Key Actions', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
  var colW=[0.38,1.0,2.0,1.0,0.94,1.5,0.97,1.06]
  var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
  rows.push([
    { text:'#' ,options:options},
    { text:'Level' ,options:options},
    { text:'Description' ,options:options},
    { text:'Status' ,options:options},
    { text:'Priority' ,options:options},
    { text:'Owner' ,options:options},
    { text:'Target Date' ,options:options},
    { text:'Action Type' ,options:options},
       ]);
           rows.push([
         { text:"No Key Actions" ,options:{colspan:filedarr.length}}
       ])
       slide5.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
     }
  
 //Slide 6 Key dependency
 filedarr =['S.No','ReportingLevel','Description','Status','Priority','Owner','TargetDate','RiskType','ImpactConsequences']

 if (Key_DependenciesArr.length !== 0) {
  var SRow= 0;
  var strlength=0
  var strlengthlevel =0;
  var strlengthComment =0;
  var rowcount =0;
      var ERow= 0;
      var flag="No"
      var Rowstend =[]
        for( let i=0; i< Key_DependenciesArr[0].length; i++){
          rowcount=rowcount+1 
          var str = JSON.stringify(Key_DependenciesArr[0][i]['Description']);
         // strlength=strlength+str.length
          var level =Key_DependenciesArr[0][i]['epicName'];
          if(Key_DependenciesArr[0][i]['ScopeLevel'] !== null && Key_DependenciesArr[0][i]['ScopeLevel'] !== ''){
            var level =level+'-'+Key_DependenciesArr[0][i]['ScopeLevel']
          }
        if (Key_DependenciesArr[0][i]['sprintName'] !== null ){
          level=level+'-'+Key_DependenciesArr[0][i]['sprintName']
        }
        
        if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'AT'){
          level=level+'-'+Key_DependenciesArr[0][i]['AppName']
        }else if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'ST'){
          level=level+'-'+Key_DependenciesArr[0][i]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
       }else if(Key_DependenciesArr[0][i]['ScopeLevel'] === 'Others'){
        level=level+'-'+Key_DependenciesArr[0][i]['Scope_BacklogActivity']
       }
      
        if (level === null){
          level='Overall Level' 
        }          
       // strlengthlevel=strlengthlevel+level.length
       //app 15 , disc 32
       if (level.length > (Math.abs(Math.round(str.length/32)))*15){
        strlengthlevel=strlengthlevel+level.length
      } else{
        strlengthlevel=strlengthlevel+(Math.abs(Math.round(level.length/32)))*15
      }

      if (str.length   > (Math.abs(Math.round(level.length/15)))*32){
        strlength=strlength+str.length  
      } else{
        strlength=strlength+(Math.abs(Math.round(level.length/15))*32)
       }
        if (flag= 'No') {
          if ( strlength > 550 ||strlengthlevel > 250 || rowcount === 11){
            flag ='Yes'
            if (rowcount > 1) { 
              ERow = i - 1
              }else{
                ERow = i
              }
        }}

                if ( flag=== 'Yes') {
                  Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
                    SRow=ERow+1

                    if (rowcount > 1) {

                                  i=i-1 
                    }
                    strlengthlevel=0;
                    rowcount=0
                    strlength =0;

                            flag ='No'

                }


          if (i+1 === Key_DependenciesArr[0].length && ERow < Key_DependenciesArr[0].length && SRow < Key_DependenciesArr[0].length) {
            Rowstend.push({"Row_S":SRow, "Row_E":Key_DependenciesArr[0].length-1 })
          }
         }
  for( let inum=0; inum< Rowstend.length; inum++){
  
   slide6 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide6, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide6.addText('Key Dependencies', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Dependency Type' ,options:options},
   { text:'Impact' ,options:options},
   ]);

   dt_Report = new Date();
   dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
   var DependencyCol = '';

   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    rowval =[];
    if(Key_DependenciesArr[0][i-1] !== undefined){
      
          for( let j=1; j< filedarr.length+1; j++){
            var Rowcol = Key_DependenciesArr[0][i-1]['color']
            if (j=== 1){
             rowval.push( { text: i ,options:{align:'c',fill:Rowcol}})
            } else if( filedarr[j-1] === 'ReportingLevel')  {

              var level =Key_DependenciesArr[0][i-1]['epicName'];
              if(Key_DependenciesArr[0][i-1]['ScopeLevel'] !== null && Key_DependenciesArr[0][i-1]['ScopeLevel'] !== ''){
                var level =level+'-'+Key_DependenciesArr[0][i-1]['ScopeLevel']
              }
                  if (Key_DependenciesArr[0][i-1]['sprintName'] !== null ){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['sprintName']
                  }

                  
                  if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'AT'){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['AppName']
                  }else if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'ST'){
                    level=level+'-'+Key_DependenciesArr[0][i-1]['CONCAT(st.STScopeLevel,\'-\',st.STScope,\'-\',st.STDetailedScope,\'-\',st.STScopeActivity)']
                 }else if(Key_DependenciesArr[0][i-1]['ScopeLevel'] === 'Others'){
                  level=level+'-'+Key_DependenciesArr[0][i-1]['Scope_BacklogActivity']
                 }
                


                  if (level === null){
                rowval.push({ text:'Overall Level',options:{fill:Rowcol} })
              } else {
                rowval.push({ text:level,options:{fill:Rowcol} })
              }

            } else {
              if(filedarr[j-1] === 'TargetDate'){
                var dt=moment(Key_DependenciesArr[0][i-1][filedarr[j-1]]);  
                Target_Date=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
                rowval.push({ text:Target_Date,options:{fill:Rowcol} })
              }else if(filedarr[j-1] === 'Status'){
                if(Key_DependenciesArr[0][i-1]['Status'] === 'Open'){ 
                var dt=moment(Key_DependenciesArr[0][i-1]['TargetDate']);  
                var TargetDt_Com = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");     
                dt_targer = new Date(TargetDt_Com);
                                
                  if( ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '1-Low') ||
                   (Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '2-Medium')) &&
                   (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {

                    // Green
                    DependencyCol = RAGGreen;
          
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) ) {
                   // Red
                   DependencyCol = RAGRed;
                    
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                     (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                      
                    //Amber
                    DependencyCol = RAGAmber;
                      
                  }else  if ((Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '3-High') &&
                      (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) ) {
                         
                    // Green
                    DependencyCol = RAGGreen;
                       
                  } else {    
                    if (Key_DependenciesArr[0][i-1]['ImpactConsequences'] === '')  {
                        if(new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          // Green
                          DependencyCol = RAGGreen;
                       
                        }else if(new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))){
                          //red
                          DependencyCol = RAGRed;
                        } 
                    }else {
                          //Red
                          DependencyCol = RAGRed;
                    }                          
                  }
                }else{               
                  DependencyCol = RAGBlue;
                }
                  rowval.push({ text:Key_DependenciesArr[0][i-1][filedarr[j-1]],options:{fill:DependencyCol}})
              }else{ 
                 rowval.push({ text:Key_DependenciesArr[0][i-1][filedarr[j-1]],options:{fill:Rowcol} })
               }
         } 
           }
           rows.push(
            rowval
          )
       }}
       slide6.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
      }
 } else {
 slide6 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide6, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'ScopeLegend')
 slide6.addText('Key Dependencies', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  var rows = [];
 var colW=[0.38,0.9,1.84,1.0,0.94,1.5,0.97,1.06,1.06]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 rows.push([
   { text:'#' ,options:options},
   { text:'Level' ,options:options},
   { text:'Description' ,options:options},
   { text:'Status' ,options:options},
   { text:'Priority' ,options:options},
   { text:'Owner' ,options:options},
   { text:'Target Date' ,options:options},
   { text:'Depencdcy Type' ,options:options},
   { text:'Impact' ,options:options},
   ]);
  
   rows.push([
     { text:"No Key Dependencies" ,options:{colspan:filedarr.length}}
   ])
   slide6.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
     
 }
   
 //Slide 7 Deliverable Status  
    if (Del_StatusArr.length === 0){
      var slide7 = pptx.addNewSlide();  
  SevenKeyMastertemplate(pptx, slide7, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'NoScopeLegend')
slide7.addText('Deliverable Status', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows7 = [];
 var colW7=[0.38,2.0,2.0,1.5,1.0,2.0]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 
  rows7.push([
    { text:'#' ,options:options},
    { text:'Deliverable Names' ,options:options},
    { text:'Deliverable Description' ,options:options},
    { text:'Contract Owner Name' ,options:options},
    { text:'Status' ,options:options},
    { text:'Comments' ,options:options},
     ]);

       rows7.push([
    { text:"No Deliverable Status" ,options:{colspan:6}}
  ])
 
  slide7.addTable( rows7, {colW:colW7,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
} else{
  var SRow= 0;
  var ERow= 0;
  var flag="No"
  Rowstend =[]
  var rowcount=0;
  strlength=0;
  var strlengthlevel =0;
  var strlengthComment =0;

    for( let i=0; i< Del_StatusArr.length; i++){
      rowcount=rowcount+1
      var str = JSON.stringify(Del_StatusArr[i]["ContractDeliver_Comments"]);
      strlength=strlength+str.length      

      if (flag = 'No') {
        if (strlength > 550 || rowcount === 11) {
            flag = 'Yes'
            if (rowcount > 1) { 
              ERow = i - 1
              }else{
                ERow = i
              }
        }
      }

      if ( flag=== 'Yes') {
        Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
        SRow=ERow+1
        strlength =0; 
        if (rowcount>1){
          i=i-1;
        }
      
        flag ='No'
        rowcount=0;
      }
      if ( i+1=== Del_StatusArr.length && ERow < Del_StatusArr.length && SRow < Del_StatusArr.length){
        Rowstend.push({"Row_S":SRow, "Row_E":Del_StatusArr.length-1 })            
      } 
     
    }
  for( let inum=0; inum< Rowstend.length; inum++){
    var slide7 = pptx.addNewSlide();  
  SevenKeyMastertemplate(pptx, slide7, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'NoScopeLegend')
slide7.addText('Deliverable Status', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
 var rows = [];
 var colW=[0.38,2.0,2.0,1.5,1.0,2.0]
 var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
 
  rows.push([
    { text:'#' ,options:options},
    { text:'Deliverable Names' ,options:options},
    { text:'Deliverable Description' ,options:options},
    { text:'Contract Owner Name' ,options:options},
    { text:'Status' ,options:options},
    { text:'Comments' ,options:options},
     ]);
     var delstatus ='';
     var delcolor = '';

     for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){

      if(Del_StatusArr[i-1]["ContractDeliver_Status"] === 'null'){
        delstatus = ''
        delcolor = RAGWhite;
      }else{
        delstatus = Del_StatusArr[i-1]["ContractDeliver_Status"]
        if(delstatus === 'Completed'){
          delcolor = RAGBlue;
        }else if(delstatus === 'Delayed'){
          delcolor = RAGRed;
        }else if(delstatus === 'In progress'){
          delcolor = RAGAmber;
        }else if(delstatus === 'Not Started'){
          delcolor = RAGGray;
        }else{
          delcolor = RAGWhite;
        }
      }    

         rows.push([
        { text: i ,options:{align:'c'}},
        { text:Del_StatusArr[i-1]["DeliverableName"] },
        { text:Del_StatusArr[i-1]["DeliverableValues"] },
        { text:Del_StatusArr[i-1]["ContractDoc_OwnerNM"]},
        { text:delstatus,options:{fill:delcolor}},
        { text:Del_StatusArr[i-1]["ContractDeliver_Comments"]},
         ]);
      
    }
       slide7.addTable( rows, {lineWeight:1.0,colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
    
  }
}

 //Slide 8 Schedule
    
 if (Detailval[0].length === 0){
  slide8 =pptx.addNewSlide();
  SevenKeyMastertemplate(pptx, slide8, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'EpicScopeLegend')
 slide8.addText('Schedule', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});
  
var rows8 = [];
var colW8=[0.38,2.5,1.0,0.85,0.85,0.85,0.85,0.85,0.85]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}

rows8.push([
{ text:'#' ,options:options},
{ text:'Level' ,options:options},
{ text:'Status' ,options:options},
{ text:'Plan Start Date' ,options:options},
{ text:'Plan End Date' ,options:options},
{ text:'Re-Plan Start Date' ,options:options},
{ text:'Re-Plan End Date' ,options:options},
{ text:'Actual Start Date' ,options:options},
{ text:'Actual End Date' ,options:options},
 ]);

   rows8.push([
{ text:"No Detail Schedule" ,options:{colspan:9}}
])

slide8.addTable( rows8, {colW:colW8,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
} else{

  var Rowstend =[]
  var SRow= 0;
  var ERow= 0;
  var rowcount =0;
  var flag="No"
  var strlength =0;
  var strlengthlevel =0;
 
for (i=0; i<Detailval[0].length ;i++){
 rowcount=rowcount+1;
  var level =Detailval[0][i]['epicName'];
 if(level !== null){
  strlengthlevel=strlengthlevel+level.length
 }

if(flag === 'No'){
  if (strlengthlevel > 350 || rowcount === 11 ) {
    flag ='Yes'
    if (rowcount > 1) { 
      ERow = i - 1
      }else{
        ERow = i
      }
    }
}
if ( flag=== 'Yes') {
  Rowstend.push({"Row_S":SRow, "Row_E":ERow  })
    SRow=ERow+1
                 if (rowcount > 1) {
     
                  i=i-1 
    }
    strlengthlevel=0;
    rowcount=0
    strlength =0;
                          
            flag ='No'
            
}

if ((i+1 === Detailval[0].length) && (ERow < Detailval[0].length) && (SRow < Detailval[0].length)) {
         
  Rowstend.push({"Row_S":SRow, "Row_E":Detailval[0].length-1 })
}
}

for( let inum=0; inum< Rowstend.length; inum++){
var slide8 = pptx.addNewSlide();  
SevenKeyMastertemplate(pptx, slide8, weekend_date, SevenkeyAccount, TRantionTeamList, LastweekOverRAG, CurweekOverRAG, CurweekTrend,'EpicScopeLegend')
slide8.addText('Detail Schedule', {fontSize:12, bold:true, w:4,x:0.1, y:1.02, color:'660099'});


var rows = [];
var colW=[0.38,2.5,1.0,0.85,0.85,0.85,0.85,0.85,0.85]
var options ={fill:'0070C0', color:'fdfefe', bold:true, align:'c', valign:'c'}
rows.push([
  { text:'#' ,options:options},
  { text:'Level' ,options:options},
  { text:'Status' ,options:options},
  { text:'Plan Start Date' ,options:options},
  { text:'Plan End Date' ,options:options},
  { text:'Re-Plan Start Date' ,options:options},
  { text:'Re-Plan End Date' ,options:options},
  { text:'Actual Start Date' ,options:options},
  { text:'Actual End Date' ,options:options},
   ]);
  
   

   for( let i=Rowstend[inum]['Row_S']+1; i<= Rowstend[inum]['Row_E']+1; i++){
    var PSDate='';
    var PEDate='';
    var RpSDate='';
    var RpEDate='';
    var ASDate='';
    var AEDate='';
    var dt;
        if (Detailval[0][i-1]["color"] === 'color') {
          var options ={fill:'#C0C0C0'}
          var options1 = {fill:'#C0C0C0',align:'c'}
        } else {
          var options1 = {fill:Detailval[0][i-1]["color"],align:'c'}
          var options ={fill:Detailval[0][i-1]["color"]}
        }

        if (Detailval[0][i-1]["rag"] === 'null') {
          var Statusval = '';
        } else {
          var Statusval = Detailval[0][i-1]["rag"];
        }
       

        if(Detailval[0][i-1]["startDate"] !== null) {
         dt = moment(Detailval[0][i-1]["startDate"])
         PSDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
        }
        
        if(Detailval[0][i-1]["endDate"] !== null) {
          dt = moment(Detailval[0][i-1]["endDate"])
          PEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["replanStartDate"] !== null) {
          dt = moment(Detailval[0][i-1]["replanStartDate"])
          RpSDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["replanEndDate"] !== null) {
          dt = moment(Detailval[0][i-1]["replanEndDate"])
          RpEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["actualStartDate"] !== null) {
          dt = moment(Detailval[0][i-1]["actualStartDate"])
          ASDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         if(Detailval[0][i-1]["actualEndDate"] !== null) {
          dt = moment(Detailval[0][i-1]["actualEndDate"])
          AEDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY"); 
         }

         var detailColor = '';
         dt_Report = new Date();
     
         if(Detailval[0][i-1]["replanStartDate"] !== null){
           dt_ReportPlanStDT = new Date(moment(Detailval[0][i-1]["replanStartDate"]).format("MM-DD-YY"));
         }else{
           if(Detailval[0][i-1]["startDate"] !== null){
             dt_ReportPlanStDT = new Date(moment(Detailval[0][i-1]["startDate"]).format("MM-DD-YY"));
           }else{
             dt_ReportPlanStDT = '';
           }
         }  
         
         if(Detailval[0][i-1]["replanEndDate"] !== null){
           dt_ReportPlanEndDT = new Date(moment(Detailval[0][i-1]["replanEndDate"]).format("MM-DD-YY"));
         }else{
           if(Detailval[0][i-1]["endDate"] !== null){
             dt_ReportPlanEndDT = new Date(moment(Detailval[0][i-1]["endDate"]).format("MM-DD-YY"));
           }else{
             dt_ReportPlanEndDT = '';
           }
         }  
   
         if(Detailval[0][i-1]["rag"] === 'Green'){
           detailColor = {fill:RAGGreen};
         }else if(Detailval[0][i-1]["rag"] === 'Amber'){
           detailColor = {fill:RAGAmber};
         }else if(Detailval[0][i-1]["rag"] === 'Red'){
           detailColor = {fill:RAGRed};
         }else{
   
           if((dt_ReportPlanStDT!== '') && (dt_ReportPlanEndDT!== '')){
     
             if(((Detailval[0][i-1]["rag"] === 'Not Started')) 
             && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))){
               detailColor = {fill:RAGRed};
   
             }else if((Detailval[0][i-1]["rag"] === 'Behind Schedule') 
             && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))){  
              detailColor = {fill:RAGRed};
   
             }else if((Detailval[0][i-1]["rag"] === 'Behind Schedule')){
               detailColor = {fill:RAGAmber};
   
             }else if((Detailval[0][i-1]["rag"] === 'On Schedule')){
               detailColor = {fill:RAGGreen};
   
             }else if((Detailval[0][i-1]["rag"] === 'Completed')){
               detailColor = {fill:RAGBlue};
   
             }else if((Detailval[0][i-1]["rag"] === 'Not Started')){
                 detailColor = {fill:RAGGray};
               
             }else {
               detailColor = options;
             } 
           }else{
               if((Detailval[0][i-1]["rag"] === 'Behind Schedule')){
                 detailColor = {fill:RAGAmber};
   
               }else if((Detailval[0][i-1]["rag"] === 'On Schedule')){
                 detailColor = {fill:RAGGreen};
   
               }else if((Detailval[0][i-1]["rag"] === 'Completed')){
                 detailColor = {fill:RAGBlue};
   
               }else if((Detailval[0][i-1]["rag"] === 'Not Started')){
                 detailColor = {fill:RAGGray};
   
               }else {
                 detailColor = options;
               } 
           } 
         }   

      rows.push([
    { text: i ,options:options1},
    { text:Detailval[0][i-1]["epicName"],options:options },
    // { text:Statusval,options:detailColor },
    { text:'',options:detailColor},
    { text:PSDate,options:options},
    { text:PEDate,options:options},
    { text:RpSDate,options:options},
    { text:RpEDate,options:options },
    { text:ASDate,options:options },
    { text:AEDate,options:options  },
     ]);
  }
    slide8.addTable( rows, {colW:colW,fontSize:10,fontFace:'Calibri', x:0.2, y:1.41,border:{pt:'1', color:'D3D3D3'}} );
  
}
}



      //end
       pptx.save(filename);
      
      
    
      
     }, 15000)  
  
  
    setTimeout(()=>{
      filename = "WSRReport-"+USername.replace(/\s/g,'');
    var filePath = __dirname+'\\'+filename+'.pptx';
     try {
      //  // console.log('remove2' +filePath)
      fs.unlinkSync(filePath)
      //file removed
    } catch(err) {
      console.error(err)
    }
     }, 17000) 
    setTimeout(()=>{  
      filename = "WSRReport-"+USername.replace(/\s/g,'');
    var filePath = __dirname+'\\'+filename+'.pptx';
    return res.sendFile(filePath);
    }, 16000) 

});
//WSR end

//**************************tranistion closure**************************//
app.get('/TransCloseforAccount/:phaseName/:IntegrationID', (req, res) => {    
  var phaseName = req.params.phaseName;
  var IntegrationID = req.params.IntegrationID;
  QueryTransClose = "select * from standard_activity_for_accounts"+
  " where IntegrationID ='" + IntegrationID + "' AND  PHASE_NAME ='" + phaseName + "' AND CheckedValue='1'" ;
//console.log(QueryTransClose)  
pool.getConnection().then(conn => {
          conn.query(QueryTransClose).then((QueryTransCloseRes) => {
            ////console.log(serviceBacklogRes)  
            res.send(QueryTransCloseRes);

              conn.end()
          })
      })
      .catch(err => {
          res.send({"Fetch": "Fail"})
          conn.end();
      })
      .catch(err => {
          //not connected
      })
})

app.put('/putTransClose', (req, res) => {
  ////console.log("put")
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID
          STANDARD_ACTIVITY_NAME = req.body[i].STANDARD_ACTIVITY_NAME
          MILESTONE_OR_TASK = req.body[i].MILESTONE_OR_TASK
          PHASE_NAME = req.body[i].PHASE_NAME          
          var dt=moment(new Date());
          STANDARD_ACTIVITY_LAST_UPDATED_BY = req.body[i].STANDARD_ACTIVITY_LAST_UPDATED_BY
          STANDARD_ACTIVITY_CREATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          STANDARD_ACTIVITY_LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          IntegrationID = req.body[i].IntegrationID;
          CheckedValue = req.body[i].CheckedValue;
          ServiceStatus = req.body[i].ServiceStatus;
          Owner_Name = req.body[i].Owner_Name;
          Comments = req.body[i].Comments;

          if(req.body[i].Plan_Start_Date == "undefined" || req.body[i].Plan_Start_Date == "" || req.body[i].Plan_Start_Date == null){            
            Plan_Start_Date='0000-00-00 00:00:00'          
          }else{
              var dt=moment(req.body[i].Plan_Start_Date);
              Plan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }
          if(req.body[i].Plan_End_Date == "undefined" || req.body[i].Plan_End_Date == "" || req.body[i].Plan_End_Date == null){
            Plan_End_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Plan_End_Date);
            Plan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");          
          }

          if(req.body[i].Replan_Start_Date == "undefined" || req.body[i].Replan_Start_Date == "" || req.body[i].Replan_Start_Date == null){
            Replan_Start_Date='0000-00-00 00:00:00'
          }else{
              var dt=moment(req.body[i].Replan_Start_Date);
              Replan_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].RePlan_End_Date == "undefined" || req.body[i].RePlan_End_Date == "" || req.body[i].RePlan_End_Date === null){
            RePlan_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].RePlan_End_Date);
          RePlan_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          
          }

          if(req.body[i].Actual_Start_Date == "undefined" || req.body[i].Actual_Start_Date == "" || req.body[i].Actual_Start_Date == null){
            Actual_Start_Date='0000-00-00 00:00:00'
          }else{
                    var dt=moment(req.body[i].Actual_Start_Date);
                    Actual_Start_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");       
          }

          if(req.body[i].Actual_End_Date == "undefined" || req.body[i].Actual_End_Date == "" || req.body[i].Actual_End_Date == null){
            Actual_End_Date='0000-00-00 00:00:00'
          }else{
            var dt=moment(req.body[i].Actual_End_Date);
            Actual_End_Date=moment([dt.year(), dt.month(), dt.date(), dt.hours(), dt.minutes(), dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");

          }

          QueryputTransClose ="Update standard_activity_for_accounts SET STANDARD_ACTIVITY_LAST_UPDATED_BY='"
          +STANDARD_ACTIVITY_LAST_UPDATED_BY                              
          +"',STANDARD_ACTIVITY_LAST_UPDATED_AT='"+STANDARD_ACTIVITY_LAST_UPDATED_AT
          +"',CheckedValue='"+CheckedValue
          +"',Plan_Start_Date='"+Plan_Start_Date
          +"',Plan_End_Date='"+Plan_End_Date
          +"',Replan_Start_Date='"+Replan_Start_Date
          +"',RePlan_End_Date='"+RePlan_End_Date
          +"',Actual_Start_Date='"+Actual_Start_Date
          +"',Actual_End_Date='"+Actual_End_Date          
          +"',ServiceStatus='"+ServiceStatus  
          +"',Owner_Name='"+Owner_Name
          +"',Comments='"+Comments
          +"' where STANDARD_ACTIVITY_ID='"+STANDARD_ACTIVITY_ID+"'"

          //console.log(putTailoredWBSSB)
          conn.query(QueryputTransClose).then((QueryputTransCloseresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"insert": "success"});
  } else {
      res.send({"insert": "fail"});
  }
})

app.put('/putTransCloseBaseline', (req, res) => {
  var endres = true
  var len = req.body.length
  pool.getConnection().then(conn => {
      for (var i in req.body) {
          STANDARD_ACTIVITY_ID = req.body[i].STANDARD_ACTIVITY_ID;
          QueryputTransCloseBaseline =
              "Update standard_activity_for_accounts SET Baselined=1 where STANDARD_ACTIVITY_ID='" + STANDARD_ACTIVITY_ID + "'"
          conn.query(QueryputTransCloseBaseline).then((QueryputTransCloseBaselineresult) => {
                  conn.end();
              })
              .catch(err => {
                  endres = false;
                  //handle error
                  // res.send({"save" : "Fail" })
                  conn.end();
              })
      }
  }).catch(err => {
      //not connected
  });

  if (endres === true) {
      res.send({"insert": "success"});
  } else {
      res.send({"insert": "fail"});
  }
})

app.get('/getTransCloseStatus',(req,res)=>{
  QueryTransCloseStatus = "select FieldCategoryName,Categoryvalues from adminprofile where FieldCategoryName ='SprintStatus' ORDER BY Categoryvalues ASC";
  pool.getConnection().then(conn=>{
    conn.query(QueryTransCloseStatus).then((QueryTransCloseStatusResult)=>{
        res.send(QueryTransCloseStatusResult)
        conn.end();
    })
  }).catch(err=>{
    res.send({"Fetch": "Fail"})
    conn.end();
  })
  .catch(err=>{
     //Not connected
  })
})

//**************************tranistion closure********************************//

//*************************Parameter Health Excel Report *********************/
function gettingnames(filePath, wb, ws, tableIntegration, IntegrationID, tablename, tablecolname){
  pool.getConnection().then(conn => {             
  queryTableValues ="select * from "+tablename+" where "+tableIntegration+"='"+ IntegrationID +"' ORDER BY "+tablecolname+" ASC";
    conn.query(queryTableValues).then((queryTableValuesRes) => {
      var Namesarray = '';          
      Namesarray= JSON.parse(JSON.stringify(queryTableValuesRes));           
      for (let a= 1; a< Namesarray.length+1 ;a++) {       
        ws.cell(a+1 , 4).string(Namesarray[a-1][tablecolname])
        ws.cell(a+1, 4).style({border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'} 
         }
        }); 
        wb.write(filePath);
      }
      conn.end();   
    });       
   });
}

function gettingnamesSingle(myStyleWhite, myStyleRed, myStyleAmber, myStyleGreen, MLogicCol, MHealthCol, parameterCustomId, jcol, appCol, filePath, wb, ws, tableIntegration, IntegrationID, tablename, tablecolname){
 
  if(tablename === 'application_information'){
 
    queryTableValuesUNIDApp ="SELECT distinct ai.AppUNID, ai.AppName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS,"+ 
    "sc.Scope_UNID, sc.epicUNID,sc.sprintUNID,ep.epicName, sp.sprintName, st.status "+
    "FROM application_information ai "+
    "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
    "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
    "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
    "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
    "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
    "AND ai.AppUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
    "WHERE ai.IntegrationID='"+IntegrationID+"' ORDER BY AppName ASC";

   pool.getConnection().then(conn => { 
    conn.query(queryTableValuesUNIDApp).then((queryTableValuesUNIDAppRes) => {
      var NamesarrayUNIDApps=[];
        NamesarrayUNIDApps = JSON.parse(JSON.stringify(queryTableValuesUNIDAppRes));                 
        for (let a= 1; a< NamesarrayUNIDApps.length+1 ;a++) {       
          ws.cell(a+1 , 1).number(a) 
          if((NamesarrayUNIDApps[a-1].epicName!==null)){ 
          ws.cell(a+1 , 2).string(NamesarrayUNIDApps[a-1].epicName)
          }else{
          ws.cell(a+1 , 2).string('Not Available')
          }
          if((NamesarrayUNIDApps[a-1].sprintName!==null)){
          ws.cell(a+1 , 3).string(NamesarrayUNIDApps[a-1].sprintName)
          }else{
            ws.cell(a+1 , 3).string('Not Available')
          }
          if((NamesarrayUNIDApps[a-1].AppName!==null)){
          ws.cell(a+1 , 4).string(NamesarrayUNIDApps[a-1].AppName)
          }else{
            ws.cell(a+1 , 4).string('Not Available')
          }
          if((NamesarrayUNIDApps[a-1].status!==null)){
          ws.cell(a+1 , 5).string(NamesarrayUNIDApps[a-1].status)
          }else{
            ws.cell(a+1 , 5).string('Not Available')
          }
          if(NamesarrayUNIDApps[a-1].RAG!== null){
            ws.cell(a+1 , 6).string(NamesarrayUNIDApps[a-1].RAG)
            if(NamesarrayUNIDApps[a-1].RAG === 'R'){
              ws.cell(a+1 , 6).style(myStyleRed); 
            }else if(NamesarrayUNIDApps[a-1].RAG === 'A'){
              ws.cell(a+1 , 6).style(myStyleAmber); 
            }else if(NamesarrayUNIDApps[a-1].RAG === 'G'){
              ws.cell(a+1 , 6).style(myStyleGreen); 
            }  
          }
          ws.cell(1, 1, NamesarrayUNIDApps.length+1, jcol).style({border: {
            left: { style: 'thin'},        
            right: { style: 'thin'},  
            top: { style: 'thin'},  
            bottom: { style: 'thin'} 
          }
         });  
          wb.write(filePath);      
          if(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS!==null){
          var multipleQueAPP=[];
          multipleQueAPP = JSON.parse(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS);
          var qcol = 0;
          for (let q= 1; q< multipleQueAPP.length+1 ;q++) {  
               qcol = parseInt(q)+parseInt(MLogicCol);  
               if(multipleQueAPP[q-1].ANSWER !== undefined){    
               ws.cell(a+1 , qcol).string(multipleQueAPP[q-1].ANSWER)
               }else{
                ws.cell(a+1 , qcol).string('Not Available') 
               }
               ws.cell(a+1, qcol).style({border: {
                left: { style: 'thin'},        
                right: { style: 'thin'},  
                top: { style: 'thin'},  
                bottom: { style: 'thin'} 
               }
              }); 
               wb.write(filePath);  
          }
        } 
      }     
    conn.end();   
    });       
  });
  }else if(tablename === 'traineeinfo'){
    queryTableValuesTrainee ="SELECT distinct tr.Trainee_SNO, tr.Trainee_Name, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
    "FROM traineeinfo tr "+
    "LEFT OUTER JOIN readiness_question_tracker rq ON rq.PARAMETER_CUSTOM_ID='"+parameterCustomId+"' "+
    "AND tr.Trainee_SNO=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
    "WHERE tr.Trainee_IntegrationID='"+IntegrationID+"' ORDER BY Trainee_Name ASC";
   
   pool.getConnection().then(conn => { 
    conn.query(queryTableValuesTrainee).then((queryTableValuesTraineeRes) => {
      var NamesarrayUNIDTrainee=[];
     NamesarrayUNIDTrainee = JSON.parse(JSON.stringify(queryTableValuesTraineeRes)); 
     for (let a= 1; a< NamesarrayUNIDTrainee.length+1 ;a++) {       
       if((NamesarrayUNIDTrainee[a-1].Trainee_Name!==null)){ 
       ws.cell(a+1 , 1).string(NamesarrayUNIDTrainee[a-1].Trainee_Name)
       }
       if(NamesarrayUNIDTrainee[a-1].RAG!==null){
         ws.cell(a+1 , 2).string(NamesarrayUNIDTrainee[a-1].RAG)
         if(NamesarrayUNIDTrainee[a-1].RAG === 'R'){
           ws.cell(a+1 , 2).style(myStyleRed); 
         }else if(NamesarrayUNIDTrainee[a-1].RAG === 'A'){
           ws.cell(a+1 , 2).style(myStyleAmber); 
         }else if(NamesarrayUNIDTrainee[a-1].RAG === 'G'){
           ws.cell(a+1 , 2).style(myStyleGreen); 
         }      
        }
        ws.cell(1, 1, NamesarrayUNIDTrainee.length+1, jcol).style({border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'} 
        }
       });  
       wb.write(filePath);  
       if(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS!==null){
         var multipleQueTrainee=[]
       multipleQueTrainee = JSON.parse(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS);
       var qcol = 0;
       for (let q= 1; q< multipleQueTrainee.length+1 ;q++) {  
              qcol = parseInt(q)+parseInt(MLogicCol); 
             if(multipleQueTrainee[q-1].ANSWER!==null){      
              ws.cell(a+1 , qcol).string(multipleQueTrainee[q-1].ANSWER)
             }else{
               ws.cell(a+1 , qcol).string('Not Available')
              }  
              ws.cell(a+1, qcol).style({border: {
               left: { style: 'thin'},        
               right: { style: 'thin'},  
               top: { style: 'thin'},  
               bottom: { style: 'thin'} 
              }
             }); 
              wb.write(filePath);  
       }                   
     } 
     }
    conn.end();   
   });       
 }); 

  }else if(tablename === 'epics'){
    queryTableValuesEpics ="SELECT distinct ep.epicUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
    "FROM epics ep "+
    "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
    "AND ep.epicUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
    "WHERE ep.IntegrationID='"+IntegrationID+"' ORDER BY epicName ASC";
   
   pool.getConnection().then(conn => { 
    conn.query(queryTableValuesEpics).then((queryTableValuesEpicsRes) => {
     var NamesarrayUNIDEpics = [];          
     NamesarrayUNIDEpics = JSON.parse(JSON.stringify(queryTableValuesEpicsRes)); 
     for (let a= 1; a< NamesarrayUNIDEpics.length+1 ;a++) {    
       ws.cell(a+1 , 1).number(a) 
       if(NamesarrayUNIDEpics[a-1].epicName!==null){
        ws.cell(a+1 , 2).string(NamesarrayUNIDEpics[a-1].epicName)
       }else{
        ws.cell(a+1 , 2).string('Not Available')
       }
       if(NamesarrayUNIDEpics[a-1].RAG!==null){
         ws.cell(a+1 , MHealthCol).string(NamesarrayUNIDEpics[a-1].RAG)
         if(NamesarrayUNIDEpics[a-1].RAG === 'R'){
           ws.cell(a+1 , MHealthCol).style(myStyleRed); 
         }else if(NamesarrayUNIDEpics[a-1].RAG === 'A'){
           ws.cell(a+1 , MHealthCol).style(myStyleAmber); 
         }else if(NamesarrayUNIDEpics[a-1].RAG === 'G'){
           ws.cell(a+1 , MHealthCol).style(myStyleGreen); 
         }      
       }
       ws.cell(1, 1, NamesarrayUNIDEpics.length+1, jcol).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
      }
     });  
       wb.write(filePath);   
       
       if(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS!==null){
         var multipleQueTrainee=[];
       multipleQueEpics = JSON.parse(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS);
       var qcol = 0;
       for (let q= 1; q< multipleQueEpics.length+1 ;q++) {  
              qcol = parseInt(q)+parseInt(MLogicCol); 
             if(multipleQueEpics[q-1].ANSWER!==null){      
              ws.cell(a+1 , qcol).string(multipleQueEpics[q-1].ANSWER)
             }else{
               ws.cell(a+1 , qcol).string('Not Available')
              }  
              ws.cell(a+1, qcol).style({border: {
               left: { style: 'thin'},        
               right: { style: 'thin'},  
               top: { style: 'thin'},  
               bottom: { style: 'thin'} 
              }
             }); 
              wb.write(filePath);  
       }                   
       } 
     }
    conn.end();   
   });       
 }); 
  }else if(tablename === 'sprint'){
    queryTableValuesUNIDSprint ="SELECT sp.sprintName, sp.sprintUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
              "FROM sprint sp "+
              "LEFT OUTER JOIN epics ep ON sp.epicUNID=ep.epicUNID "+
              "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
              "AND sp.sprintUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
              "WHERE sp.IntegrationID='"+IntegrationID+"' ORDER BY sprintName ASC";
  
             pool.getConnection().then(conn => { 
              conn.query(queryTableValuesUNIDSprint).then((queryTableValuesUNIDSprintRes) => {
                var NamesarrayUNIDSprint = [];          
                NamesarrayUNIDSprint = JSON.parse(JSON.stringify(queryTableValuesUNIDSprintRes));                 
                for (let a= 1; a< NamesarrayUNIDSprint.length+1 ;a++) {    
                  ws.cell(a+1 , 1).number(a)  
                  if((NamesarrayUNIDSprint[a-1].epicName!==null)){ 
                  ws.cell(a+1 , 2).string(NamesarrayUNIDSprint[a-1].epicName)
                  }else{
                  ws.cell(a+1 , 2).string('Not Available')
                  }
                  if((NamesarrayUNIDSprint[a-1].sprintName!==null)){ 
                  ws.cell(a+1 , 3).string(NamesarrayUNIDSprint[a-1].sprintName)
                  }else{
                  ws.cell(a+1 , 3).string('Not Available')
                  }        
                  if(NamesarrayUNIDSprint[a-1].RAG!== null){
                      ws.cell(a+1 , 5).string(NamesarrayUNIDSprint[a-1].RAG)
                      if(NamesarrayUNIDSprint[a-1].RAG === 'R'){
                        ws.cell(a+1 , 5).style(myStyleRed); 
                      }else if(NamesarrayUNIDSprint[a-1].RAG === 'A'){
                        ws.cell(a+1 , 5).style(myStyleAmber); 
                      }else if(NamesarrayUNIDSprint[a-1].RAG === 'G'){
                        ws.cell(a+1 , 5).style(myStyleGreen); 
                      }  
                  }
                  ws.cell(1, 1, NamesarrayUNIDSprint.length+1, jcol).style({border: {
                    left: { style: 'thin'},        
                    right: { style: 'thin'},  
                    top: { style: 'thin'},  
                    bottom: { style: 'thin'} 
                  }
                 });   
                    wb.write(filePath);      
                    if(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS!==null){
                      var multipleQueSpr=[];
                    multipleQueSpr = JSON.parse(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS);
                    var qcol = 0;
                    for (let q= 1; q< multipleQueSpr.length+1 ;q++) {  
                         qcol = parseInt(q)+parseInt(MLogicCol);  
                         if(multipleQueSpr[q-1].ANSWER !== undefined){    
                         ws.cell(a+1 , qcol).string(multipleQueSpr[q-1].ANSWER)
                         }else{
                          ws.cell(a+1 , qcol).string('Not Available') 
                         }
                         ws.cell(a+1, qcol).style({border: {
                          left: { style: 'thin'},        
                          right: { style: 'thin'},  
                          top: { style: 'thin'},  
                          bottom: { style: 'thin'} 
                         }
                        }); 
                         wb.write(filePath);  
                    }
                  } 
                }     
              conn.end();   
              });       
            });
  }
}

app.get('/getExcelHealthReadiness/:IntegrationID/:UserName',(req,res)=>{

  var IntegrationID = req.params.IntegrationID;
  var UserName = req.params.UserName;
  var lengthflag = 0;
  var enres =true;
  var FalgViewExcel='No';
  
  var wb = new xl.Workbook();
  const filename = "SampleExcelReadiness"+UserName.replace(/\s/g,'')+".xls";
  var filePath = __dirname+'\\'+filename;
  
  var ws = wb.addWorksheet('Profile');  
  var myStyle = wb.createStyle({
    fill: {
      type: 'pattern',
      patternType: 'solid',
      bgColor: '#1D3649',
      fgColor: '#1D3649',
    },
    font: {
      name: 'Arial',
       size: 10 ,
      bold: true,
      color: 'FFFFFF',
    },
    alignment: {
    horizontal: 'center',
    vertical: 'center',
    wrapText: true,
    },
  });  
  var myStyleRed = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '#FF0000',
     fgColor: '#FF0000',
    },
  });  
  var myStyleGreen = wb.createStyle({
      fill: {
       type: 'pattern',
       patternType: 'solid',
       bgColor: '#00FF00',
       fgColor: '#00FF00',
      },
  });  
  var myStyleAmber = wb.createStyle({
        fill: {
         type: 'pattern',
         patternType: 'solid',
         bgColor: '#FFCC00',
         fgColor: '#FFCC00',
        },
  });
  var myStyleWhite = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '#FFFFFF',
     fgColor: '#FFFFFF',
    },
});
  
  setTimeout(() => {  
    // Note: give the formate name as in sql table column name
    const data = [
      {   "ColumnName": "Profile Name",   "Format": "Value" },   
      {   "ColumnName": "Client Name",   "Format": "ClientName"},   
      {   "ColumnName": "Sector",   "Format": "Sector"},    
      {   "ColumnName": "Industry",   "Format": "Industry"},
      {   "ColumnName": "IOT",   "Format": "IOT"},   
      ];
     ws.column(1).setWidth(20);
     ws.column(2).setWidth(40);
  
    ws.cell( 1, 1, 1, 2,true).string('Health & Readiness Indicator Category List For Tracking ')
    ws.cell( 1, 1).style(myStyle);
    ws.cell( 2, 1, 2, 2,true)
    ws.row(2).setHeight(2);
    ws.cell( 3, 1).style(myStyle);
    ws.cell( 3, 2).style(myStyle);
      for (let i = 0; i < data.length; i += 1) {
         ws.cell(i + 3, 1).string(data[i].ColumnName);
        
              if (data[i].Format !== 'Value') {
          ws.cell(i + 3, 2).string(ProfileDataVal[0][data[i].Format]);
              } else {
          ws.cell(i + 3, 2).string(data[i].Format);
         }       
        }
          
      ws.cell(1, 1, 7, 2).style({border: {
                                 left: { style: 'thin'},        
                                 right: { style: 'thin'},  
                                 top: { style: 'thin'},  
                                 bottom: { style: 'thin'} 
                               }
      });    
    wb.write(filePath);
  },3000); 
  
  queryProfileKeyword ="select * from transitionprofile WHERE IntegrationID='"+ IntegrationID +"'";  
    pool.getConnection().then(conn => {        
       conn.query(queryProfileKeyword).then((ProfileData) => {       
        ProfileDataVal=JSON.parse(JSON.stringify(ProfileData));          
       conn.end();    
     });       
    });

    queryTabsKeyword ="select PARAMETER_NAME, PARAMETER_CUSTOM_ID, RESOURCE_TYPE_MEASURED from parameter_custom WHERE TRANSITION_ID='"+ IntegrationID +"' and ADOPTED_PARAMETER IN ('Y','NA')";
    pool.getConnection().then(conn => {        
    conn.query(queryTabsKeyword).then((TabData) => {       
      HealthTabName= JSON.parse(JSON.stringify(TabData));      
    conn.end();    
    });       
    });   
    
    setTimeout(()=>{ 
    for (let i= 1; i< HealthTabName.length+1 ;i++) {           
      pool.getConnection().then(conn => {             
      queryParQuestions ="select READINESS_QUESTION_CUSTOM_ID, READINESS_QUESTION_ADOPTED, READINESS_QUESTION from readiness_question_custom WHERE READINESS_QUESTION_CATEGORY='"+ HealthTabName[i-1].PARAMETER_CUSTOM_ID +"' and READINESS_QUESTION_ADOPTED IN ('Y','NA')";
          conn.query(queryParQuestions).then((queryParQuestionsRes) => {         
          var Readquestions = '';
          Readquestions= JSON.parse(JSON.stringify(queryParQuestionsRes));  
      // setTimeout(()=>{
      if((HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'application') || (HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'trainee') || (HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'epic') || (HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'sprint')){

        var ws = wb.addWorksheet(HealthTabName[i-1].PARAMETER_NAME); 
        ws.column(1).setWidth(30); 
        wb.write(filePath);
        // setTimeout(()=>{
           if(HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'application'){
            var NamesarrayUNIDApps=[];
            MtypeCol = 4;
            MHealthCol = 6;
            MLogicCol = 6;
       
           const ColumnsNamesdata = [
             {   "ColumnName": "S.No" },   
             {   "ColumnName": "EPIC" },   
             {   "ColumnName": "Sprint" },    
             {   "ColumnName": "" },
             {   "ColumnName": "Application Status" },
             {   "ColumnName": "Health" },
              
             ];
            ws.column(1).setWidth(8);
            ws.column(2).setWidth(15);
            ws.column(3).setWidth(15);
            ws.column(4).setWidth(24);
            ws.column(5).setWidth(15);
            ws.column(6).setWidth(8);
       
            for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
             ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
             ws.cell(1, i+1).style(myStyle);   
             ws.cell(1, i+1).style({border: {
               left: { style: 'thin'},        
               right: { style: 'thin'},  
               top: { style: 'thin'},  
               bottom: { style: 'thin'} 
              }
             }); 
            } 
            wb.write(filePath); 

                  queryTableValuesUNIDApp ="SELECT distinct ai.AppUNID, ai.AppName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS,"+ 
                  "sc.Scope_UNID, sc.epicUNID,sc.sprintUNID,ep.epicName, sp.sprintName, st.status "+
                  "FROM application_information ai "+
                  "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
                  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
                  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
                  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
                  "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+HealthTabName[i-1].PARAMETER_CUSTOM_ID+"'"+
                  "AND ai.AppUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
                  "WHERE ai.IntegrationID='"+IntegrationID+"' ORDER BY AppName ASC";

                    conn.query(queryTableValuesUNIDApp).then((queryTableValuesUNIDAppRes) => {
                        NamesarrayUNIDApps = JSON.parse(JSON.stringify(queryTableValuesUNIDAppRes));                 
                        for (let a= 1; a< NamesarrayUNIDApps.length+1 ;a++) {       
                          ws.cell(a+1 , 1).number(a) 
                          if((NamesarrayUNIDApps[a-1].epicName!==null)){ 
                          ws.cell(a+1 , 2).string(NamesarrayUNIDApps[a-1].epicName)
                          }else{
                          ws.cell(a+1 , 2).string('Not Available')
                          }
                          if((NamesarrayUNIDApps[a-1].sprintName!==null)){
                          ws.cell(a+1 , 3).string(NamesarrayUNIDApps[a-1].sprintName)
                          }else{
                            ws.cell(a+1 , 3).string('Not Available')
                          }
                          if((NamesarrayUNIDApps[a-1].AppName!==null)){
                          ws.cell(a+1 , 4).string(NamesarrayUNIDApps[a-1].AppName)
                          }else{
                            ws.cell(a+1 , 4).string('Not Available')
                          }
                          if((NamesarrayUNIDApps[a-1].status!==null)){
                          ws.cell(a+1 , 5).string(NamesarrayUNIDApps[a-1].status)
                          }else{
                            ws.cell(a+1 , 5).string('Not Available')
                          }
                          if(NamesarrayUNIDApps[a-1].RAG!== null){
                            ws.cell(a+1 , 6).string(NamesarrayUNIDApps[a-1].RAG)
                            if(NamesarrayUNIDApps[a-1].RAG === 'R'){
                              ws.cell(a+1 , 6).style(myStyleRed); 
                            }else if(NamesarrayUNIDApps[a-1].RAG === 'A'){
                              ws.cell(a+1 , 6).style(myStyleAmber); 
                            }else if(NamesarrayUNIDApps[a-1].RAG === 'G'){
                              ws.cell(a+1 , 6).style(myStyleGreen); 
                            }  
                          }
                          ws.cell(1, 1, NamesarrayUNIDApps.length+1, jcol).style({border: {
                            left: { style: 'thin'},        
                            right: { style: 'thin'},  
                            top: { style: 'thin'},  
                            bottom: { style: 'thin'} 
                          }
                         });  
                          wb.write(filePath);  
                          var multipleQueAPP ='';
                          if(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS!==null){
                          multipleQueAPP = JSON.parse(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS);
                          var qcol = 0;
                          for (let q= 1; q< multipleQueAPP.length+1 ;q++) {  
                               qcol = parseInt(q)+parseInt(MLogicCol);  
                               if(multipleQueAPP[q-1].ANSWER !== undefined){    
                               ws.cell(a+1 , qcol).string(multipleQueAPP[q-1].ANSWER)
                               }else{
                                ws.cell(a+1 , qcol).string('Not Available') 
                               }
                               ws.cell(a+1, qcol).style({border: {
                                left: { style: 'thin'},        
                                right: { style: 'thin'},  
                                top: { style: 'thin'},  
                                bottom: { style: 'thin'} 
                               }
                              }); 
                               wb.write(filePath);  
                          }
                        } 
                      }    
                    conn.end();                      
                  });  
               
           }else if(HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'epic'){
       
             MtypeCol = 2;
             MHealthCol = 4;
             MLogicCol = 4;
         
             const ColumnsNamesdata = [
               {   "ColumnName": "S.No" },   
               {   "ColumnName": "" },    
               {   "ColumnName": "Epic Status" },
               {   "ColumnName": "Health" },         
               ];
              ws.column(1).setWidth(8);
              ws.column(2).setWidth(15);
              ws.column(3).setWidth(15);
              ws.column(4).setWidth(8);
         
              for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
               ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
               ws.cell(1, i+1).style(myStyle);   
               ws.cell(1, i+1).style({border: {
                 left: { style: 'thin'},        
                 right: { style: 'thin'},  
                 top: { style: 'thin'},  
                 bottom: { style: 'thin'} 
                }
               }); 
              } 
              wb.write(filePath); 

              queryTableValuesEpics ="SELECT distinct ep.epicUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
    "FROM epics ep "+
    "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+HealthTabName[i-1].PARAMETER_CUSTOM_ID+"'"+
    "AND ep.epicUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
    "WHERE ep.IntegrationID='"+IntegrationID+"' ORDER BY epicName ASC";
   
  
    conn.query(queryTableValuesEpics).then((queryTableValuesEpicsRes) => {
     var NamesarrayUNIDEpics = '';          
     NamesarrayUNIDEpics = JSON.parse(JSON.stringify(queryTableValuesEpicsRes)); 
     for (let a= 1; a< NamesarrayUNIDEpics.length+1 ;a++) {    
       ws.cell(a+1 , 1).number(a) 
       if(NamesarrayUNIDEpics[a-1].epicName!==null){
        ws.cell(a+1 , 2).string(NamesarrayUNIDEpics[a-1].epicName)
       }else{
        ws.cell(a+1 , 2).string('Not Available')
       }
       if(NamesarrayUNIDEpics[a-1].RAG!==null){
         ws.cell(a+1 , MHealthCol).string(NamesarrayUNIDEpics[a-1].RAG)
         if(NamesarrayUNIDEpics[a-1].RAG === 'R'){
           ws.cell(a+1 , MHealthCol).style(myStyleRed); 
         }else if(NamesarrayUNIDEpics[a-1].RAG === 'A'){
           ws.cell(a+1 , MHealthCol).style(myStyleAmber); 
         }else if(NamesarrayUNIDEpics[a-1].RAG === 'G'){
           ws.cell(a+1 , MHealthCol).style(myStyleGreen); 
         }      
       }
       ws.cell(1, 1, NamesarrayUNIDEpics.length+1, jcol).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
      }
     });  
       wb.write(filePath);   
       
       if(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS!==null){
       var multipleQueEpics = JSON.parse(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS);
       var qcol = 0;
       for (let q= 1; q< multipleQueEpics.length+1 ;q++) {  
              qcol = parseInt(q)+parseInt(MLogicCol); 
             if(multipleQueEpics[q-1].ANSWER!==null){      
              ws.cell(a+1 , qcol).string(multipleQueEpics[q-1].ANSWER)
             }else{
               ws.cell(a+1 , qcol).string('Not Available')
              }  
              ws.cell(a+1, qcol).style({border: {
               left: { style: 'thin'},        
               right: { style: 'thin'},  
               top: { style: 'thin'},  
               bottom: { style: 'thin'} 
              }
             }); 
              wb.write(filePath);  
       }                   
       } 
     }
    conn.end();   
   });       

       
           }else if(HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'sprint'){
       
             MtypeCol = 3;
             MHealthCol = 5;
             MLogicCol = 5;
         
             const ColumnsNamesdata = [
               {   "ColumnName": "S.No" },   
               {   "ColumnName": "EPIC" },   
               {   "ColumnName": "" },    
               {   "ColumnName": "Sprint Status" },
               {   "ColumnName": "Health" },         
               ];
              ws.column(1).setWidth(8);
              ws.column(2).setWidth(15);
              ws.column(3).setWidth(15);
              ws.column(4).setWidth(15);
              ws.column(5).setWidth(8);
         
              for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
               ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
               ws.cell(1, i+1).style(myStyle);   
               ws.cell(1, i+1).style({border: {
                 left: { style: 'thin'},        
                 right: { style: 'thin'},  
                 top: { style: 'thin'},  
                 bottom: { style: 'thin'} 
                }
               }); 
              } 
              wb.write(filePath); 

              queryTableValuesUNIDSprint ="SELECT sp.sprintName, sp.sprintUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
              "FROM sprint sp "+
              "LEFT OUTER JOIN epics ep ON sp.epicUNID=ep.epicUNID "+
              "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+HealthTabName[i-1].PARAMETER_CUSTOM_ID+"'"+
              "AND sp.sprintUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
              "WHERE sp.IntegrationID='"+IntegrationID+"' ORDER BY sprintName ASC";
  
            
              conn.query(queryTableValuesUNIDSprint).then((queryTableValuesUNIDSprintRes) => {
                var NamesarrayUNIDSprint = '';          
                NamesarrayUNIDSprint = JSON.parse(JSON.stringify(queryTableValuesUNIDSprintRes));                 
                for (let a= 1; a< NamesarrayUNIDSprint.length+1 ;a++) {    
                  ws.cell(a+1 , 1).number(a)  
                  if((NamesarrayUNIDSprint[a-1].epicName!==null)){ 
                  ws.cell(a+1 , 2).string(NamesarrayUNIDSprint[a-1].epicName)
                  }else{
                  ws.cell(a+1 , 2).string('Not Available')
                  }
                  if((NamesarrayUNIDSprint[a-1].sprintName!==null)){ 
                  ws.cell(a+1 , 3).string(NamesarrayUNIDSprint[a-1].sprintName)
                  }else{
                  ws.cell(a+1 , 3).string('Not Available')
                  }        
                  if(NamesarrayUNIDSprint[a-1].RAG!== null){
                      ws.cell(a+1 , 5).string(NamesarrayUNIDSprint[a-1].RAG)
                      if(NamesarrayUNIDSprint[a-1].RAG === 'R'){
                        ws.cell(a+1 , 5).style(myStyleRed); 
                      }else if(NamesarrayUNIDSprint[a-1].RAG === 'A'){
                        ws.cell(a+1 , 5).style(myStyleAmber); 
                      }else if(NamesarrayUNIDSprint[a-1].RAG === 'G'){
                        ws.cell(a+1 , 5).style(myStyleGreen); 
                      }  
                  }
                  ws.cell(1, 1, NamesarrayUNIDSprint.length+1, jcol).style({border: {
                    left: { style: 'thin'},        
                    right: { style: 'thin'},  
                    top: { style: 'thin'},  
                    bottom: { style: 'thin'} 
                  }
                 });   
                    wb.write(filePath);      
                    if(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS!==null){
                    var multipleQueSpr = JSON.parse(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS);
                    var qcol = 0;
                    for (let q= 1; q< multipleQueSpr.length+1 ;q++) {  
                         qcol = parseInt(q)+parseInt(MLogicCol);  
                         if(multipleQueSpr[q-1].ANSWER !== undefined){    
                         ws.cell(a+1 , qcol).string(multipleQueSpr[q-1].ANSWER)
                         }else{
                          ws.cell(a+1 , qcol).string('Not Available') 
                         }
                         ws.cell(a+1, qcol).style({border: {
                          left: { style: 'thin'},        
                          right: { style: 'thin'},  
                          top: { style: 'thin'},  
                          bottom: { style: 'thin'} 
                         }
                        }); 
                         wb.write(filePath);  
                    }
                  } 
                }     
              conn.end();   
              });       
            

           }else if(HealthTabName[i-1].RESOURCE_TYPE_MEASURED === 'trainee'){
             var MtypeCol = 1;
             var MHealthCol = 2;
             var MLogicCol = 2;

             queryTableValuesTrainee ="SELECT distinct tr.Trainee_SNO, tr.Trainee_Name, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
             "FROM traineeinfo tr "+
             "LEFT OUTER JOIN readiness_question_tracker rq ON rq.PARAMETER_CUSTOM_ID='"+HealthTabName[i-1].PARAMETER_CUSTOM_ID+"' "+
             "AND tr.Trainee_SNO=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
             "WHERE tr.Trainee_IntegrationID='"+IntegrationID+"' ORDER BY Trainee_Name ASC";
            
             conn.query(queryTableValuesTrainee).then((queryTableValuesTraineeRes) => {
               var NamesarrayUNIDTrainee='';
              NamesarrayUNIDTrainee = JSON.parse(JSON.stringify(queryTableValuesTraineeRes)); 
              for (let a= 1; a< NamesarrayUNIDTrainee.length+1 ;a++) {       
                if((NamesarrayUNIDTrainee[a-1].Trainee_Name!==null)){ 
                ws.cell(a+1 , 1).string(NamesarrayUNIDTrainee[a-1].Trainee_Name)
                }
                if(NamesarrayUNIDTrainee[a-1].RAG!==null){
                  ws.cell(a+1 , 2).string(NamesarrayUNIDTrainee[a-1].RAG)
                  if(NamesarrayUNIDTrainee[a-1].RAG === 'R'){
                    ws.cell(a+1 , 2).style(myStyleRed); 
                  }else if(NamesarrayUNIDTrainee[a-1].RAG === 'A'){
                    ws.cell(a+1 , 2).style(myStyleAmber); 
                  }else if(NamesarrayUNIDTrainee[a-1].RAG === 'G'){
                    ws.cell(a+1 , 2).style(myStyleGreen); 
                  }      
                 }
                 ws.cell(1, 1, NamesarrayUNIDTrainee.length+1, jcol).style({border: {
                   left: { style: 'thin'},        
                   right: { style: 'thin'},  
                   top: { style: 'thin'},  
                   bottom: { style: 'thin'} 
                 }
                });  
                wb.write(filePath);  
                if(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS!==null){
                var multipleQueTrainee = JSON.parse(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS);
                var qcol = 0;
                for (let q= 1; q< multipleQueTrainee.length+1 ;q++) {  
                       qcol = parseInt(q)+parseInt(MLogicCol); 
                      if(multipleQueTrainee[q-1].ANSWER!==null){      
                       ws.cell(a+1 , qcol).string(multipleQueTrainee[q-1].ANSWER)
                      }else{
                        ws.cell(a+1 , qcol).string('Not Available')
                       }  
                       ws.cell(a+1, qcol).style({border: {
                        left: { style: 'thin'},        
                        right: { style: 'thin'},  
                        top: { style: 'thin'},  
                        bottom: { style: 'thin'} 
                       }
                      }); 
                       wb.write(filePath);  
                }                   
              } 
              }
             conn.end();   
            });       
           
           }        

          ws.cell(1 , MtypeCol).string(HealthTabName[i-1].RESOURCE_TYPE_MEASURED)    
          ws.cell( 1, MtypeCol).style(myStyle);   
          wb.write(filePath);  
          
          for (let j= 1; j< Readquestions.length+1 ;j++) {    
            var jcol = parseInt(j)+parseInt(MLogicCol)    
            ws.cell(1 , jcol).string(Readquestions[j-1].READINESS_QUESTION)
            ws.cell( 1, jcol).style(myStyle);
            ws.cell( 1, jcol).style({border: {
              left: { style: 'thin'},        
              right: { style: 'thin'},  
              top: { style: 'thin'},  
              bottom: { style: 'thin'} 
             }
            }); 
            ws.column(jcol).setWidth(18); 
            wb.write(filePath);        
           } 

           ws.cell(1 , 27).string('Yes') 
           wb.write(filePath);  
            //  j= Readquestions.length+1
        ws.cell(1 , MHealthCol).string('RAG')
        ws.cell( 1, MHealthCol).style(myStyle);
        ws.cell( 1, MHealthCol).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
        }
        }); 
        wb.write(filePath);
        lengthflag = lengthflag+1;
      }else{  
           
        var ws = wb.addWorksheet(HealthTabName[i-1].PARAMETER_NAME); 
        ws.column(1).setWidth(30); 
        wb.write(filePath); 
    
          ws.cell(1 , 1).string('Question')    
          ws.cell( 1, 1).style(myStyle);   
          wb.write(filePath); 
  
          ws.cell(1 , 2).string(HealthTabName[i-1].RESOURCE_TYPE_MEASURED)    
          ws.cell( 1, 2).style(myStyle);  
          ws.column(2).setWidth(25);  
          wb.write(filePath);
            
            queryParHealthQuestions ="select PARAMETER_CUSTOM_ID, RAG, MULTIPLE_LOGICAL_COLS from readiness_question_tracker WHERE PARAMETER_CUSTOM_ID='"+ HealthTabName[i-1].PARAMETER_CUSTOM_ID +"'";
            conn.query(queryParHealthQuestions).then((queryParHealthQuestionsRes) => {      
              var RAGHealth = '';
              RAGHealth= JSON.parse(JSON.stringify(queryParHealthQuestionsRes)); 
              for (let r= 1; r< RAGHealth.length+1 ;r++) {   
                if(RAGHealth[r-1].RAG!==null){      
                ws.cell(2 , 2).string(RAGHealth[r-1].RAG)
                if(RAGHealth[r-1].RAG === 'R'){
                  ws.cell(2 , 2).style(myStyleRed); 
                }else if(RAGHealth[r-1].RAG === 'A'){
                  ws.cell(2 , 2).style(myStyleAmber); 
                }else if(RAGHealth[r-1].RAG === 'G'){
                  ws.cell(2 , 2).style(myStyleGreen); 
                }
               }else{
                  ws.cell(2 , 2).string('NA')
                }   
                ws.cell(2 , 2).style({border: {
                  left: { style: 'thin'},        
                  right: { style: 'thin'},  
                  top: { style: 'thin'},  
                  bottom: { style: 'thin'} 
                 }
                }); 
                wb.write(filePath);  
      
                var multipleQue = JSON.parse(RAGHealth[r-1].MULTIPLE_LOGICAL_COLS);
                for (let q= 1; q< multipleQue.length+1 ;q++) { 
                if(multipleQue[q-1].ANSWER!==null){      
                 ws.cell(q+2 , 2).string(multipleQue[q-1].ANSWER)
                }else{
                  ws.cell(q+2 , 2).string('NA')
                } 
                 ws.cell(q+2, 2).style({border: {
                  left: { style: 'thin'},        
                  right: { style: 'thin'},  
                  top: { style: 'thin'},  
                  bottom: { style: 'thin'} 
                 }
                }); 
                 wb.write(filePath);  
                }
              }
              conn.end();   
            });       
        
    
           for (let j= 1; j< Readquestions.length+1 ;j++) {       
            ws.cell(j+2 , 1).string(Readquestions[j-1].READINESS_QUESTION)
            // ws.cell(j+2 , 1).style(myStyle);
            ws.cell(j+2 , 1).style({border: {
              left: { style: 'thin'},        
              right: { style: 'thin'},  
              top: { style: 'thin'},  
              bottom: { style: 'thin'} 
             }
            }); 
            ws.column(j+2).setWidth(25); 
            wb.write(filePath);    
           }       
    
           ws.cell(2 , 1).string('Overall RAG')
          //  ws.cell(2 , 1).style(myStyle);
           ws.cell(2 , 1).style({border: {
             left: { style: 'thin'},        
             right: { style: 'thin'},  
             top: { style: 'thin'},  
             bottom: { style: 'thin'} 
            }
           }); 
           wb.write(filePath);
           lengthflag = lengthflag+1;
      }  
      // },5000);  
      conn.end();
     });
    });  
  }
 }, 2000)

  setTimeout(() => {

  var filePath = __dirname+'\\'+filename;    
  // res.setHeader('Content-Type', 'application/octet-stream');
  // res.setHeader('Content-Disposition', 'attachment; filename=' + fileAppimport);
  
  var workbook = new Excel.Workbook();
  // setTimeout(() => {
    workbook.xlsx.readFile(filePath).then(function () {
    for (let i= 1; i< HealthTabName.length+1 ;i++) {  
      var worksheet=workbook.getWorksheet(HealthTabName[i-1].PARAMETER_NAME);
      if(worksheet.getRow(1).getCell(27).value !== 'Yes'){
        FalgViewExcel='Yes'
      }
    }    
    })
    // , 18000});
 }, 24000) 

setTimeout(() => {
// console.log("FalgViewExcel"+FalgViewExcel)
if((FalgViewExcel === 'Yes')){
  enres = false; 
}

if(enres === true){
//   console.log("enres"+enres)
  var filePath = __dirname+'\\'+filename; 
  wb.write(filename);
  res.setHeader('Content-Type', 'application/octet-stream');
  res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
       setTimeout(()=>{
        try {
            // //console.log('remove' +filePath)
         fs.unlinkSync(filePath)
         //file removed
       } catch(err) {
         console.error(err)
       }
       }, 25000)
//        console.log("Yesfile")
      return res.sendFile(filePath);
  }
}, 24000)
}); 

app.get('/getExcelHealthReadinessSingle/:IntegrationID/:parameterCustomId/:parameterName/:resourceTypeMeasured/:UserName',(req,res)=>{

  var IntegrationID = req.params.IntegrationID;
  var parameterCustomId = req.params.parameterCustomId;
  var parameterName = req.params.parameterName;
  var resourceTypeMeasured = req.params.resourceTypeMeasured;
  var UserName = req.params.UserName;

  var wb = new xl.Workbook(); 
  var ws = wb.addWorksheet('Profile');

  const filename = "Export-"+parameterName.replace(/\s/g,'')+"-Tracker"+UserName.replace(/\s/g,'')+".xls";
  //   console.log(filename)
  var filePath = __dirname+'\\'+filename;

var myStyle = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#1D3649',
    fgColor: '#1D3649',
  },
  font: {
    name: 'Arial',
     size: 10 ,
    bold: true,
    color: 'FFFFFF',
  },
  alignment: {
  horizontal: 'center',
  vertical: 'center',
  wrapText: true,
  },
});

var myStyleRed = wb.createStyle({
  fill: {
   type: 'pattern',
   patternType: 'solid',
   bgColor: '#FF0000',
   fgColor: '#FF0000',
  },
  });

  var myStyleGreen = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '#00FF00',
     fgColor: '#00FF00',
    },
    });

    var myStyleAmber = wb.createStyle({
      fill: {
       type: 'pattern',
       patternType: 'solid',
       bgColor: '#FFCC00',
       fgColor: '#FFCC00',
      },
      });
      var myStyleWhite = wb.createStyle({
        fill: {
         type: 'pattern',
         patternType: 'solid',
         bgColor: '#FFFFFF',
         fgColor: '#FFFFFF',
        },
    });

setTimeout(() => {  
   
  // Note: give the formate name as in sql table column name
  const data = [
    {   "ColumnName": "Profile Name",   "Format": "Value" },   
    {   "ColumnName": "Client Name",   "Format": "ClientName"},   
    {   "ColumnName": "Sector",   "Format": "Sector"},    
    {   "ColumnName": "Industry",   "Format": "Industry"},
    {   "ColumnName": "IOT",   "Format": "IOT"},   
    ];
   ws.column(1).setWidth(20);
   ws.column(2).setWidth(40);

  ws.cell( 1, 1, 1, 2,true).string('Health & Readiness Indicator Category List For Tracking ')
  ws.cell( 1, 1).style(myStyle);
  ws.cell( 2, 1, 2, 2,true)
  ws.row(2).setHeight(2);
  ws.cell( 3, 1).style(myStyle);
  ws.cell( 3, 2).style(myStyle);
    for (let i = 0; i < data.length; i += 1) {
       ws.cell(i + 3, 1).string(data[i].ColumnName);
      
            if (data[i].Format !== 'Value') {
        ws.cell(i + 3, 2).string(ProfileDataVal[0][data[i].Format]);
            } else {
        ws.cell(i + 3, 2).string(data[i].Format);
       }    
        }
        ws.cell(8, 1).string("Parameter"); 
          ws.cell(8, 2).string(parameterName); 
    ws.cell(1, 1, 8, 2).style({border: {
                               left: { style: 'thin'},        
                               right: { style: 'thin'},  
                               top: { style: 'thin'},  
                               bottom: { style: 'thin'} 
                             }
    });   
  wb.write(filePath); 
  },4000);

  pool.getConnection().then(conn => {        
    queryProfileKeyword ="select * from transitionprofile WHERE IntegrationID='"+ IntegrationID +"'"; 
     conn.query(queryProfileKeyword).then((ProfileData) => {
      setTimeout(() => {
      ProfileDataVal=JSON.parse(JSON.stringify(ProfileData));                     
      },1000);                       
     conn.end();    
   });       
  });
  setTimeout(() => { 
    pool.getConnection().then(conn => {             
    queryParQuestions ="select READINESS_QUESTION_CUSTOM_ID, READINESS_QUESTION_ADOPTED, READINESS_QUESTION from readiness_question_custom WHERE READINESS_QUESTION_CATEGORY='"+ parameterCustomId +"' and READINESS_QUESTION_ADOPTED IN ('Y','NA')";
    
    conn.query(queryParQuestions).then((queryParQuestionsRes) => {        
    var Readquestions = '';
    var ws = wb.addWorksheet(parameterName); 
    ws.column(1).setWidth(30); 

    if(resourceTypeMeasured === 'application'){
      var NamesarrayUNIDApps=[];
      MtypeCol = 4;
      MHealthCol = 6;
      MLogicCol = 6;
 
     const ColumnsNamesdata = [
       {   "ColumnName": "S.No" },   
       {   "ColumnName": "EPIC" },   
       {   "ColumnName": "Sprint" },    
       {   "ColumnName": "" },
       {   "ColumnName": "Application Status" },
       {   "ColumnName": "Health" },
        
       ];
      ws.column(1).setWidth(8);
      ws.column(2).setWidth(15);
      ws.column(3).setWidth(15);
      ws.column(4).setWidth(24);
      ws.column(5).setWidth(15);
      ws.column(6).setWidth(8);
 
      for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
       ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
       ws.cell(1, i+1).style(myStyle);   
       ws.cell(1, i+1).style({border: {
         left: { style: 'thin'},        
         right: { style: 'thin'},  
         top: { style: 'thin'},  
         bottom: { style: 'thin'} 
        }
       }); 
      } 
      wb.write(filePath); 

            queryTableValuesUNIDApp ="SELECT distinct ai.AppUNID, ai.AppName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS,"+ 
            "sc.Scope_UNID, sc.epicUNID,sc.sprintUNID,ep.epicName, sp.sprintName, st.status "+
            "FROM application_information ai "+
            "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
            "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
            "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
            "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
            "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
            "AND ai.AppUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
            "WHERE ai.IntegrationID='"+IntegrationID+"' ORDER BY AppName ASC";

              conn.query(queryTableValuesUNIDApp).then((queryTableValuesUNIDAppRes) => {
                  NamesarrayUNIDApps = JSON.parse(JSON.stringify(queryTableValuesUNIDAppRes));                 
                  for (let a= 1; a< NamesarrayUNIDApps.length+1 ;a++) {       
                    ws.cell(a+1 , 1).number(a) 
                    if((NamesarrayUNIDApps[a-1].epicName!==null)){ 
                    ws.cell(a+1 , 2).string(NamesarrayUNIDApps[a-1].epicName)
                    }else{
                    ws.cell(a+1 , 2).string('Not Available')
                    }
                    if((NamesarrayUNIDApps[a-1].sprintName!==null)){
                    ws.cell(a+1 , 3).string(NamesarrayUNIDApps[a-1].sprintName)
                    }else{
                      ws.cell(a+1 , 3).string('Not Available')
                    }
                    if((NamesarrayUNIDApps[a-1].AppName!==null)){
                    ws.cell(a+1 , 4).string(NamesarrayUNIDApps[a-1].AppName)
                    }else{
                      ws.cell(a+1 , 4).string('Not Available')
                    }
                    if((NamesarrayUNIDApps[a-1].status!==null)){
                    ws.cell(a+1 , 5).string(NamesarrayUNIDApps[a-1].status)
                    }else{
                      ws.cell(a+1 , 5).string('Not Available')
                    }
                    if(NamesarrayUNIDApps[a-1].RAG!== null){
                      ws.cell(a+1 , 6).string(NamesarrayUNIDApps[a-1].RAG)
                      if(NamesarrayUNIDApps[a-1].RAG === 'R'){
                        ws.cell(a+1 , 6).style(myStyleRed); 
                      }else if(NamesarrayUNIDApps[a-1].RAG === 'A'){
                        ws.cell(a+1 , 6).style(myStyleAmber); 
                      }else if(NamesarrayUNIDApps[a-1].RAG === 'G'){
                        ws.cell(a+1 , 6).style(myStyleGreen); 
                      }  
                    }
                    ws.cell(1, 1, NamesarrayUNIDApps.length+1, jcol).style({border: {
                      left: { style: 'thin'},        
                      right: { style: 'thin'},  
                      top: { style: 'thin'},  
                      bottom: { style: 'thin'} 
                    }
                   });  
                    wb.write(filePath);  
                    var multipleQueAPP ='';
                    if(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS!==null){
                    multipleQueAPP = JSON.parse(NamesarrayUNIDApps[a-1].MULTIPLE_LOGICAL_COLS);
                    var qcol = 0;
                    for (let q= 1; q< multipleQueAPP.length+1 ;q++) {  
                         qcol = parseInt(q)+parseInt(MLogicCol);  
                         if(multipleQueAPP[q-1].ANSWER !== undefined){    
                         ws.cell(a+1 , qcol).string(multipleQueAPP[q-1].ANSWER)
                         }else{
                          ws.cell(a+1 , qcol).string('Not Available') 
                         }
                         ws.cell(a+1, qcol).style({border: {
                          left: { style: 'thin'},        
                          right: { style: 'thin'},  
                          top: { style: 'thin'},  
                          bottom: { style: 'thin'} 
                         }
                        }); 
                         wb.write(filePath);  
                    }
                  } 
                }    
              conn.end();                      
            });  
         
     }else if(resourceTypeMeasured === 'epic'){
 
       MtypeCol = 2;
       MHealthCol = 4;
       MLogicCol = 4;
   
       const ColumnsNamesdata = [
         {   "ColumnName": "S.No" },   
         {   "ColumnName": "" },    
         {   "ColumnName": "Epic Status" },
         {   "ColumnName": "Health" },         
         ];
        ws.column(1).setWidth(8);
        ws.column(2).setWidth(15);
        ws.column(3).setWidth(15);
        ws.column(4).setWidth(8);
   
        for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
         ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
         ws.cell(1, i+1).style(myStyle);   
         ws.cell(1, i+1).style({border: {
           left: { style: 'thin'},        
           right: { style: 'thin'},  
           top: { style: 'thin'},  
           bottom: { style: 'thin'} 
          }
         }); 
        } 
        wb.write(filePath); 

        queryTableValuesEpics ="SELECT distinct ep.epicUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
"FROM epics ep "+
"LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
"AND ep.epicUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
"WHERE ep.IntegrationID='"+IntegrationID+"' ORDER BY epicName ASC";


conn.query(queryTableValuesEpics).then((queryTableValuesEpicsRes) => {
var NamesarrayUNIDEpics = '';          
NamesarrayUNIDEpics = JSON.parse(JSON.stringify(queryTableValuesEpicsRes)); 
for (let a= 1; a< NamesarrayUNIDEpics.length+1 ;a++) {    
 ws.cell(a+1 , 1).number(a) 
 if(NamesarrayUNIDEpics[a-1].epicName!==null){
  ws.cell(a+1 , 2).string(NamesarrayUNIDEpics[a-1].epicName)
 }else{
  ws.cell(a+1 , 2).string('Not Available')
 }
 if(NamesarrayUNIDEpics[a-1].RAG!==null){
   ws.cell(a+1 , MHealthCol).string(NamesarrayUNIDEpics[a-1].RAG)
   if(NamesarrayUNIDEpics[a-1].RAG === 'R'){
     ws.cell(a+1 , MHealthCol).style(myStyleRed); 
   }else if(NamesarrayUNIDEpics[a-1].RAG === 'A'){
     ws.cell(a+1 , MHealthCol).style(myStyleAmber); 
   }else if(NamesarrayUNIDEpics[a-1].RAG === 'G'){
     ws.cell(a+1 , MHealthCol).style(myStyleGreen); 
   }      
 }
 ws.cell(1, 1, NamesarrayUNIDEpics.length+1, jcol).style({border: {
  left: { style: 'thin'},        
  right: { style: 'thin'},  
  top: { style: 'thin'},  
  bottom: { style: 'thin'} 
}
});  
 wb.write(filePath);   
 
 if(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS!==null){
 var multipleQueEpics = JSON.parse(NamesarrayUNIDEpics[a-1].MULTIPLE_LOGICAL_COLS);
 var qcol = 0;
 for (let q= 1; q< multipleQueEpics.length+1 ;q++) {  
        qcol = parseInt(q)+parseInt(MLogicCol); 
       if(multipleQueEpics[q-1].ANSWER!==null){      
        ws.cell(a+1 , qcol).string(multipleQueEpics[q-1].ANSWER)
       }else{
         ws.cell(a+1 , qcol).string('Not Available')
        }  
        ws.cell(a+1, qcol).style({border: {
         left: { style: 'thin'},        
         right: { style: 'thin'},  
         top: { style: 'thin'},  
         bottom: { style: 'thin'} 
        }
       }); 
        wb.write(filePath);  
 }                   
 } 
}
conn.end();   
});       

 
     }else if(resourceTypeMeasured === 'sprint'){
 
       MtypeCol = 3;
       MHealthCol = 5;
       MLogicCol = 5;
   
       const ColumnsNamesdata = [
         {   "ColumnName": "S.No" },   
         {   "ColumnName": "EPIC" },   
         {   "ColumnName": "" },    
         {   "ColumnName": "Sprint Status" },
         {   "ColumnName": "Health" },         
         ];
        ws.column(1).setWidth(8);
        ws.column(2).setWidth(15);
        ws.column(3).setWidth(15);
        ws.column(4).setWidth(15);
        ws.column(5).setWidth(8);
   
        for (let i = 0; i < ColumnsNamesdata.length; i += 1) {
         ws.cell(1, i+1).string(ColumnsNamesdata[i].ColumnName);
         ws.cell(1, i+1).style(myStyle);   
         ws.cell(1, i+1).style({border: {
           left: { style: 'thin'},        
           right: { style: 'thin'},  
           top: { style: 'thin'},  
           bottom: { style: 'thin'} 
          }
         }); 
        } 
        wb.write(filePath); 

        queryTableValuesUNIDSprint ="SELECT sp.sprintName, sp.sprintUNID, ep.epicName, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
        "FROM sprint sp "+
        "LEFT OUTER JOIN epics ep ON sp.epicUNID=ep.epicUNID "+
        "LEFT OUTER JOIN readiness_question_tracker rq ON PARAMETER_CUSTOM_ID='"+parameterCustomId+"'"+
        "AND sp.sprintUNID=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
        "WHERE sp.IntegrationID='"+IntegrationID+"' ORDER BY sprintName ASC";

      
        conn.query(queryTableValuesUNIDSprint).then((queryTableValuesUNIDSprintRes) => {
          var NamesarrayUNIDSprint = '';          
          NamesarrayUNIDSprint = JSON.parse(JSON.stringify(queryTableValuesUNIDSprintRes));                 
          for (let a= 1; a< NamesarrayUNIDSprint.length+1 ;a++) {    
            ws.cell(a+1 , 1).number(a)  
            if((NamesarrayUNIDSprint[a-1].epicName!==null)){ 
            ws.cell(a+1 , 2).string(NamesarrayUNIDSprint[a-1].epicName)
            }else{
            ws.cell(a+1 , 2).string('Not Available')
            }
            if((NamesarrayUNIDSprint[a-1].sprintName!==null)){ 
            ws.cell(a+1 , 3).string(NamesarrayUNIDSprint[a-1].sprintName)
            }else{
            ws.cell(a+1 , 3).string('Not Available')
            }        
            if(NamesarrayUNIDSprint[a-1].RAG!== null){
                ws.cell(a+1 , 5).string(NamesarrayUNIDSprint[a-1].RAG)
                if(NamesarrayUNIDSprint[a-1].RAG === 'R'){
                  ws.cell(a+1 , 5).style(myStyleRed); 
                }else if(NamesarrayUNIDSprint[a-1].RAG === 'A'){
                  ws.cell(a+1 , 5).style(myStyleAmber); 
                }else if(NamesarrayUNIDSprint[a-1].RAG === 'G'){
                  ws.cell(a+1 , 5).style(myStyleGreen); 
                }  
            }
            ws.cell(1, 1, NamesarrayUNIDSprint.length+1, jcol).style({border: {
              left: { style: 'thin'},        
              right: { style: 'thin'},  
              top: { style: 'thin'},  
              bottom: { style: 'thin'} 
            }
           });   
              wb.write(filePath);      
              if(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS!==null){
              var multipleQueSpr = JSON.parse(NamesarrayUNIDSprint[a-1].MULTIPLE_LOGICAL_COLS);
              var qcol = 0;
              for (let q= 1; q< multipleQueSpr.length+1 ;q++) {  
                   qcol = parseInt(q)+parseInt(MLogicCol);  
                   if(multipleQueSpr[q-1].ANSWER !== undefined){    
                   ws.cell(a+1 , qcol).string(multipleQueSpr[q-1].ANSWER)
                   }else{
                    ws.cell(a+1 , qcol).string('Not Available') 
                   }
                   ws.cell(a+1, qcol).style({border: {
                    left: { style: 'thin'},        
                    right: { style: 'thin'},  
                    top: { style: 'thin'},  
                    bottom: { style: 'thin'} 
                   }
                  }); 
                   wb.write(filePath);  
              }
            } 
          }     
        conn.end();   
        });       
      

     }else if(resourceTypeMeasured === 'trainee'){
       var MtypeCol = 1;
       var MHealthCol = 2;
       var MLogicCol = 2;

       queryTableValuesTrainee ="SELECT distinct tr.Trainee_SNO, tr.Trainee_Name, rq.RAG, rq.MULTIPLE_LOGICAL_COLS "+ 
       "FROM traineeinfo tr "+
       "LEFT OUTER JOIN readiness_question_tracker rq ON rq.PARAMETER_CUSTOM_ID='"+parameterCustomId+"' "+
       "AND tr.Trainee_SNO=rq.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE "+
       "WHERE tr.Trainee_IntegrationID='"+IntegrationID+"' ORDER BY Trainee_Name ASC";
      
       conn.query(queryTableValuesTrainee).then((queryTableValuesTraineeRes) => {
         var NamesarrayUNIDTrainee='';
        NamesarrayUNIDTrainee = JSON.parse(JSON.stringify(queryTableValuesTraineeRes)); 
        for (let a= 1; a< NamesarrayUNIDTrainee.length+1 ;a++) {       
          if((NamesarrayUNIDTrainee[a-1].Trainee_Name!==null)){ 
          ws.cell(a+1 , 1).string(NamesarrayUNIDTrainee[a-1].Trainee_Name)
          }
          if(NamesarrayUNIDTrainee[a-1].RAG!==null){
            ws.cell(a+1 , 2).string(NamesarrayUNIDTrainee[a-1].RAG)
            if(NamesarrayUNIDTrainee[a-1].RAG === 'R'){
              ws.cell(a+1 , 2).style(myStyleRed); 
            }else if(NamesarrayUNIDTrainee[a-1].RAG === 'A'){
              ws.cell(a+1 , 2).style(myStyleAmber); 
            }else if(NamesarrayUNIDTrainee[a-1].RAG === 'G'){
              ws.cell(a+1 , 2).style(myStyleGreen); 
            }      
           }
           ws.cell(1, 1, NamesarrayUNIDTrainee.length+1, jcol).style({border: {
             left: { style: 'thin'},        
             right: { style: 'thin'},  
             top: { style: 'thin'},  
             bottom: { style: 'thin'} 
           }
          });  
          wb.write(filePath);  
          if(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS!==null){
          var multipleQueTrainee = JSON.parse(NamesarrayUNIDTrainee[a-1].MULTIPLE_LOGICAL_COLS);
          var qcol = 0;
          for (let q= 1; q< multipleQueTrainee.length+1 ;q++) {  
                 qcol = parseInt(q)+parseInt(MLogicCol); 
                if(multipleQueTrainee[q-1].ANSWER!==null){      
                 ws.cell(a+1 , qcol).string(multipleQueTrainee[q-1].ANSWER)
                }else{
                  ws.cell(a+1 , qcol).string('Not Available')
                 }  
                 ws.cell(a+1, qcol).style({border: {
                  left: { style: 'thin'},        
                  right: { style: 'thin'},  
                  top: { style: 'thin'},  
                  bottom: { style: 'thin'} 
                 }
                }); 
                 wb.write(filePath);  
          }                   
        } 
        }
       conn.end();   
      });       
     
     }  

    Readquestions= JSON.parse(JSON.stringify(queryParQuestionsRes));  
    ws.cell(1 , MtypeCol).string(resourceTypeMeasured)    
    ws.cell( 1, MtypeCol).style(myStyle);   
    wb.write(filePath);
  

     for (let j= 1; j< Readquestions.length+1 ;j++) {    
      var jcol = parseInt(j)+parseInt(MLogicCol)    
      ws.cell(1 , jcol).string(Readquestions[j-1].READINESS_QUESTION)
      ws.cell( 1, jcol).style(myStyle);
      ws.cell( 1, jcol).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
       }
      }); 
      ws.column(jcol).setWidth(18); 
      wb.write(filePath);  
     }   

    //  j= Readquestions.length+1
      ws.cell(1 , MHealthCol).string('RAG')
      ws.cell( 1, MHealthCol).style(myStyle);
      ws.cell( 1, MHealthCol).style({border: {
        left: { style: 'thin'},        
        right: { style: 'thin'},  
        top: { style: 'thin'},  
        bottom: { style: 'thin'} 
       }
      }); 
      wb.write(filePath);
    conn.end();   
   });       
  });  
},6000); 
  
  setTimeout(() => {  
    res.setHeader('Content-Type', 'application/octet-stream');
    res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
       setTimeout(()=>{
        try {
            // //console.log('remove' +filePath)
         fs.unlinkSync(filePath)
         //file removed
       } catch(err) {
         console.error(err)
       }
        }, 16000)
    return res.sendFile(filePath);
    },14000);
});

app.get('/getExcelHealthReadinessSingleOverall/:IntegrationID/:parameterCustomId/:parameterName/:resourceTypeMeasured/:UserName',(req,res)=>{
  var IntegrationIDOverall = req.params.IntegrationID;
  var parameterCustomIdOverall = req.params.parameterCustomId;
  var parameterNameOverall = req.params.parameterName;
  var resourceTypeMeasuredOverall = req.params.resourceTypeMeasured;
   var UserNameOverall = req.params.UserName;

  var wb = new xl.Workbook(); 
  var ws = wb.addWorksheet('Profile');

  const filename = "Export-"+parameterNameOverall.replace(/\s/g,'')+"-Tracker"+UserNameOverall.replace(/\s/g,'')+".xls";
  //   console.log(filename)
  var filePath = __dirname+'\\'+filename;

var myStyle = wb.createStyle({
  fill: {
    type: 'pattern',
    patternType: 'solid',
    bgColor: '#1D3649',
    fgColor: '#1D3649',
  },
  font: {
    name: 'Arial',
     size: 10 ,
    bold: true,
    color: 'FFFFFF',
  },
  alignment: {
  horizontal: 'center',
  vertical: 'center',
  wrapText: true,
  },
});

var myStyleRed = wb.createStyle({
  fill: {
   type: 'pattern',
   patternType: 'solid',
   bgColor: '#FF0000',
   fgColor: '#FF0000',
  },
  });

  var myStyleGreen = wb.createStyle({
    fill: {
     type: 'pattern',
     patternType: 'solid',
     bgColor: '#00FF00',
     fgColor: '#00FF00',
    },
    });

    var myStyleAmber = wb.createStyle({
      fill: {
       type: 'pattern',
       patternType: 'solid',
       bgColor: '#FFCC00',
       fgColor: '#FFCC00',
      },
      });

setTimeout(() => {  
   
  // Note: give the formate name as in sql table column name
  const data = [
    {   "ColumnName": "Profile Name",   "Format": "Value" },   
    {   "ColumnName": "Client Name",   "Format": "ClientName"},   
    {   "ColumnName": "Sector",   "Format": "Sector"},    
    {   "ColumnName": "Industry",   "Format": "Industry"},
    {   "ColumnName": "IOT",   "Format": "IOT"},   
    ];
   ws.column(1).setWidth(20);
   ws.column(2).setWidth(40);

  ws.cell( 1, 1, 1, 2,true).string('Health & Readiness Indicator Category List For Tracking ')
  ws.cell( 1, 1).style(myStyle);
  ws.cell( 2, 1, 2, 2,true)
  ws.row(2).setHeight(2);
  ws.cell( 3, 1).style(myStyle);
  ws.cell( 3, 2).style(myStyle);
    for (let i = 0; i < data.length; i += 1) {
       ws.cell(i + 3, 1).string(data[i].ColumnName);
      
            if (data[i].Format !== 'Value') {
        ws.cell(i + 3, 2).string(ProfileDataVal[0][data[i].Format]);
            } else {
        ws.cell(i + 3, 2).string(data[i].Format);
       }    
        }
        ws.cell(8, 1).string("Parameter"); 
          ws.cell(8, 2).string(parameterNameOverall); 
    ws.cell(1, 1, 8, 2).style({border: {
                               left: { style: 'thin'},        
                               right: { style: 'thin'},  
                               top: { style: 'thin'},  
                               bottom: { style: 'thin'} 
                             }
    });   
  wb.write(filePath); 
  },4000);

  pool.getConnection().then(conn => {        
    queryProfileKeywordOverall ="select * from transitionprofile WHERE IntegrationID='"+ IntegrationIDOverall +"'"; 
     conn.query(queryProfileKeywordOverall).then((queryProfileKeywordOverallRes) => {
      setTimeout(() => {
      ProfileDataVal=JSON.parse(JSON.stringify(queryProfileKeywordOverallRes));                     
      },1000);                       
     conn.end();    
   });       
  });

  setTimeout(() => { 
    pool.getConnection().then(conn => {             
      queryParQuestionsOverall ="select READINESS_QUESTION_CUSTOM_ID, READINESS_QUESTION_ADOPTED, READINESS_QUESTION from readiness_question_custom WHERE READINESS_QUESTION_CATEGORY='"+ parameterCustomIdOverall +"' and READINESS_QUESTION_ADOPTED IN ('Y','NA')";
      conn.query(queryParQuestionsOverall).then((queryParQuestionsOverallRes) => {    
      var Readquestions = '';      
      var ws = wb.addWorksheet(parameterNameOverall); 
      ws.column(1).setWidth(40); 
      ws.cell(1 , 1).string('Question')    
      ws.cell( 1, 1).style(myStyle);   
      wb.write(filePath);
      

      Readquestions= JSON.parse(JSON.stringify(queryParQuestionsOverallRes));  
      ws.cell(1 , 2).string(resourceTypeMeasuredOverall)    
      ws.cell( 1, 2).style(myStyle);  
      ws.column(2).setWidth(25);  
      wb.write(filePath);


      pool.getConnection().then(conn => {             
        queryParHealthQuestions ="select PARAMETER_CUSTOM_ID, RAG, MULTIPLE_LOGICAL_COLS from readiness_question_tracker WHERE PARAMETER_CUSTOM_ID='"+ parameterCustomIdOverall +"'";
        conn.query(queryParHealthQuestions).then((queryParHealthQuestionsRes) => {      
          var RAGHealth = '';
          RAGHealth= JSON.parse(JSON.stringify(queryParHealthQuestionsRes)); 
          for (let r= 1; r< RAGHealth.length+1 ;r++) {         
            ws.cell(2 , 2).string(RAGHealth[r-1].RAG)
            if(RAGHealth[r-1].RAG === 'R'){
              ws.cell(2 , 2).style(myStyleRed); 
            }else if(RAGHealth[r-1].RAG === 'A'){
              ws.cell(2 , 2).style(myStyleAmber); 
            }else if(RAGHealth[r-1].RAG === 'G'){
              ws.cell(2 , 2).style(myStyleGreen); 
            }   
            ws.cell(2 , 2).style({border: {
              left: { style: 'thin'},        
              right: { style: 'thin'},  
              top: { style: 'thin'},  
              bottom: { style: 'thin'} 
             }
            }); 
            wb.write(filePath);  
  
            var multipleQue = JSON.parse(RAGHealth[r-1].MULTIPLE_LOGICAL_COLS);
            for (let q= 1; q< multipleQue.length+1 ;q++) {       
             ws.cell(q+2 , 2).string(multipleQue[q-1].ANSWER)
             ws.cell(q+2, 2).style({border: {
              left: { style: 'thin'},        
              right: { style: 'thin'},  
              top: { style: 'thin'},  
              bottom: { style: 'thin'} 
             }
            }); 
             wb.write(filePath);  
            }
          }
          conn.end();   
        });       
       });

       for (let j= 1; j< Readquestions.length+1 ;j++) {       
        ws.cell(j+2 , 1).string(Readquestions[j-1].READINESS_QUESTION)
        // ws.cell(j+2 , 1).style(myStyle);
        ws.cell(j+2 , 1).style({border: {
          left: { style: 'thin'},        
          right: { style: 'thin'},  
          top: { style: 'thin'},  
          bottom: { style: 'thin'} 
         }
        }); 
        ws.column(j+2).setWidth(25); 
        wb.write(filePath);    
       }       

       ws.cell(2 , 1).string('Overall RAG')
      //  ws.cell(2 , 1).style(myStyle);
       ws.cell(2 , 1).style({border: {
         left: { style: 'thin'},        
         right: { style: 'thin'},  
         top: { style: 'thin'},  
         bottom: { style: 'thin'} 
        }
       }); 
       wb.write(filePath);
 
      conn.end();   
    });       
   });  

  },6000);

  setTimeout(() => {  
    res.setHeader('Content-Type', 'application/octet-stream');
    res.setHeader('Content-Disposition', 'attachment; filename=' + filename);
       setTimeout(()=>{
        try {
            // //console.log('remove' +filePath)
         fs.unlinkSync(filePath)
         //file removed
       } catch(err) {
         console.error(err)
       }
        }, 16000)
    return res.sendFile(filePath);
    },14000);
}); 
//*************************Parameter Health Excel Report *********************/

//*************************Delete check validate Global code for Trainee & APP Info*********************/
function deleteCheck(Table ,Result ,Trainee_SNO, MeasuredAganist) {
  //trainee
  queryreadinessget = "select distinct "
  for( let i=0; i<  Table.length; i++){
    if(i===0){
      queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" rqt LEFT OUTER JOIN parameter_custom pc ON rqt.PARAMETER_CUSTOM_ID=pc.PARAMETER_CUSTOM_ID where "+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%' and pc.RESOURCE_TYPE_MEASURED='"+MeasuredAganist+"')'count"+ i+"'" 
    }else if(i===1){
      if(MeasuredAganist==='application'){
        queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" apps LEFT OUTER JOIN application_information ai ON apps.AppName=ai.AppName and apps.IntegrationID = ai.IntegrationID where ai."+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%')'count"+ i+"'" 
      }else{
      queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%')'count"+ i+"'" 
      }
    }else{
      queryreadinessget = queryreadinessget + "(select count(*) from "+  Table[i].TableName+" where "+ Table[i].CoulmnName+" LIKE '%" + Trainee_SNO+"%')'count"+ i+"'" 
    }
   if (i !==Table.length-1) {
    queryreadinessget= queryreadinessget + ","
  }   
 }
  pool.getConnection().then(conn => {
    conn.query(queryreadinessget).then((TraineeDelRes) => {
        for( let i=0; i< Table.length; i++){
          if (TraineeDelRes[0]['count'+i] !== 0) {
            Result.push(Table[i].UITable)
          }
        }
        conn.end();
    }).catch(err=>{
      //handle error
      //res.send({"Fetch" : "Fail" })
      conn.end();
    })
  }).catch(err => {
    //not connected
  });  
}
//*************************Delete check validate Global code for Trainee & APP Info*********************/

// ************************* Transition profile - start and end date *************************/
app.get('/profileStartandEndDate/:IntegrationID',(req,res)=>{
  var IntegrationID = req.params.IntegrationID;
  startandEndDateQuery = "select TransStartDt,TransEndDt from transitionprofile where IntegrationID='"+IntegrationID+"'";
  pool.getConnection().then(conn=>{
    conn.query(startandEndDateQuery).then((startandEndDateQueryResult)=>{
          res.send(startandEndDateQueryResult);
          conn.end();
    }).catch(err=>{
      //handle error
      res.send({"Fetch" : "Fail" })
      conn.end();
    })
  }).catch(err=>{
      //not connected
      console.log("not connected")    
  })
})

// ************************* Transition profile - start and end date *************************/
// *************************  single Epic details ************************* 

app.get('/getSingleEpicsName/:Id/:epicUNID',(req,res)=>{
  var id = req.params.Id;
  var epicUNID = req.params.epicUNID
  // queryEpics = "select epicUNID,epicName,startDate,endDate from epics where IntegrationID ='"+id +"'" ; 
  queryEpics = "select epicUNID,epicName,startDate,endDate,replanStartDate,replanEndDate,actualStartDate,actualEndDate from epics where IntegrationID ='"+id +"' and epicUNID='"+epicUNID+"'" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryEpics).then((epicResult) => {
            
            res.send(epicResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})
// *************************  single Epic details ************************* 
//*************************** Detailed Design Added ************************
app.get('/getEpicbyId/:Id',(req,res)=>{
  
  var id = req.params.Id; 
  
  querySprint = "select * from epics where epicUNID ="+id ; 
  //console.log("epic by Id="+querySprint);
  pool.getConnection().then(conn => {        
        conn.query(querySprint).then((sprintResult) => {
            
            res.send(sprintResult)
            //console.log(sprintResult.length);
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})


app.get('/getSprintbyepic/:Id',(req,res)=>{
  
  var id = req.params.Id; 
  
 //querySprint = "select * from sprint where epicUNID ="+id ; 
 querySprint = "SELECT CONCAT(IF(scopelevel='Others', concat('T',scopelevel),scopelevel)), "+
 "concat(scopelevel,'-',sprintName) as sprintName,startDate,endDate,replanStartDate,replanEndDate,"+
 "actualStartDate,actualEndDate,sprintUNID,epicUNID,scopelevel from sprint where epicUNID ="+id +" order by 1;"; 
 
  //console.log("sprint by epic id="+querySprint);
  pool.getConnection().then(conn => {        
        conn.query(querySprint).then((sprintResult) => {
            
            res.send(sprintResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
});

app.get('/getAppbysprint/:Id/:Scope_Level',(req,res)=>{  
  var id = req.params.Id;   
  var Scope_Level = req.params.Scope_Level;  

  if(Scope_Level==='AT'){
    querySprint = "select * from sprintscope ss,appln_level_sprint_plan al,application_information ai where al.sprintUNID = "+id+" and al.sprintUNID = ss.sprintUNID and al.Scope_UNID = ss.Scope_UNID and ss.AppUNID=ai.AppUNID" ;
  }else if(Scope_Level==='ST'){
    querySprint = "select * from sprintscope ss,appln_level_sprint_plan al,masterstinfo stc where al.sprintUNID = "+id+" and al.sprintUNID = ss.sprintUNID and al.Scope_UNID = ss.Scope_UNID and ss.STUNID=stc.MasterSTInfoid" ;
  }else if(Scope_Level==='Others'){  
    querySprint = "select * from sprintscope ss,appln_level_sprint_plan al where al.sprintUNID = "+id+" and al.sprintUNID = ss.sprintUNID and al.Scope_UNID = ss.Scope_UNID" ;
  }  
  
  //console.log("from getAppbysprint="+querySprint);
  pool.getConnection().then(conn => {        
        conn.query(querySprint).then((sprintResult) => {            
            res.send(sprintResult)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })          
      }).catch(err   => {
        //not connected
      });
});
//*********************************** End ***************************************************************
// *********************************** Transition Risk Analyzer Admin ***********************************
  app.get('/getTRA_AdminList',(req,res)=>{
  QuerygetTRA_AdminList = "Select TRA_UNID,Risk_ID,Risk_Category,Risk_Attribute,Planned_Mitigation_Action,"+
  "CREATED_AT,LAST_UPDATED_AT,CREATED_BY,LAST_UPDATED_BY  from transition_risk_analyzer_admin order by Risk_Category";
  pool.getConnection().then(conn =>{
    conn.query(QuerygetTRA_AdminList).then((QuerygetTRA_AdminListResult)=>{
        res.send(QuerygetTRA_AdminListResult);
        conn.end();
    }).catch(err=>{
      res.send({"result":Fail})
      conn.end();
    })
  }).catch(err=>{
    //not connected
  })
  })
  app.get('/getTRA_RiskValues',(req,res)=>{
  QuerygetTRA_RiskValues = "Select * from adminprofile where FieldCategoryName='RiskValues' ORDER BY Categoryvalues ASC";
  pool.getConnection().then(conn =>{
    conn.query(QuerygetTRA_RiskValues).then((QuerygetTRA_RiskValuesResult)=>{
        res.send(QuerygetTRA_RiskValuesResult);
        conn.end();
    }).catch(err=>{
      res.send({"result":Fail})
      conn.end();
    })
  }).catch(err=>{
    //not connected
  })
  })
  app.get('/getTRA_RiskTypes',(req,res)=>{
    QuerygetTRA_RiskType = "Select *  from adminprofile where FieldCategoryName='RiskType' ORDER BY Categoryvalues ASC";
  pool.getConnection().then(conn =>{
    conn.query(QuerygetTRA_RiskType).then((QuerygetTRA_RiskTypeResult)=>{
        res.send(QuerygetTRA_RiskTypeResult);
        conn.end();
    }).catch(err=>{
      res.send({"result":Fail})
      conn.end();
    })
  }).catch(err=>{
    //not connected
  })
  })
  app.get('/getRisk_Category',(req,res)=>{
    // QuerygetTRA_AdminList = "Select TRA_UNID,Risk_ID,Risk_Category,Risk_Attribute,Planned_Mitigation_Action,"+
    // "CREATED_AT,LAST_UPDATED_AT,CREATED_BY,LAST_UPDATED_BY  from transition_risk_analyzer_admin";
    getRisk_CategoryList = "Select distinct(Risk_Category) from transition_risk_analyzer_admin";
    pool.getConnection().then(conn =>{
      conn.query(getRisk_CategoryList).then((getRisk_CategoryListResult)=>{
          res.send(getRisk_CategoryListResult);
          conn.end();
      }).catch(err=>{
        res.send({"result":Fail})
        conn.end();
      })
    }).catch(err=>{
      //not connected
    })
    })    
  app.post('/getTRA_AdminListAdd',(req,res)=>{
      var TRA_UNID = null;    
      var Risk_ID =req.body.Risk_ID;
      var Risk_Category = req.body.Risk_Category;
      var Risk_Attribute = req.body.Risk_Attribute;    
      var Planned_Mitigation_Action = req.body.Planned_Mitigation_Action;    
      var CREATED_BY  = req.body.CREATED_BY;
      var  LAST_UPDATED_BY = req.body.LAST_UPDATED_BY;
      var dt=moment(new Date());
      var CREATED_AT=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      
  
    querygetTRA_AdminListAdd ="insert into transition_risk_analyzer_admin values ("+TRA_UNID +",'"
    + Risk_ID + "','"
    + Risk_Category +"','"
    +Risk_Attribute+"','"
    +Planned_Mitigation_Action+"','"
    + CREATED_AT + "','"
    + LAST_UPDATED_AT +"','"
    +CREATED_BY+"','"  
    + LAST_UPDATED_BY + "')";
  console.log(querygetTRA_AdminListAdd);
    pool.getConnection().then((conn) =>{
        conn.query(querygetTRA_AdminListAdd).then((querygetTRA_AdminListAddResult)=>{
          res.send({"save" : "success"} )
          conn.end();
        }).catch(err=>{
          console.log(err
            )
          res.send({"save" : "Fail"} )
          conn.end();
        })
    }).catch(err=>{
      //not Connected
    })
  })  
  app.put('/getTRA_AdminListUpdate',(req,res)=>{
    var TRA_UNID = req.body.TRA_UNID;    
    var Risk_ID =req.body.Risk_ID;
    var Risk_Category = req.body.Risk_Category;
    var Risk_Attribute = req.body.Risk_Attribute;    
    var Planned_Mitigation_Action = req.body.Planned_Mitigation_Action;      
    var  LAST_UPDATED_BY = req.body.LAST_UPDATED_BY;
    var dt=moment(new Date());  
    var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");  
  
  querygetTRA_AdminListUpdate ="Update transition_risk_analyzer_admin SET Risk_ID='"+Risk_ID
  +"',Risk_Category='"+Risk_Category
  +"',Risk_Attribute='"+Risk_Attribute
  +"',Planned_Mitigation_Action='"+Planned_Mitigation_Action
  +"',LAST_UPDATED_BY='"+LAST_UPDATED_BY
  +"',LAST_UPDATED_AT='"+LAST_UPDATED_AT
  +"' where TRA_UNID='"+TRA_UNID+"'";
  console.log(querygetTRA_AdminListUpdate);
  
  pool.getConnection().then((conn) =>{
    conn.query(querygetTRA_AdminListUpdate).then((querygetTRA_AdminListUpdateResult)=>{
      res.send({"insert" : "success"} )
      conn.end();
    }).catch(err=>{
      console.log(err
        )
      res.send({"insert" : "Fail"} )
      conn.end();
    })
  }).catch(err=>{
  //not Connected
  })
  
  })  
  app.delete('/getTRA_AdminListDelete/:TRA_UNID',(req,res)=>{
    console.log("delete")
    var TRA_UNID = req.params.TRA_UNID;      
  querygetTRA_AdminListDelete ="Delete from transition_risk_analyzer_admin where TRA_UNID='"+TRA_UNID+"'";
  console.log(querygetTRA_AdminListDelete);
  pool.getConnection().then(conn => {        
    conn.query(querygetTRA_AdminListDelete).then((querygetTRA_AdminListDeleteResult) => {
        res.send({"Delete" : "success"} )
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"Delete" : "Fail" })
        conn.end();
      })    
  }).catch(err => {
    //not connected
  });
  })
  
  // *********************************** Transition Risk Analyzer Admin ***********************************
  

// *********************************** Transition Risk Analyzer Account ***********************************
app.get('/getTRA_AccountList/:Integration_ID',(req,res)=>{
  var Integration_ID= req.params.Integration_ID;
  QuerygetTRA_AdminList = "Select TRA_UNID,Risk_ID,Risk_Category,Risk_Attribute,Planned_Mitigation_Action,"+
  "CREATED_AT,LAST_UPDATED_AT,CREATED_BY,LAST_UPDATED_BY,0 as acFlag   from transition_risk_analyzer_admin order by Risk_Category";
  
  QuerygetTRA_EngagementList = "select TRA_Eng_UNID as TRA_UNID,Risk_ID,Risk_Category,Risk_Attribute,Planned_Mitigation_Action,"+
  "Integration_ID,Acc_specific_risk,Risk_Impact,Risk_Probability,Risk_Type,"+
  "CREATED_AT,LAST_UPDATED_AT,CREATED_BY,LAST_UPDATED_BY,2 as acFlag  from transition_risk_analyzer_eng_account "+
  " where Integration_ID='"+Integration_ID+"' order by Risk_Category"

  QuerygetTRA_EX_List = "select TRA_EX_UNID,Integration_ID,Risk_ID,Risk_Category ,Risk_Attribute,"+
  "Planned_Mitigation_Action,Acc_specific_risk,Risk_Impact,Risk_Probability,Risk_Type,TRA_UNID , "+
  "CREATED_AT,LAST_UPDATED_AT,CREATED_BY,LAST_UPDATED_BY,1 as  acFlag ,RiskLog_Flag"+
  " from "+
  "transition_risk_analyzer_ex_account where Integration_ID='"+Integration_ID+"' order by Risk_Category,Risk_ID "
  

  pool.getConnection().then(conn =>{
    conn.query(QuerygetTRA_EX_List).then((QuerygetTRA_EX_List_Result)=>{
      console.log(QuerygetTRA_EX_List)
      console.log(QuerygetTRA_EX_List_Result.length)
      if(QuerygetTRA_EX_List_Result.length != 0 ){
        console.log("1")
          res.send(QuerygetTRA_EX_List_Result);
          conn.end();
      }else{
        conn.query(QuerygetTRA_EngagementList).then((QuerygetTRA_EngagementList_Result)=>{
            if(QuerygetTRA_EngagementList_Result !=  0 ){
              console.log("2")
              res.send(QuerygetTRA_EngagementList_Result);
              conn.end();
            }else{
              conn.query(QuerygetTRA_AdminList).then((QuerygetTRA_AdminList_result)=>{
                console.log("3")
                  res.send(QuerygetTRA_AdminList_result);
                  conn.end();
              }).catch(err=>{
                console.log("1")
                console.log(err)
                res.send({"result":Fail});
                res.end();
              })
            }
        }).catch(err=>{
          console.log("2")
          console.log(err)
          res.send({"result":Fail})
          conn.end();
        })
      }
    }).catch(err=>{
      console.log("3")
      console.log(err)
      res.send({"result":Fail})
      conn.end();
    })
  }).catch(err=>{
    //not connected
  })
  })
  app.post('/getTRA_AccountListAdd',(req,res)=>{
    var TRA_EX_UNID = null;    
    var Integration_ID = req.body.Integration_ID;
    var Risk_ID =req.body.Risk_ID;    
    var Risk_Category = req.body.Risk_Category;
    var Risk_Attribute = req.body.Risk_Attribute.replace(/'/g, "\\'");    
    var Planned_Mitigation_Action = req.body.Planned_Mitigation_Action.replace(/'/g, "\\'");  
    var Acc_specific_risk =  req.body.Risk_Attribute.replace(/'/g, "\\'");
    var Risk_Impact =0;
    var Risk_Probability =0;
    var Risk_Type ="";
    var TRA_UNID = 0;
    var RiskLog_Flag = 0;
    var CREATED_BY  = req.body.CREATED_BY;
    var  LAST_UPDATED_BY = req.body.LAST_UPDATED_BY;
    var dt=moment(new Date());
    var CREATED_AT=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
    var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
    

  querygetTRA_AccountListAdd ="insert into transition_risk_analyzer_ex_account values ("+TRA_EX_UNID +",'"
  + Integration_ID + "','"
  + Risk_ID + "','"
  + Risk_Category +"','"
  +Risk_Attribute+"','"
  +Planned_Mitigation_Action+"','"
  +Acc_specific_risk+"','"
  +Risk_Impact+"','"
  +Risk_Probability+"','"
  +Risk_Type+"','"
  +TRA_UNID+"','"
  +RiskLog_Flag+"','"      
  + CREATED_AT + "','"
  + LAST_UPDATED_AT +"','"
  +CREATED_BY+"','"  
  + LAST_UPDATED_BY + "')";
console.log(querygetTRA_AccountListAdd);
  pool.getConnection().then((conn) =>{
      conn.query(querygetTRA_AccountListAdd).then((querygetTRA_AccountListAddResult)=>{
        res.send({"save" : "success"} )
        conn.end();
      }).catch(err=>{
        console.log(err
          )
        res.send({"save" : "Fail"} )
        conn.end();
      })
  }).catch(err=>{
    //not Connected
  })
   })
  app.get('/getRisk_Account_Category/:Integration_ID',(req,res)=>{
  var Integration_ID = req.params.Integration_ID;
  getRisk_CategoryList = "Select distinct(Risk_Category) from transition_risk_analyzer_ex_account where Integration_ID='"+Integration_ID+"'";
  pool.getConnection().then(conn =>{
    conn.query(getRisk_CategoryList).then((getRisk_CategoryListResult)=>{
        res.send(getRisk_CategoryListResult);
        conn.end();
    }).catch(err=>{
      res.send({"result":Fail})
      conn.end();
    })
  }).catch(err=>{
    //not connected
  })
  })
  app.post('/postAccount_Data',(req,res)=>{
var endres = true;
pool.getConnection().then((conn) =>{

  for(var i in req.body ){
    var flag = req.body[i].flag;
    if(flag !== 1){
      console.log(req.body[i])
      var TRA_EX_UNID = null;
      var Integration_ID = req.body[i].Integration_ID;   
      var Risk_ID = req.body[i].Risk_ID;
      var Risk_Category = req.body[i].Risk_Category;
      var Risk_Attribute = req.body[i].Risk_Attribute.replace(/'/g, "\\'");
      var Planned_Mitigation_Action = req.body[i].Planned_Mitigation_Action.replace(/'/g, "\\'");
      var Account_Specific_Risk_Attribute =req.body[i].Acc_specific_risk.replace(/'/g, "\\'");      
      if(req.body[i].Risk_Impact  === 'undefined' ){
        var Risk_Impact = "";  
        console.log("Risk_Impact")      
      }else{
        var Risk_Impact = req.body[i].Risk_Impact;
        console.log("bad")
      }
      if(req.body[i].Risk_Probability  === "undefined" ){
        var Risk_Probability = "";       
      }else{
        var Risk_Probability = req.body[i].Risk_Probability;
      }
      if(req.body[i].Risk_Type === "undefined" ){
        var Risk_Type = "";        
      }else{
        var Risk_Type = req.body[i].Risk_Type;
      }      
      var TRA_UNID = req.body[i].TRA_UNID;  
      var CREATED_BY  = req.body[i].CREATED_BY;
      var  LAST_UPDATED_BY = req.body[i].LAST_UPDATED_BY;
      var RiskLog_Flag = 0;
      var dt=moment(new Date());
      var CREATED_AT=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");   
      
      QuerygetTRA_AccountListAdd ="insert into transition_risk_analyzer_ex_account values ("+TRA_EX_UNID +",'"
      + Integration_ID + "','"
      + Risk_ID + "','"
      + Risk_Category + "','"
      + Risk_Attribute + "','"
      + Planned_Mitigation_Action + "','"
      + Account_Specific_Risk_Attribute +"','"
      +Risk_Impact+"','"
      +Risk_Probability+"','"
      +Risk_Type+"','"
      +TRA_UNID+"','"
      +RiskLog_Flag+"','"      
      + CREATED_AT + "','"
      + LAST_UPDATED_AT +"','"
      +CREATED_BY+"','"  
      + LAST_UPDATED_BY + "')";
      console.log(QuerygetTRA_AccountListAdd);
      conn.query(QuerygetTRA_AccountListAdd).then((QuerygetTRA_AccountListAddResult)=>{
        // res.send({"save" : "success"} )
        conn.end();
      }).catch(err=>{
        console.log(err)
        // res.send({"save" : "Fail"} )
        endres = false;
        conn.end();
      })
    
      } // for close
  
    } // flag close
    
    
}).catch(err=>{
  //not Connected
})

if (endres === true) {
  res.send({"0":{"save": "success"}});
} else {
  res.send({"0":{"save": "fail"}});
}

  })
  app.put('/putAccount_Data',(req,res)=>{
  var endres = true;
pool.getConnection().then((conn) =>{
  for(var i in req.body ){
        var TRA_EX_UNID = req.body[i].TRA_EX_UNID;
        var Acc_specific_risk = req.body[i].Acc_specific_risk;    
        var Risk_Impact =req.body[i].Risk_Impact;
        var Risk_Probability = req.body[i].Risk_Probability;
        var Risk_Type = req.body[i].Risk_Type;         
        var  LAST_UPDATED_BY = req.body[i].LAST_UPDATED_BY;
        var dt=moment(new Date());  
        var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");  
      
      queryputAccount_Data ="Update transition_risk_analyzer_ex_account SET Acc_specific_risk='"+Acc_specific_risk
      +"',Risk_Impact='"+Risk_Impact
      +"',Risk_Probability='"+Risk_Probability
      +"',Risk_Type='"+Risk_Type
      +"',LAST_UPDATED_BY='"+LAST_UPDATED_BY
      +"',LAST_UPDATED_AT='"+LAST_UPDATED_AT
      +"' where TRA_EX_UNID='"+TRA_EX_UNID+"'";
      console.log(queryputAccount_Data);
      conn.query(queryputAccount_Data).then((queryputAccount_DataResult)=>{
        // res.send({"insert" : "success"} )
        conn.end();
      }).catch(err=>{
        var endres = false;
        console.log(err )
        // res.send({"insert" : "Fail"} )
        conn.end();
      })
  }
  }).catch(err=>{
  //not Connected
  })

    if (endres === true) {
      res.send({"0":{"save": "success"}});
    } else {
      res.send({"0":{"save": "fail"}});
    }

  })
  app.post('/Finalize_and_Submit_Analysis',(req,res)=>{
  var endres = true;
  var flagRes = true;
  var flg = 0;
  pool.getConnection().then((conn) =>{  
    for(var i in req.body ){
      var flag = req.body[i].flag;
      var R_Impact = req.body[i].Risk_Impact;
      var R_prob = req.body[i].Risk_Probability;  
      var RiskLog_Flag = req.body[i].RiskLog_Flag;    
      // console.log(RiskLog_Flag)      
      if(flag !== 1  && (R_Impact !== "" && R_Impact !== 'NA') && (R_prob !== "" && R_prob !== 'NA') && (RiskLog_Flag !== 1)  ){       
              // console.log(req.body[i])
              flg = 1;
      var IntegrationID=req.body[i].Integration_ID                                 
      var RaidID= null
      var Description=req.body[i].Risk_Attribute
      var Status='Open'
      if(req.body[i].CREATED_BY  === 'undefined' && req.body[i].CREATED_BY  === "" ){
        var whoCreated = ""
      }else{
        var whoCreated = req.body[i].CREATED_BY
      }
      
      var Owner=whoCreated
      var TargetDate ='0000-00-00';  
      var Priority= '' 
      var AppID=''; 
      var Epic='';
      var Sprint='';
      var Type= 'Risk'
      var AssociatedApplication=''
      
      if(R_Impact  === 'undefined' || R_Impact === 'NA' || R_Impact === ""){
          var ImpactConsequences = "";                 
        }else if( R_Impact === '1'){
          var ImpactConsequences = '1-Low'
        }else if( R_Impact === '2'){
          var ImpactConsequences = '2-Medium'
        }else if( R_Impact === '3'){
          var ImpactConsequences = '3-High'
        }
      var dt=moment(new Date());
      var DateLastUpdated=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      var DateRaised = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      var ReportedTo= ''
      var RaisedBy=whoCreated;
      var Resolved= '0000-00-00'; 
      var ClassificationCategory='';
      
      if( R_prob === "undefined"  || R_prob === 'NA'  || R_prob === "" ){
          var Probability = "";       
        }else if(R_prob === '1' ){
            var Probability = 'Unlikely to Occur'
        }else if(R_prob === '2' ){
          var Probability = 'Medium'
        }else if(R_prob === '3 '){
          var Probability = 'Highly Probable'
        }
        var R_Score = req.body[i].Risk_Score
        if( R_Score === "undefined"  || R_Score === 'NA' || R_Score === ""  ){
          var Exposure= "";
        }else if(R_Score < 1 ){
          var Exposure= 'Low'
        }else if(R_Score > 1 && R_Score  < 1.5 ){
          var Exposure= 'Medium'
        }else if(R_Score >1.5 ){
          var Exposure= 'High'
        }
      
      var ReportingLevel= ''
      var RiskResponsePlan= 'Mitigate'
      var ContaintmentApproach=req.body[i].Planned_Mitigation_Action
      var IssueNumber='' 
      var DateLaunched='' 
      var AssociatedActionIDs = ''
      var Category = ''
      var Comments = req.body[i].Acc_specific_risk
      var Source = ''
      var DateOfEscalation = '0000-00-00'; 
      var ShowStopper = ''
      var DependencyOwner = ''
      var ActionsToResolve = ''
      var MasterSTInfoid = null
      var scopeOverall = null
      var ScopeLevel = null
      var Scope_UNID = null
      if(req.body[i].Risk_Type === "undefined" ){
          var RiskType = "";        
        }else{
          var RiskType = req.body[i].Risk_Type;
        } 
      var LastUpdatedBy = req.body[i].LAST_UPDATED_BY     
     
      queryFinalizeRaid="insert into raid values(RaidID,'"
      +IntegrationID+"','"
      +Epic+"','"
      +Sprint+"','"
      +AppID+"',"
      +MasterSTInfoid+","
      +scopeOverall+","
      +ScopeLevel+","
      +Scope_UNID+",'"
      +Type+"','"
      +Description+"','"
      +Status+"','"
      +Owner+"','"
      +TargetDate+"','"
      +Priority+"','"
      +DateRaised+"','"
      +AssociatedApplication+"','"
      +ImpactConsequences+"','"
      +DateLastUpdated+"','"
      +ReportedTo+"','"
      +RaisedBy+"','"
      +Resolved+"','"
      +ClassificationCategory+"','"
      +Probability+"','"
      +Exposure+"','"
      +ReportingLevel+"','"
      +RiskResponsePlan+"','"
      +ContaintmentApproach+"','"
      +IssueNumber+"','"
      +DateLaunched+"','"
      +AssociatedActionIDs+"','"
      +Category+"','"
      +Comments+"','"
      +Source+"','"
      +DateOfEscalation+"','"
      +ShowStopper+"','"
      +DependencyOwner+"','"
      +ActionsToResolve+"','"
      +RiskType+"','"
      +LastUpdatedBy+"')"
              
              conn.query(queryFinalizeRaid).then((queryFinalizeRaidResult)=>{
                 conn.end();
              }).catch(err=>{
                console.log(err)                
                endres = false;
                conn.end();
              })
            
              } // for close
            } // Flage close
      
  }).catch(err=>{
    //not Connected
  })

setTimeout(()=>{
  console.log("flg"+flg)
  if (flg === 1) {  
      pool.getConnection().then((conn) =>{  
        for(var i in req.body ){
          var flag = req.body[i].flag;
          var R_Impact = req.body[i].Risk_Impact;
          var R_prob = req.body[i].Risk_Probability; 
          var TRA_EX_UNID = req.body[i].TRA_EX_UNID;
          var Acc_specific_risk = req.body[i].Acc_specific_risk;    
          var Risk_Impact =req.body[i].Risk_Impact;
          var Risk_Probability = req.body[i].Risk_Probability;
          var Risk_Type = req.body[i].Risk_Type;         
          var  LAST_UPDATED_BY = req.body[i].modifiedBy;
          var dt=moment(new Date());  
          var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");  
          
          if(flag !== 1  && (R_Impact !== "" && R_Impact !== 'NA') && (R_prob !== "" && R_prob !== 'NA') ){                  
          
          queryRiskAnalyFlag="Update transition_risk_analyzer_ex_account SET RiskLog_Flag=1,Acc_specific_risk='"+Acc_specific_risk
          +"',Risk_Impact='"+Risk_Impact
          +"',Risk_Probability='"+Risk_Probability
          +"',Risk_Type='"+Risk_Type
          +"',LAST_UPDATED_BY='"+LAST_UPDATED_BY
          +"',LAST_UPDATED_AT='"+LAST_UPDATED_AT
          +"' where TRA_EX_UNID='"+TRA_EX_UNID+"'";
          
          
          
          // "Update transition_risk_analyzer_ex_account SET RiskLog_Flag=1 "
          // +" where TRA_EX_UNID='"+TRA_EX_UNID+"'";              
                  conn.query(queryRiskAnalyFlag).then((queryRiskAnalyFlagResult)=>{                              
                    conn.end();
                  }).catch(err=>{
                    console.log(err)                
                    flagRes = false;
                    conn.end();
                  })            
                  } // for close
                } // Flage close
          
      }).catch(err=>{
        //not Connected
      })
 
    }

  if (flg === 0){    
    res.send({"0":{"save": "Nill_Records"}});
  }  else if (endres === true && flagRes === true) {
    res.send({"0":{"save": "success"}});
  }   else {
    res.send({"0":{"save": "fail"}});
  }
  
  
},2000)  


  })
// *********************************** Transition Risk Analyzer Account ***********************************




//***************************** PPT CODE ************************************************
//Transition Schedule Plan PPT Function Start
function TransSchPPTTemplate(pptx, commslide, TransAccount, createdDate, TransNoofweeks, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform,RAGcommon,RAGTranCloseGreen, RAGEpic, RAGSprint){
  var imagepath =__dirname+'\\src\\assets\\IBM white.png';
  commslide.addImage({ path:imagepath, x:9, y:0.03, w:0.66, h:0.34 })
  commslide.addText('Transition Schedule - Plan View', {fontSize:14, bold:true, w:4,x:3.6, y:0.1, color:'00B0F0'});
  commslide.addText('Project: ', {fontSize:9, bold:true, w:4,x:0.1, y:0.15, color:'00B0F0'});
  commslide.addText(TransAccount, {fontSize:9, bold:true, w:4,x:1, y:0.15, color:'660099'}); 
  commslide.addText('DOR: ', {fontSize:9, bold:true, w:4,x:0.1, y:0.35, color:'00B0F0'});
  commslide.addText(createdDate, {fontSize:9, bold:true, w:4,x:1, y:0.35, color:'660099'});

  var rows = [];
  var colW=[1.2,0.5,0.4,0.4,5,1]
  Legendhedaing ={fill:'#669999',bold:true,colspan:2,align:'c',valign:'m'}
   
  rows.push(
         [{text:'Overall Transition Plan (OTP) (O)', options:{fill:optOTP}},
         {text:'Sprint 0 (S)', options:{fill:optSprint}},
         {text:'EPIC', options:{fill:RAGEpic}},
         {text:'Sprint', options:{fill:RAGSprint}},
         {text:'AT Plan (P) , AT Learn (L) , AT Perform (PE) , '+
         'ST Plan (P) , ST Define (D) , ST Implement (I) , ST Handover (H) , '+
         'Planned Timeline', options:{fill:optATPlan}},
        {text:'Transition Closure', options:{fill:RAGTranCloseGreen}}
      ],
    
       );
    commslide.addTable( rows, {autoPage:false,colW:colW,fontSize:6,fontFace:'Calibri', x:0.3, y:5.39} );

}
//Transition Schedule Plan PPT Function Start

//Transition Schedule Plan PPT Start
app.get('/TranSchExpPPT/:USername/:IntegrationID/:TAccName', (req, res) => {
  TransAccount ='';
  TransStartDt='';
  TransEndDt='';
  var TransAccountVal = [];
  var TransSCHVal = [];
  var TransATVal =[];
  var TransSrintVal = [];
  var TransServiceVal =[];
  var TransClosureVal = [];
  var TransATPLANVal = [];
  var TransATLEARNVal = [];
  var TransATPERFORMVal = [];
  var TransATTaskPLPVal=[];
  var USername = req.params.USername; 
  var IntegrationID = req.params.IntegrationID; 
  //var Intval = req.params.TAccName;
  //var TAccName = Intval.split("^")[0]; 

  var RAGOTPSprintTC = '#F2DCDB';

  var optOTP = '#833ac9';
  var optSprint = '#a84fdb';
  var RAGEpic = '#dd86e7';
  var RAGSprint = '#f4a3e1';
  var optATPlan = '#ffc2ed';
  var optATLearn = optATPlan;
  var optATPerform = optATPlan;
  var RAGcommon = optATPlan;
  var RAGTranCloseGreen= '#B8E0A4';


   filename = "TransitionSchedule-PlanView-"+USername.replace(/\s/g,'');
  var filePath = __dirname+'\\'+filename+'.pptx';

  var pptx = new PptxGenJS();
  var dt=moment(new Date());
  var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
  queryTransAccount = "Select ClientName,TransStartDt,TransEndDt from transitionprofile where IntegrationID = '" + IntegrationID + "'";
 
pool.getConnection().then(conn => {
    conn.query(queryTransAccount).then((queryTransAccountRes) => {       
        setTimeout(() => { 
          TransAccountVal=JSON.parse(JSON.stringify(queryTransAccountRes));
          TransAccount= TransAccountVal[0]["ClientName"]
          var dt= moment(TransAccountVal[0]["TransStartDt"]);
          TransStartDt= moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          var dt= moment(TransAccountVal[0]["TransEndDt"]);
          TransEndDt = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");moment([dt.year(), dt.month(), dt.date()]).format("MM-DD-YYYY")
        }, 2000)           
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
}).catch(err => {
      //not connected
});

setTimeout(() => { 
queryTranschedule = "SELECT epicName, '' as sprintsort, '' as sprintName, '' as AppName, rag as status,"+
"startDate as Plan_Start_Date,endDate as Plan_End_Date,replanStartDate as Replan_Start_Date,"+
"replanEndDate as RePlan_End_Date,actualStartDate as Actual_Start_Date,"+
"actualEndDate as Actual_End_Date, 'color' from epics WHERE IntegrationID='"+IntegrationID+"' "+
"UNION "+
"SELECT ep.epicName, CONCAT(IF(s.scopelevel='Others', concat('T',s.scopelevel),s.scopelevel),'-',s.sprintName), s.sprintName,'', s.rag,"+
"s.startDate, s.endDate, s.replanStartDate,"+
"s.replanEndDate,s.actualStartDate,s.actualEndDate, '#E0FFFF' "+
"from sprint s "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=s.epicUNID "+
"WHERE s.IntegrationID='"+IntegrationID+"' AND s.sprintName<>'' "+
"UNION "+
"SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName), sp.sprintName, ai.AppName, "+
"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date, "+
"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM application_information ai "+
"LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st "+
"ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE ai.IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' and sc.Scope_Level='AT' "+
"UNION "+
"SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName), sp.sprintName, "+
"CONCAT(stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity), "+
"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date, "+
"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM masterstinfo stc "+
"LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE stc.IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' and sc.Scope_Level='ST' "+
"UNION "+
"SELECT ep.epicName, CONCAT('T',sp.scopelevel,'-',sp.sprintName), sp.sprintName, sc.Scope_BacklogActivity,st.status,st.Plan_Start_Date,"+
"st.Plan_End_Date, st.Replan_Start_Date, st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM sprintscope sc "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE sc.Scope_IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' "+
"and sc.Scope_Level='Others' ORDER BY 1,2;"

pool.getConnection().then(conn=>{
  conn.query(queryTranschedule).then((queryTranscheduleValues)=>{
     TransATVal=JSON.parse(JSON.stringify(queryTranscheduleValues));
           
    conn.end();
  })
})
  
.catch(err=>{
  res.send({"Fetch": "Fail"})
conn.end();
})
.catch(err=>{
        //not connected
})
}, 4000) 

//Service Backlog
setTimeout(() => { 
  queryTranService = "SELECT * FROM standard_activity_for_accounts "+
  "WHERE PHASE_NAME='SERVICE_BACKLOG' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
  pool.getConnection().then(conn=>{
    conn.query(queryTranService).then((queryTranServiceValues)=>{
       TransServiceVal=JSON.parse(JSON.stringify(queryTranServiceValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 2000) 

//Sprint Backlog
setTimeout(() => { 
      queryTranSprint = "SELECT * FROM standard_activity_for_accounts "+
      "WHERE PHASE_NAME='SPRINT_BACKLOG' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
      pool.getConnection().then(conn=>{
        conn.query(queryTranSprint).then((queryTranSprintValues)=>{
           TransSrintVal=JSON.parse(JSON.stringify(queryTranSprintValues));             
          conn.end();
        })
      })    
      .catch(err=>{
        res.send({"Fetch": "Fail"})
      conn.end();
      })
      .catch(err=>{
              //not connected
      })
}, 2000)  

//Tranistion Closure
setTimeout(() => { 
  queryTranClosure = "SELECT * FROM standard_activity_for_accounts "+
  "WHERE PHASE_NAME='CLOSURE' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
  pool.getConnection().then(conn=>{
    conn.query(queryTranClosure).then((queryTranClosureValues)=>{
       TransClosureVal=JSON.parse(JSON.stringify(queryTranClosureValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 2000) 

//AT PLAN, LEARN, PERFORM
setTimeout(() => { 

  queryATTaskPLP = "SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName) as sprintsort, sp.sprintName, ai.AppName, sa.PHASE_NAME,"+
  "tl.T_STANDARD_ACTIVITY_ID, tl.IntegrationID, tl.Plan_Start_Date, "+
  "tl.Plan_End_Date, tl.Replan_Start_Date, tl.RePlan_End_Date, tl.Actual_Start_Date, tl.Actual_End_Date "+
  "FROM application_information ai "+
  "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "LEFT OUTER JOIN task_level_sprint_plan tl "+
  "ON tl.Scope_UNID=sc.AppUNID and tl.epicUNID=sc.epicUNID and tl.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN standard_activity_for_accounts sa ON sa.STANDARD_ACTIVITY_ID=tl.TailoredUNID "+
  "WHERE ai.IntegrationID='"+IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='AT' "+
  "UNION "+
  "SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName) as sprintsort, sp.sprintName, "+
  "CONCAT(stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity), sa.PHASE_NAME, "+
  "tl.T_STANDARD_ACTIVITY_ID, tl.IntegrationID, tl.Plan_Start_Date, "+
  "tl.Plan_End_Date, tl.Replan_Start_Date, tl.RePlan_End_Date, tl.Actual_Start_Date, tl.Actual_End_Date "+
  "FROM masterstinfo stc "+
  "LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "LEFT OUTER JOIN task_level_sprint_plan tl "+
  "ON tl.Scope_UNID=sc.STUNID and tl.epicUNID=sc.epicUNID and tl.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN standard_activity_for_accounts sa ON sa.STANDARD_ACTIVITY_ID=tl.TailoredUNID "+
  "WHERE stc.IntegrationID='"+IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='ST' ORDER BY 1 & 2 ASC;"

  pool.getConnection().then(conn=>{
    conn.query(queryATTaskPLP).then((queryATTaskPLPValues)=>{
       TransATTaskPLPVal=JSON.parse(JSON.stringify(queryATTaskPLPValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 2000)

    //Slide 1
setTimeout(() => {   
    var slide1 = pptx.addNewSlide();
    var rows = [];
    rows.push([{ text:'',options:{fill:'00B0F0', color:'fdfefe'}}]);
    slide1.addTable( rows, { x:0.43, y:0.27, w:9, h:5, color:'00B0F0'} );  
    var imagepath =__dirname+'\\src\\assets\\IBM blue.png';
    slide1.addText('<Client Logo>', {fontSize:12, w:1.5,x:3, y:1, align:'l',valign:'b',color:'000000'});
    slide1.addImage({ path:imagepath, x:1, y:1, w:1.4, h:0.58 })    
    slide1.addText(TransAccount, {fontSize:15, bold:true, w:9,x:.43, y:3.5, color:'fdfefe', align:'c'});
    slide1.addText('Transition Management', {fontSize:15, bold:true, w:9,x:.43, y:3.8, color:'fdfefe', align:'c'});
    slide1.addText('Transition Schedule-Plan View Report on '+createdDate, {fontSize:15, bold:true, w:9,x:.431, y:4.1, color:'fdfefe', align:'c'});
    
  //Slide2
//Transition Start dates calculation
var dt1 =new Date(moment(TransAccountVal[0]["TransStartDt"]).day("Friday").format("YYYY-MM-DD")); // First week Firday week end
dt2 = new Date(moment(new Date()).day("Friday").format("YYYY-MM-DD")) ;  // Current week end Friday

var diff =(dt2 - dt1) / 1000;
diff /= (60 * 60 * 24 * 7);
Currentweeks= Math.round(diff);

//First Friday Calculation

var nextFriday=[];
var nextFridayF=[];
if (moment(dt1).format("dddd") === "Saturday" ){
   nextFriday.push(moment(dt1).day(12).format("DD-MM-YY"))
   nextFridayF.push(moment(dt1).day(12).format("MM-DD-YY"))
} else {
  nextFriday.push(moment(dt1).day("Friday").format("DD-MM-YY"))
  nextFridayF.push(moment(dt1).day("Friday").format("MM-DD-YY"))
}

var firstfriDt= new Date(nextFridayF[0]);

//Last Friday Calculation
var dt1 = new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"));
var dt2 = new Date(moment(TransAccountVal[0]["TransEndDt"]).format("YYYY-MM-DD"));

if (moment(dt2).format("dddd") === "Saturday" ){
  var lastfriday = new Date(moment(dt2).day(12).format("YYYY-MM-DD"))
} else {
  var lastfriday = new Date(moment(dt2).day("Friday").format("YYYY-MM-DD"))
}

var diff =(lastfriday.getTime() - firstfriDt.getTime()) / 1000;
diff /= (60 * 60 * 24 * 7);
var TransNoofweeks = Math.round(diff)-1;

var KTStartDates = [];
var KTEndDates = [];
//var KTColors = [optOTP, optSprint, optATPlan, optATLearn, optATPerform];
var KTColors = [optOTP, optSprint, optATPlan, optATLearn, optATPerform, RAGcommon, RAGTranCloseGreen, optATPlan, optATLearn, optATPerform, optATPlan];
var  KTColorsPahse = ['O','S','P','L','PE','','','P','D','I','H']
var Phasevalues = ['AT-PLAN','AT-LEARN','AT-PERFORM','ST-PLAN','ST-DEFINE','ST-IMPLEMENT','ST-HANDOVER'];

var ATStartDate = '';
var ATSEndDate = '';
var ATStDt = [];
var ATEnDt = [];
var ATTaskDates = [];
var ATTaskFinDate = [];

var ESAT = '';
var ESAAT = '';

if(TransServiceVal.length >0){
  var Serdt ='';
  var SerStartDtS = [];
  var SerStartDtE = [];
  var SerStartDtSC = [];
  var SerStartDtEC = [];
   for( let i=2; i< TransServiceVal.length+2; i++){   
    if (TransServiceVal[i-2]["Replan_Start_Date"] != null ){
      Serdt= moment(TransServiceVal[i-2]["Replan_Start_Date"]);
      SerStartDtS.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
      SerStartDtSC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransServiceVal[i-2]["Plan_Start_Date"] !=null ) {
      Serdt= moment(TransServiceVal[i-2]["Plan_Start_Date"]);
      SerStartDtS.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
      SerStartDtSC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
      }
    }

    if (TransServiceVal[i-2]["RePlan_End_Date"] != null ){
      Serdt= moment(TransServiceVal[i-2]["RePlan_End_Date"]);
      SerStartDtE.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
      SerStartDtEC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransServiceVal[i-2]["Plan_End_Date"] !=null ) {
      Serdt= moment(TransServiceVal[i-2]["Plan_End_Date"]);
      SerStartDtE.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
      SerStartDtEC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
      }
    }
} 
if(SerStartDtSC.length > 0){
   ATTaskFinDate.push(SerStartDtSC.sort()[0])
}else{
  ATTaskFinDate.push('');
}
if(SerStartDtEC.length > 0){
  ATTaskFinDate.push(SerStartDtEC.sort()[SerStartDtEC.length-1]);
}else{
  ATTaskFinDate.push('');
}
}else{
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
} 

//Start & End Dates Calculation for Sprint backlog
if(TransSrintVal.length >0){
var SPdt ='';
var SPStartDtS = [];
var SPStartDtE = [];
var SPStartDtSC = [];
var SPStartDtEC = [];
 for( let i=2; i< TransSrintVal.length+2; i++){   
  if (TransSrintVal[i-2]["Replan_Start_Date"] != null ){
    SPdt= moment(TransSrintVal[i-2]["Replan_Start_Date"]);
    SPStartDtS.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
    SPStartDtSC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
  } else {
    if(TransSrintVal[i-2]["Plan_Start_Date"] !=null ) {
      SPdt= moment(TransSrintVal[i-2]["Plan_Start_Date"]);
    SPStartDtS.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
    SPStartDtSC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
    }
  }

  if (TransSrintVal[i-2]["RePlan_End_Date"] != null ){
    SPdt= moment(TransSrintVal[i-2]["RePlan_End_Date"]);
    SPStartDtE.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
    SPStartDtEC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
  } else {
    if(TransSrintVal[i-2]["Plan_End_Date"] !=null ) {
      SPdt= moment(TransSrintVal[i-2]["Plan_End_Date"]);
    SPStartDtE.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
    SPStartDtEC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
    }
  }
} 
if(SPStartDtSC.length > 0){
ATTaskFinDate.push(SPStartDtSC.sort()[0]);  
}else{
ATTaskFinDate.push('');
}
if(SPStartDtEC.length > 0){
ATTaskFinDate.push(SPStartDtEC.sort()[SPStartDtEC.length-1]);
}else{
ATTaskFinDate.push('');
}
}else{
ATTaskFinDate.push('');
ATTaskFinDate.push('');
}

ATTaskDates.push([{ '0': '', '1': '',  '2': '',
'3': '' , '4': '', '5': ATTaskFinDate[0], '6': ATTaskFinDate[1],
'7': ATTaskFinDate[2], '8': ATTaskFinDate[3],
'9': '', '10':'',
'11':'', '12':'', 
'13':'', '14': '', '15': '', 
'16': '', '17': '', '18': '', '19': '', '20': '', '21': '', 
'22': '', '23': '', '24': '', '25': '', '26': '', '27': ''}])


for( let Appcount=0; Appcount< TransATVal.length; Appcount++){

  ATTaskFinDate = [];
  dt='';
  KTStartDt='';
  KTEndDt='';
  ESAT = '';
  ESAT= TransATVal[Appcount]["epicName"]+TransATVal[Appcount]["sprintName"]+TransATVal[Appcount]["AppName"];

  ATTaskFinDate.push(TransATVal[Appcount]["epicName"])
  ATTaskFinDate.push(TransATVal[Appcount]["sprintName"])
  ATTaskFinDate.push(TransATVal[Appcount]["AppName"])  

  if (TransATVal[Appcount]["Replan_Start_Date"] != null ){
    dt= moment(TransATVal[Appcount]["Replan_Start_Date"]);
    KTStartDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
  } else {
    if(TransATVal[Appcount]["Plan_Start_Date"] !=null ) {
    dt= moment(TransATVal[Appcount]["Plan_Start_Date"]);
    KTStartDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
    }
  }  
  if (TransATVal[Appcount]["RePlan_End_Date"] != null ){
    dt= moment(TransATVal[Appcount]["RePlan_End_Date"]);
    KTEndDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
  } else {
    if(TransATVal[Appcount]["Plan_End_Date"] !=null ) {
    dt= moment(TransATVal[Appcount]["Plan_End_Date"]);
    KTEndDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
    }
  } 
  ATTaskFinDate.push(KTStartDt)
  ATTaskFinDate.push(KTEndDt)

  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
 
  for(let PHcnt=0; PHcnt< Phasevalues.length; PHcnt++){ 
      ATStDt = [];
    ATEnDt = [];
   
    for( let ATcount=0; ATcount< TransATTaskPLPVal.length; ATcount++){
      ESAAT='';  
            
      ESAAT= TransATTaskPLPVal[ATcount]["epicName"]+TransATTaskPLPVal[ATcount]["sprintName"]+TransATTaskPLPVal[ATcount]["AppName"];
    
    //if((TransATVal[Appcount]["AppName"] === TransATTaskPLPVal[ATcount]["AppName"]) && (TransATTaskPLPVal[ATcount]["PHASE_NAME"] === Phasevalues[PHcnt])){
    if((ESAT === ESAAT) && (TransATTaskPLPVal[ATcount]["PHASE_NAME"] === Phasevalues[PHcnt])){ 
      
      if(moment(TransATTaskPLPVal[ATcount]["Replan_Start_Date"]).format("MM-DD-YY") !=='Invalid date'){
         ATStDt.push(moment(TransATTaskPLPVal[ATcount]["Replan_Start_Date"]).format("YYYY-MM-DD")) 
      }else{
        if(moment(TransATTaskPLPVal[ATcount]["Plan_Start_Date"]).format("MM-DD-YY") !=='Invalid date') {
          ATStDt.push(moment(TransATTaskPLPVal[ATcount]["Plan_Start_Date"]).format("YYYY-MM-DD"))       
        }  
      }

      if(moment(TransATTaskPLPVal[ATcount]["RePlan_End_Date"]).format("MM-DD-YY") !=='Invalid date'){
        ATEnDt.push(moment(TransATTaskPLPVal[ATcount]["RePlan_End_Date"]).format("YYYY-MM-DD")) 
      }else{
       if(moment(TransATTaskPLPVal[ATcount]["Plan_End_Date"]).format("MM-DD-YY") !=='Invalid date') {
         ATEnDt.push(moment(TransATTaskPLPVal[ATcount]["Plan_End_Date"]).format("YYYY-MM-DD"))       
       }
      }
      }      
    }
 
    if(ATStDt.length > 0){ 
      ATTaskFinDate.push(ATStDt.sort()[0]);
     }else{
      ATTaskFinDate.push('');
     }
     if(ATEnDt.length >0){
      ATTaskFinDate.push(ATEnDt.sort()[ATEnDt.length-1]);
     }else{
      ATTaskFinDate.push('');
     }  
    
  }

  ATTaskFinDate.push(TransATVal[Appcount]["color"]);

  dt_Report = new Date();
  
  if(TransATVal[Appcount]["Replan_Start_Date"] !== null){
      dt_ReportPlanStDT = new Date(moment(TransATVal[Appcount]["Replan_Start_Date"]).format("YYYY-MM-DD"));
  }else{
    if(TransATVal[Appcount]["Plan_Start_Date"] !== null){
       dt_ReportPlanStDT = new Date(moment(TransATVal[Appcount]["Plan_Start_Date"]).format("YYYY-MM-DD"));
    }else{
       dt_ReportPlanStDT = '';
    }
  }  
      
  if(TransATVal[Appcount]["RePlan_End_Date"] !== null){
       dt_ReportPlanEndDT = new Date(moment(TransATVal[Appcount]["RePlan_End_Date"]).format("YYYY-MM-DD"));
  }else{
    if(TransATVal[Appcount]["Plan_End_Date"] !== null){
      dt_ReportPlanEndDT = new Date(moment(TransATVal[Appcount]["Plan_End_Date"]).format("YYYY-MM-DD"));
    }else{
      dt_ReportPlanEndDT = '';
    }
  }  

  ATTaskFinDate.push(dt_ReportPlanStDT);
  ATTaskFinDate.push(dt_ReportPlanEndDT);
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');

    ATTaskDates.push([{ '0': ATTaskFinDate[0], '1': ATTaskFinDate[1],  '2': ATTaskFinDate[2],
  '3': ATTaskFinDate[3] , '4': ATTaskFinDate[4], '5': ATTaskFinDate[5], '6': ATTaskFinDate[6],
  '7': ATTaskFinDate[7], '8': ATTaskFinDate[8],
  '9': ATTaskFinDate[9], '10':ATTaskFinDate[10],
  '11':  ATTaskFinDate[11], '12': ATTaskFinDate[12], 
  '13': ATTaskFinDate[13], '14': ATTaskFinDate[14], '15': ATTaskFinDate[15], 
  '16': ATTaskFinDate[16], '17': ATTaskFinDate[17], '18': ATTaskFinDate[18], '19': ATTaskFinDate[19],
  '20': ATTaskFinDate[20], '21': ATTaskFinDate[21], '22': ATTaskFinDate[22], '23': ATTaskFinDate[23], 
  '24': ATTaskFinDate[24], '25': ATTaskFinDate[25], '26': ATTaskFinDate[26], '27': ATTaskFinDate[27]}])
}  

if(TransClosureVal.length >0){
  var TCdt ='';
  var TCStartDtS = [];
  var TCStartDtE = [];
  var TCStartDtSC = [];
  var TCStartDtEC = [];
  for( let i=2; i< TransClosureVal.length+2; i++){   
    if (TransClosureVal[i-2]["Replan_Start_Date"] != null ){
      TCdt= moment(TransClosureVal[i-2]["Replan_Start_Date"]);
      TCStartDtS.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
      TCStartDtSC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransClosureVal[i-2]["Plan_Start_Date"] !=null ) {
      TCdt= moment(TransClosureVal[i-2]["Plan_Start_Date"]);
      TCStartDtS.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
      TCStartDtSC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
      }
    }

    if (TransClosureVal[i-2]["RePlan_End_Date"] != null ){
      TCdt= moment(TransClosureVal[i-2]["RePlan_End_Date"]);
      TCStartDtE.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
      TCStartDtEC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransClosureVal[i-2]["Plan_End_Date"] !=null ) {
      TCdt= moment(TransClosureVal[i-2]["Plan_End_Date"]);
      TCStartDtE.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
      TCStartDtEC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
      }
    }
  }   
if(TCStartDtSC.length > 0){
   ATTaskFinDate.push(TCStartDtSC.sort()[0])
}else{
  ATTaskFinDate.push('');
}
if(TCStartDtEC.length > 0){
  ATTaskFinDate.push(TCStartDtEC.sort()[TCStartDtEC.length-1]);
}else{
  ATTaskFinDate.push('');
}
}else{
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
} 

ATTaskDates.push([{ '0': '', '1': '',  '2': '',
'3': '' , '4': '', '5': '', '6': '',
'7': '', '8': '',
'9': '', '10':'',
'11':'', '12':'', 
'13':'', '14': '', '15': '', 
'16': '', '17': '', '18': '', '19': '', '20': '', '21': '', 
'22': '', '23': '', '24': '', '25': '', '26': ATTaskFinDate[28], '27': ATTaskFinDate[29]}])

if (ATTaskDates.length !== 0) {
  var slrow =[];
  var colW = [];
  var row1 =[];
  var row2 =[];
  var row3=[];
  var rowH = [];
  var rowsval=[];
  var slide2 = '';

  var NoofRowsh =8;
  var NoofColsh =30;

  var numberofslide = roundTo.up(ATTaskDates.length/NoofRowsh,0); // no of slides based on rows
  var numberofslidecol = roundTo.up(TransNoofweeks/NoofColsh,0); // no of slides based on cols
  if(Currentweeks === NoofColsh+1 ){
    var currentwkslide = 1;
  }else{  
  var currentwkslide = roundTo.up(Currentweeks/NoofColsh,0); // curent week slide
  }
  //var numberofslide = 5;
  for( let inum=1; inum<= numberofslide; inum++){
    if (numberofslide === inum){
      inumend=ATTaskDates.length
    }
    else{
     inumend=NoofRowsh+((inum-1)*NoofRowsh)
    }

  for( let inumc=1; inumc<= numberofslidecol; inumc++){
      if (numberofslidecol === inumc){
        inumendc=TransNoofweeks
      }
      else{
       inumendc=NoofColsh +((inumc-1)*NoofColsh )
      } 
    
  slide2 = pptx.addNewSlide();    

  TransSchPPTTemplate(pptx, slide2, TransAccount, createdDate, TransNoofweeks, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform, RAGcommon,RAGTranCloseGreen, RAGEpic, RAGSprint)
  colW=[];
  row1 =[];
  row2 =[];
  row3=[];
  rowH = [];

  
  //if(inumendc > 30){
    slrow=[]; 
    rowsval=[]
  //}  
   

  row1 =[{ text:'#',options:{rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Level' ,options:{rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Start Date',options:{ rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'End  Date',options:{ rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}
 ];
  
  row2 =[{ text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}];
  row3 =[{ text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}];
 
  colW=[0.2,1.8,0.4,0.4,0.2]
 
  rowH=[0.4,0.4,0.4]

  var collp = '';
  if(inumc === 1){
    collp = inumendc+2
  }else{
    collp = inumendc
  }
  
   for( let ic=1+((inumc-1)*NoofColsh); ic<= collp; ic++){ 
    row1.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    row2.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    row3.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    colW.push(0.2)
  }
  slrow.push(row1,row2,row3)

  for( let ir=1+((inum-1)*NoofRowsh); ir<= inumend; ir++){     
    rowH.push(0.1)   
    if (ir > 1  && ir < ATTaskDates.length) {
      var col='';
      if (ATTaskDates[ir-1][0]["23"] === 'color') {
        col = '#C0C0C0'
      } else {
        col = ATTaskDates[ir-1][0]["23"]
      } 
     var levlname='';
     var RAGCol = '';
        
     if (ATTaskDates[ir-1][0]["2"] !== '' ){
          levlname= 'Scope:- '+ATTaskDates[ir-1][0]["2"]
          RAGCol = RAGcommon;
     }else if (ATTaskDates[ir-1][0]["1"] !== '' ){
      levlname= 'Sprint:- '+ATTaskDates[ir-1][0]["1"]
      RAGCol = RAGSprint;
     } else{
      levlname= 'Epic:- '+ATTaskDates[ir-1][0]["0"]
      RAGCol = RAGEpic;
     }

      rowsval= [
        { text:ir,options:{fontSize:5, fill:col, fontFace:'Calibri',valign:'m',align:'c'}},
            { text:levlname,options:{ fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:ATTaskDates[ir-1][0]["3"],options:{fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:ATTaskDates[ir-1][0]["4"],options:{fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:'',options:{fontSize:6, fontFace:'Calibri'}}
      ];
    }else if(ir===1){
      rowsval= [
    { text:ir,options:{fontSize:5, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m',align:'c'}},
   { text:'Overall Transition Plan (OTP) / Sprint 0',options:{colspan: 3, fontSize:6, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m'}},
   { text:'',options:{fontSize:6, fontFace:'Calibri'}}
  ];
}else if(ir===ATTaskDates.length){
  rowsval= [
    { text:ir,options:{fontSize:5, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m',align:'c'}},
    { text:'Transition Closure',options:{colspan: 3, fontSize:6, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m'}},
    { text:'',options:{fontSize:6, fontFace:'Calibri'}}
];
}
 
    for( let ic=1+((inumc-1)*NoofColsh); ic<= collp; ic++){ 
      rowsval.push({ text:'',options:{fontSize:6, fontFace:'Calibri'}})
    }

    var planflgsg='';
    var Learnflgsg='';
    var STplanflgsg='';
    var STImpflgsg='';
    var STDefflgsg='';

    if((inumc===1)){
      if(((new Date(ATTaskDates[ir-1][0]["5"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["5"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["6"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["6"]) <= new Date(nextFridayF[0])))){
       rowsval[3] = ( { text:KTColorsPahse[0],options:{fill:KTColors[0],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["7"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["7"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["8"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["8"]) <= new Date(nextFridayF[0])))){
        rowsval[3] = ( { text:KTColorsPahse[1],options:{fill:KTColors[1],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["9"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["9"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["10"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["10"]) <= new Date(nextFridayF[0])))){
        planflgsg='Yes';
        rowsval[5] = ( { text:KTColorsPahse[2],options:{fill:KTColors[2],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["11"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["11"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["12"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["12"]) <= new Date(nextFridayF[0])))){
        Learnflgsg='Yes';
        if((planflgsg==='Yes')){
          rowsval[5] = ( { text:'P-L',options:{fill:KTColors[2],fontSize:4, font_face:'Calibri'}})
        }else{  
          rowsval[5] = ( { text:KTColorsPahse[3],options:{fill:KTColors[3],fontSize:4, fontFace:'Calibri'}})
        }       
      }
      if(((new Date(ATTaskDates[ir-1][0]["13"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["13"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["14"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["14"]) <= new Date(nextFridayF[0])))){
        if((Learnflgsg==='Yes')){
          rowsval[5] = ( { text:'L-PE',options:{fill:KTColors[3],fontSize:4, font_face:'Calibri'}})
        }else if((planflgsg==='Yes') && (Learnflgsg==='Yes')){
          rowsval[5] = ( { text:'P-L-PE',options:{fill:KTColors[4],fontSize:3, font_face:'Calibri'}})
        }else{  
          rowsval[5] = ( { text:KTColorsPahse[4],options:{fill:KTColors[4],fontSize:6, fontFace:'Calibri'}})
        }       
      }
      //ST Start
      if(((new Date(ATTaskDates[ir-1][0]["15"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["15"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["16"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["16"]) <= new Date(nextFridayF[0])))){
        STplanflgsg='Yes';
        rowsval[5] = ( { text:KTColorsPahse[7],options:{fill:KTColors[7],fontSize:4, fontFace:'Calibri'}})
      }

      if(((new Date(ATTaskDates[ir-1][0]["17"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["17"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["18"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["18"]) <= new Date(nextFridayF[0])))){
         STDefflgsg='Yes';
        if((STplanflgsg==='Yes')){
          rowsval[5] = ( { text:'P-D',options:{fill:KTColors[7],fontSize:3, font_face:'Calibri'}})
        }else{  
        rowsval[5] = ( { text:KTColorsPahse[8],options:{fill:KTColors[8],fontSize:4, fontFace:'Calibri'}})
        }
      }

      if(((new Date(ATTaskDates[ir-1][0]["19"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["19"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["20"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["20"]) <= new Date(nextFridayF[0])))){
       STImpflgsg='Yes';
        if((STplanflgsg==='Yes') && (STDefflgsg==='Yes')){
         rowsval[5] = ( { text:'P-D-I',options:{fill:KTColors[9],fontSize:2, font_face:'Calibri'}})
        }else if((STDefflgsg==='Yes')){
          rowsval[5] = ( { text:'D-I',options:{fill:KTColors[8],fontSize:3, font_face:'Calibri'}})
        }else if((STplanflgsg==='Yes')){
          rowsval[5] = ( { text:'P-I',options:{fill:KTColors[7],fontSize:3, font_face:'Calibri'}})
        }else{  
        rowsval[5] = ( { text:KTColorsPahse[9],options:{fill:KTColors[9],fontSize:3, fontFace:'Calibri'}})
        }
      }
      if(((new Date(ATTaskDates[ir-1][0]["21"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["21"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["22"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["22"]) <= new Date(nextFridayF[0])))){
        if((STplanflgsg==='Yes') && (STImpflgsg==='Yes') && (STDefflgsg==='Yes')){
          rowsval[5] = ( { text:'P-D-I-H',options:{fill:KTColors[10],fontSize:2, font_face:'Calibri'}}) 
         }else if((STImpflgsg==='Yes') && (STDefflgsg==='Yes')){
           rowsval[5] = ( { text:'D-I-H',options:{fill:KTColors[8],fontSize:2, font_face:'Calibri'}}) 
         }else if((STImpflgsg==='Yes')){
           rowsval[5] = ( { text:'I-H',options:{fill:KTColors[9],fontSize:3, font_face:'Calibri'}})
         }else if((STDefflgsg==='Yes')){
           rowsval[5] = ( { text:'D-H',options:{fill:KTColors[9],fontSize:2, font_face:'Calibri'}})       
         }else if((STplanflgsg==='Yes')){
           rowsval[5] = ( { text:'P-H',options:{fill:KTColors[8],fontSize:3, font_face:'Calibri'}})
         }else{
           rowsval[5] = ( { text:KTColorsPahse[10],options:{fill:KTColors[10],fontSize:3, fontFace:'Calibri'}})
         }
      }

      if(((new Date(ATTaskDates[ir-1][0]["24"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["24"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["25"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["25"]) <= new Date(nextFridayF[0])))){
        rowsval[5] = ( { text:KTColorsPahse[5],options:{fill:RAGCol,fontSize:4, fontFace:'Calibri'}})    
      }

      if(((new Date(ATTaskDates[ir-1][0]["26"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["26"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["27"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["27"]) <= new Date(nextFridayF[0])))){
        rowsval[3] = ( { text:KTColorsPahse[6],options:{fill:KTColors[6],fontSize:4, fontFace:'Calibri'}})    
      }
    }
    var arrcntS ='';
    var arrcntE ='';
    var planflg='';
    var Learnflg='';
    var STplanflg='';
    var STImpflg='';
    var STDefflg='';

    // Loop for array values of Service, SPrint, AT-Plan, AT-Learn, AT-Perform
    // Loop for array values of Service, sprint, AT-Plan, AT-Learn, AT-Perform, StPlan, ST-IMPLEMENT, ST-DEFINE, ST-HANDOVER,  epic/sprint/application array
    var lopArr = [5, 7, 9, 11, 13, 24, 26, 15, 17, 19, 21]
    var lopArrST = [9, 11, 13, 15, 17, 19, 21]
    var KTColorsPahseC = ['P', 'L', 'PE', 'P', 'D', 'I', 'H']

    for( let la=0; la< lopArr.length; la++){ 
      arrcntS = lopArr[la]
      arrcntE = lopArr[la]+1;

      if((la===0) || (la===1) || (la===6)){
        var colcnt = 3
      }else{
        var colcnt = 5
      }
     
     if (inumc ===1) {
       var strow =(1+(inumc-1)*NoofColsh )
       var endrow = collp
       var countcell =1
     } else {
      var strow =(2+(inumc-1)*NoofColsh )
      var endrow = collp+1
      var countcell =0
     }
        
     for( let icb=strow; icb<= endrow; icb++){   
         
        var Lval ='';

        for( let laST=0; laST< lopArrST.length; laST++){  
           arrcntS1 = lopArrST[laST]
           arrcntE1 = lopArrST[laST]+1;
          if(((new Date(ATTaskDates[ir-1][0][arrcntS1]) <= new Date(moment(dt1).day(12+((icb-1)*7)).format("YYYY-MM-DD"))) 
          && (new Date(ATTaskDates[ir-1][0][arrcntE1])>= new Date(moment(dt1).day(8+((icb-1)*7)).format("YYYY-MM-DD"))))  
          ){    
             if(Lval == ''){
               Lval=KTColorsPahseC[laST]
             }else {
               Lval=Lval+'-'+KTColorsPahseC[laST]
             }       
                
          }          
        }
       
        if(((new Date(ATTaskDates[ir-1][0][arrcntS]) <= new Date(moment(dt1).day(12+((icb-1)*7)).format("YYYY-MM-DD"))) 
        && (new Date(ATTaskDates[ir-1][0][arrcntE])>= new Date(moment(dt1).day(8+((icb-1)*7)).format("YYYY-MM-DD"))))  
        ){
           if(lopArr[la] === 24){
             rowsval[countcell+colcnt] = ( { text:Lval,options:{fill:RAGCol,fontSize:4, font_face:'Calibri'}})
           }else if(lopArr[la] === 26){
             rowsval[countcell+colcnt] = ( { text:'',options:{fill:RAGTranCloseGreen,fontSize:4, font_face:'Calibri'}})
           }else if(lopArr[la] === 5){          
            rowsval[countcell+colcnt] = ( { text:'O',options:{fill:optOTP,fontSize:4, font_face:'Calibri'}})
           }else if(lopArr[la] === 7){
            rowsval[countcell+colcnt] = ( { text:'S',options:{fill:optSprint,fontSize:4, font_face:'Calibri'}})
           }else{
            rowsval[countcell+colcnt] = ( { text:Lval,options:{fill:optATPlan,fontSize:4, font_face:'Calibri'}}) 
           }
        }      
        countcell =countcell+1        
      }
    }  
   slrow.push(rowsval)    
 } 
 
 slide2.addTable( slrow, {colW:colW,rowH:rowH ,fontFace:'Calibri',fontSize:6, x:0.3, y:0.7} );

var dtt = new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))
if(Currentweeks <= TransNoofweeks+1){
if(Currentweeks === 0){
  var CW= 0.19*rowH.length +2.05;  
  var x = 3.06 + 0.200*(Currentweeks+1);
  var xt =x+0.1;
  slide2.addShape(pptx.shapes.UP_DOWN_ARROW,{ x:x, y:0.52, w:0.25, h:CW, line:'660099', lineSize:2 });
  slide2.addText('Current Week', {fontSize:7,fontFace:'Calibri', w:1.0,x:xt, y:0.37, bold: true});
}else if (inumc===currentwkslide ) {
  if((currentwkslide === 1)){
    var CW= 0.19*rowH.length +2.05;
    var x = 3.06 + 0.200*(Currentweeks+1);
    var xt =x+0.1;
  }else{
    var CW= 0.19*rowH.length +2.05;
    var x = 3.06+ 0.200*((Currentweeks-1) - ((currentwkslide-1)*30));  
    var xt =x+0.1;
  } 
  slide2.addShape(pptx.shapes.UP_DOWN_ARROW,{ x:x, y:0.52, w:0.25, h:CW, line:'660099', lineSize:2 });
  slide2.addText('Current Week', {fontSize:7,fontFace:'Calibri', w:1.0,x:xt, y:0.37, bold: true});
}
}


slide2.addText('Period', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.71, y:0.48, bold: true});
slide2.addText('Wk.Start', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.71, y:0.93});
slide2.addText('Wk.End', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.71, y:1.33});

var xdir ='';
if(inumc === 1){
  xdir =3.08;
slide2.addText('WK0-1', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.9, y:0.5, bold: true});
slide2.addText(moment(TransStartDt).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.9, y:0.93});
slide2.addText(nextFriday[0], {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:2.9, y:1.33});

slide2.addText('WK0', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.48, bold: true});
slide2.addText(moment(dt1).day(8).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.93});
slide2.addText(moment(dt1).day(12).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:1.33});
xdir = xdir+0.2

}else{
  xdir =2.89;
}


  
for( let icc=1+((inumc-1)*NoofColsh); icc<= inumendc; icc++){ 
    var wkcol = icc;
    slide2.addText('WK'+wkcol, {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.48, bold: true});
    slide2.addText(moment(dt1).day(8+(icc*7)).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.93});
    slide2.addText(moment(dt1).day(12+(icc*7)).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:1.33});
    xdir = xdir+0.2
  }
  } 
  
  } 

}else{
  //need to write the code for no records avaibale
  colW=[];
  row1 =[];
  slrow=[];

  slide2 = pptx.addNewSlide();     
  TransSchPPTTemplate(pptx, slide2, TransAccount, createdDate, TransNoofweeks, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform,RAGTranCloseGreen, RAGEpic, RAGSprint)

  row1 =[{ text:'#',options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'EPIC',options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'Sprint' ,options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Application Name' ,options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Start Date',options:{ bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c',valign:'m',align:'c'} },
  { text:'End  Date',options:{ bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c',valign:'m',align:'c'} },
 ];

  slrow.push(row1)
  slrow.push([{ text:'No Transition Schedule.',options:{colspan:6,fontSize:6,valign:'m'}}])
  colW=[0.2,0.4,0.4,1.0,0.6,0.6]

  slide2.addTable( slrow, {colW:colW,fontFace:'Calibri',fontSize:6, x:0.3, y:0.7} );
}

pptx.save(filePath);
     
}, 10000)  
  
setTimeout(()=>{
  filename = "TransitionSchedule-PlanView-"+USername.replace(/\s/g,'');
      var filePath = __dirname+'\\'+filename+'.pptx';
     try {
      //  console.log('remove2' +filePath)
      fs.unlinkSync(filePath)
      //file removed
    } catch(err) {
      console.error(err)
    }
}, 19000) 

setTimeout(()=>{  
  filename = "TransitionSchedule-PlanView-"+USername.replace(/\s/g,'');
      var filePath = __dirname+'\\'+filename+'.pptx';
    return res.sendFile(filePath);
}, 18000) 
});
//Transition Schedule Plan PPT End

//Transition Schedule Progress PPT Function Start
function TransSchProgressPPTTemplate(pptx, commslide, TransAccount, createdDate, TransNoofweeks, Service_RAG, Sprint_RAG, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform,RAGBlue,RAGGreen,RAGAmber,RAGRed,RAGGray,RAGTranCloseGreen,RAGcommon,PlanLeran,LearnPerform,PlanLeranPerform,RAGEpic,RAGSprint){
  var imagepath =__dirname+'\\src\\assets\\IBM white.png';
  commslide.addImage({ path:imagepath, x:9, y:0.03, w:0.66, h:0.34 })
  commslide.addText('Transition Schedule - Progress View', {fontSize:14, bold:true, w:4,x:3.6, y:0.1, color:'00B0F0'});
  commslide.addText('Project: ', {fontSize:9, bold:true, w:4,x:0.1, y:0.15, color:'00B0F0'});
  commslide.addText(TransAccount, {fontSize:9, bold:true, w:4,x:1, y:0.15, color:'660099'}); 
  commslide.addText('DOR: ', {fontSize:9, bold:true, w:4,x:0.1, y:0.35, color:'00B0F0'});
  commslide.addText(createdDate, {fontSize:9, bold:true, w:4,x:1, y:0.35, color:'660099'});

  //adding legend table
  var rows = [];
    var colW=[0.5,1.2,1.2,1.2,1.2,2.4,1.5]

  Legendhedaing ={fill:'#669999',bold:true,align:'c',valign:'m'}

  rows.push(
    [{text:'Phase Legend', options:Legendhedaing} ,
    {text:'Overall Transition Plan (OTP)', options:{fill:optOTP}},
    {text:'Sprint 0', options:{fill:optSprint}},
    {text:'Epic', options:{fill:RAGEpic}},
    {text:'Sprint', options:{fill:RAGSprint}},
    {text:'AT Plan (P) , AT Learn (L) , AT Perform (PE)                                            '+
    'ST Plan (P) , ST Define (D) , ST Implement (I) , ST Handover (H)         '+
    'Planned Timeline', options:{fill:optATPlan}},
    {text:'Transition closure', options:{fill:RAGTranCloseGreen}},
],
[{text:'', options:{colspan:7,rowH:0.1,fontSize:1}}],

[{text:'RAG Legend', options:Legendhedaing} ,
{text:'Completed', options:{fill:RAGBlue}},
{text:'On Schedule', options:{fill:RAGGreen}},
{ text:'Behind schedule Report date is less than plan/Re-plan End date.', options:{fill:RAGAmber}},
{ text:'Behind schedule Report date is greater than plan/Re-plan End date.', options:{fill:RAGRed}},
{ text:'Not Started Report Date is greater than Actual/plan/Re-plan End date.', options:{fill:RAGRed}},
 { text:'Not Started/Not Planned/No Actual or Plan Dates', options:{fill:RAGGray}},   
],

);

commslide.addTable( rows, {autoPage:false,fontSize:6,fontFace:'Calibri', x:0.32, y:4.72, w:3,colW:colW,bold:true} );



}
//Transition Schedule Progress PPT Function End

//Transition Schedule Progress PPT Start
app.get('/TranSchExpProgressPPT/:USername/:IntegrationID/:TAccName', (req, res) => {
  TransAccount ='';
  TransStartDt='';
  TransEndDt='';
  TransAccountVal = [];
  var TransSCHVal = [];
  var TransATVal =[];
  var TransSrintVal = [];
  var TransServiceVal =[];
  var TransClosureVal = [];
  var TransATPLANVal = [];
  var TransATLEARNVal = [];
  var TransATPERFORMVal = [];
  var TransATTaskPLPVal=[];
  var USername = req.params.USername; 
  var IntegrationID = req.params.IntegrationID; 
  var Currentweeks = '';
 
  var optOTP = '#833ac9';
  var optSprint = '#a84fdb';
  var RAGEpic = '#dd86e7';
  var RAGSprint = '#f4a3e1';
  var optATPlan = '#ffc2ed';
  var PlanLeran = optATPlan;
  var optATLearn = optATPlan;
  var LearnPerform = optATLearn;
  var optATPerform = optATPlan;
  var PlanLeranPerform = optATPerform;
  var RAGcommon = optATPlan;
  var RAGTranCloseGreen= '#B8E0A4';
  
  var RAGBlue = '#00B0F0';
  var RAGTranCloseGreen= '#B8E0A4';
  var RAGGreen= '#00FF00';
  var RAGAmber = '#FFC000';
  var RAGRed = '#FF0000';
  var RAGGray = '#A6A6A6';

  var RAGOTPSprintTC = '#F2DCDB';
  
  var Service_RAG = '';
  var Sprint_RAG = '';
  var TC_RAG = '';

  filename = "TransitionSchedule-ProgressView-"+USername.replace(/\s/g,'');
  var filePath = __dirname+'\\'+filename+'.pptx';

  var pptx = new PptxGenJS();
  var dt=moment(new Date());
  var createdDate=moment([dt.year(), dt.month(), dt.date()]).format("DD-MMM-YYYY");
  queryTransAccount = "Select ClientName,TransStartDt,TransEndDt from transitionprofile where IntegrationID = '" + IntegrationID + "'";
 
pool.getConnection().then(conn => {
    conn.query(queryTransAccount).then((queryTransAccountRes) => {       
        setTimeout(() => { 
          TransAccountVal=JSON.parse(JSON.stringify(queryTransAccountRes));
          TransAccount= TransAccountVal[0]["ClientName"]
          var dt= moment(TransAccountVal[0]["TransStartDt"]);
          TransStartDt= moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");
          var dt= moment(TransAccountVal[0]["TransEndDt"]);
          TransEndDt = moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()]).format("YYYY-MM-DDTHH:mm:ss");moment([dt.year(), dt.month(), dt.date()]).format("MM-DD-YYYY")
        }, 2000)         
          conn.end();
      })
      .catch(err => {
          conn.end();
      })
}).catch(err => {
      //not connected
});

setTimeout(() => { 

queryTranschedule = "SELECT epicName, '' as sprintsort, '' as sprintName, '' as AppName, rag as status,"+
"startDate as Plan_Start_Date,endDate as Plan_End_Date,replanStartDate as Replan_Start_Date,"+
"replanEndDate as RePlan_End_Date,actualStartDate as Actual_Start_Date,"+
"actualEndDate as Actual_End_Date, 'color' from epics WHERE IntegrationID='"+IntegrationID+"' "+
"UNION "+
"SELECT ep.epicName, CONCAT(IF(s.scopelevel='Others', concat('T',s.scopelevel),s.scopelevel),'-',s.sprintName), s.sprintName,'', s.rag,"+
"s.startDate, s.endDate, s.replanStartDate,"+
"s.replanEndDate,s.actualStartDate,s.actualEndDate, '#E0FFFF' "+
"from sprint s "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=s.epicUNID "+
"WHERE s.IntegrationID='"+IntegrationID+"' AND s.sprintName<>'' "+
"UNION "+
"SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName), sp.sprintName, ai.AppName, "+
"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date, "+
"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM application_information ai "+
"LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st "+
"ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE ai.IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' and sc.Scope_Level='AT' "+
"UNION "+
"SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName), sp.sprintName, "+
"CONCAT(stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity), "+
"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date, "+
"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM masterstinfo stc "+
"LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE stc.IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' and sc.Scope_Level='ST' "+
"UNION "+
"SELECT ep.epicName, CONCAT('T',sp.scopelevel,'-',sp.sprintName), sp.sprintName, sc.Scope_BacklogActivity,st.status,st.Plan_Start_Date,"+
"st.Plan_End_Date, st.Replan_Start_Date, st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date, '#FFFFE0' "+
"FROM sprintscope sc "+
"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
"LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
"WHERE sc.Scope_IntegrationID='"+IntegrationID+"' AND ep.epicName<>'' AND sp.sprintName<>'' "+
"and sc.Scope_Level='Others' ORDER BY 1,2;"

pool.getConnection().then(conn=>{
  conn.query(queryTranschedule).then((queryTranscheduleValues)=>{
     TransATVal=JSON.parse(JSON.stringify(queryTranscheduleValues));           
    conn.end();
  })
})
  
.catch(err=>{
  res.send({"Fetch": "Fail"})
conn.end();
})
.catch(err=>{
        //not connected
})
}, 4000) 

//Service Backlog
setTimeout(() => { 
  queryTranService = "SELECT * FROM standard_activity_for_accounts "+
  "WHERE PHASE_NAME='SERVICE_BACKLOG' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
  pool.getConnection().then(conn=>{
    conn.query(queryTranService).then((queryTranServiceValues)=>{
       TransServiceVal=JSON.parse(JSON.stringify(queryTranServiceValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 2000) 

//Sprint Backlog
setTimeout(() => { 
      queryTranSprint = "SELECT * FROM standard_activity_for_accounts "+
      "WHERE PHASE_NAME='SPRINT_BACKLOG' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
      pool.getConnection().then(conn=>{
        conn.query(queryTranSprint).then((queryTranSprintValues)=>{
           TransSrintVal=JSON.parse(JSON.stringify(queryTranSprintValues));             
          conn.end();
        })
      })    
      .catch(err=>{
        res.send({"Fetch": "Fail"})
      conn.end();
      })
      .catch(err=>{
              //not connected
      })
}, 2000)  

//Tranistion Closure
setTimeout(() => { 
  queryTranClosure = "SELECT * FROM standard_activity_for_accounts "+
  "WHERE PHASE_NAME='CLOSURE' AND IntegrationID='"+IntegrationID+"' AND CheckedValue='1';"
  pool.getConnection().then(conn=>{
    conn.query(queryTranClosure).then((queryTranClosureValues)=>{
       TransClosureVal=JSON.parse(JSON.stringify(queryTranClosureValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 2000) 

//AT PLAN, LEARN, PERFORM, ST-PLAN, ST-IMPLEMENT, ST-DEFINE, ST-HANDOVER
setTimeout(() => { 
  queryATTaskPLP = "SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName) as sprintsort, sp.sprintName, ai.AppName, sa.PHASE_NAME,"+
  "tl.T_STANDARD_ACTIVITY_ID, tl.IntegrationID, tl.Plan_Start_Date, "+
  "tl.Plan_End_Date, tl.Replan_Start_Date, tl.RePlan_End_Date, tl.Actual_Start_Date, tl.Actual_End_Date "+
  "FROM application_information ai "+
  "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "LEFT OUTER JOIN task_level_sprint_plan tl "+
  "ON tl.Scope_UNID=sc.AppUNID and tl.epicUNID=sc.epicUNID and tl.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN standard_activity_for_accounts sa ON sa.STANDARD_ACTIVITY_ID=tl.TailoredUNID "+
  "WHERE ai.IntegrationID='"+IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='AT' "+
  "UNION "+
  "SELECT ep.epicName, CONCAT(sp.scopelevel,'-',sp.sprintName) as sprintsort, sp.sprintName, "+
  "CONCAT(stc.STScopeLevel, '-', stc.STScope, '-',stc.STDetailedScope, '-',stc.STScopeActivity), sa.PHASE_NAME, "+
  "tl.T_STANDARD_ACTIVITY_ID, tl.IntegrationID, tl.Plan_Start_Date, "+
  "tl.Plan_End_Date, tl.Replan_Start_Date, tl.RePlan_End_Date, tl.Actual_Start_Date, tl.Actual_End_Date "+
  "FROM masterstinfo stc "+
  "LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID "+
  "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID "+
  "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID "+
  "LEFT OUTER JOIN task_level_sprint_plan tl "+
  "ON tl.Scope_UNID=sc.STUNID and tl.epicUNID=sc.epicUNID and tl.sprintUNID=sc.sprintUNID "+
  "LEFT OUTER JOIN standard_activity_for_accounts sa ON sa.STANDARD_ACTIVITY_ID=tl.TailoredUNID "+
  "WHERE stc.IntegrationID='"+IntegrationID+"' and ep.epicName<>'' and sc.Scope_Level='ST' ORDER BY 1 & 2 ASC;"
 
  pool.getConnection().then(conn=>{
    conn.query(queryATTaskPLP).then((queryATTaskPLPValues)=>{
       TransATTaskPLPVal=JSON.parse(JSON.stringify(queryATTaskPLPValues));             
      conn.end();
    })
  })    
  .catch(err=>{
    res.send({"Fetch": "Fail"})
  conn.end();
  })
  .catch(err=>{
          //not connected
  })
}, 4000)

    //Slide 1
    
setTimeout(() => {   
  var slide1 = pptx.addNewSlide();
    var rows = [];
    rows.push([{ text:'',options:{fill:'00B0F0', color:'fdfefe'}}]);
    slide1.addTable( rows, { x:0.43, y:0.27, w:9, h:5, color:'00B0F0'} );  
    var imagepath =__dirname+'\\src\\assets\\IBM blue.png';
    slide1.addText('<Client Logo>', {fontSize:12, w:1.5,x:3, y:1, align:'l',valign:'b',color:'000000'});
    slide1.addImage({ path:imagepath, x:1, y:1, w:1.4, h:0.58 })    
    slide1.addText(TransAccount, {fontSize:15, bold:true, w:9,x:.43, y:3.5, color:'fdfefe', align:'c'});
    slide1.addText('Transition Management', {fontSize:15, bold:true, w:9,x:.43, y:3.8, color:'fdfefe', align:'c'});
    slide1.addText('Transition Schedule-Progress View Report on '+createdDate, {fontSize:15, bold:true, w:9,x:.431, y:4.1, color:'fdfefe', align:'c'});
    

    //Slide2

    var dt1 =new Date(moment(TransAccountVal[0]["TransStartDt"]).day("Friday").format("YYYY-MM-DD")); // First week Firday week end
    dt2 = new Date(moment(new Date()).day("Friday").format("YYYY-MM-DD")) ;  // Current week end Friday
    
    var diff =(dt2 - dt1) / 1000;
    diff /= (60 * 60 * 24 * 7);
    Currentweeks= Math.round(diff);
    


var nextFriday=[];
var nextFridayF=[];

if (moment(dt1).format("dddd") === "Saturday" ){
   nextFriday.push(moment(dt1).day(12).format("DD-MM-YY"))
   nextFridayF.push(moment(dt1).day(12).format("MM-DD-YY"))
} else {
  nextFriday.push(moment(dt1).day("Friday").format("DD-MM-YY"))
  nextFridayF.push(moment(dt1).day("Friday").format("MM-DD-YY"))
}

var firstfriDt= new Date(nextFridayF[0]);

//Last Friday Calculation
var dt1 = new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"));
var dt2 = new Date(moment(TransAccountVal[0]["TransEndDt"]).format("YYYY-MM-DD"));

if (moment(dt2).format("dddd") === "Saturday" ){
  var lastfriday = new Date(moment(dt2).day(12).format("YYYY-MM-DD"))
} else {
  var lastfriday = new Date(moment(dt2).day("Friday").format("YYYY-MM-DD"))
}

var diff =(lastfriday.getTime() - firstfriDt.getTime()) / 1000;
diff /= (60 * 60 * 24 * 7);
var TransNoofweeks = Math.round(diff)-1;
var KTStartDates = [];
var KTEndDates = [];
var KTColors = [optOTP, optSprint, optATPlan, optATLearn, optATPerform, RAGTranCloseGreen, RAGcommon, optATPlan, optATLearn, optATPerform, optATPlan];
var  KTColorsPahse = ['','','P','L','PE','','','P','D','I','H'];
var Phasevalues = ['AT-PLAN','AT-LEARN','AT-PERFORM','ST-PLAN','ST-DEFINE','ST-IMPLEMENT','ST-HANDOVER'];
var ATStartDate = '';
var ATSEndDate = '';
var ATStDt = [];
var ATEnDt = [];
var ATTaskDates = [];
var ATTaskFinDate = [];

var ESAT = '';
var ESAAT = '';
let Service_Col= '';
let Service_Col_Cnt= '';
let Service_Complete_Cnt= '';

Service_Col= 0;
Service_Col_Cnt= 0;
var dt_Report_Ser = new Date();

Service_Complete_Cnt= 0;


//Start & End Dates Calculation for Service backlog
if(TransServiceVal.length >0){
    var Serdt ='';
    var SerStartDtS = [];
    var SerStartDtE = [];
    var SerStartDtSC = [];
    var SerStartDtEC = [];

    for( let i=2; i< TransServiceVal.length+2; i++){  
      if(TransServiceVal[i-2]["ServiceStatus"] === 'Completed'){
        Service_Complete_Cnt = Service_Complete_Cnt+1;
      }
    }

  for( let i=2; i< TransServiceVal.length+2; i++){   
      if (TransServiceVal[i-2]["Replan_Start_Date"] != null ){
        Serdt= moment(TransServiceVal[i-2]["Replan_Start_Date"]);
        SerStartDtS.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
        SerStartDtSC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
      } else {
        if(TransServiceVal[i-2]["Plan_Start_Date"] !=null ) {
        Serdt= moment(TransServiceVal[i-2]["Plan_Start_Date"]);
        SerStartDtS.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
        SerStartDtSC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
        }
      }
  
      if (TransServiceVal[i-2]["RePlan_End_Date"] != null ){
        Serdt= moment(TransServiceVal[i-2]["RePlan_End_Date"]);
        SerStartDtE.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
        SerStartDtEC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
      } else {
        if(TransServiceVal[i-2]["Plan_End_Date"] !=null ) {
        Serdt= moment(TransServiceVal[i-2]["Plan_End_Date"]);
        SerStartDtE.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("DD-MM-YY"));
        SerStartDtEC.push(moment([Serdt.year(), Serdt.month(), Serdt.date()]).format("YYYY-MM-DD"));
        }
      }
  
     if(TransServiceVal[i-2]["Replan_Start_Date"] !== null){
       dt_ReportPlanStDT_Ser = new Date(moment(TransServiceVal[i-2]["Replan_Start_Date"]).format("MM-DD-YY"));
     }else{
       if(TransServiceVal[i-2]["Plan_Start_Date"] !== null){
         dt_ReportPlanStDT_Ser = new Date(moment(TransServiceVal[i-2]["Plan_Start_Date"]).format("MM-DD-YY"));
       }else{
        dt_ReportPlanStDT_Ser = '';
       }
     }  
      
     if(TransServiceVal[i-2]["RePlan_End_Date"] !== null){
       dt_ReportPlanEndDT_Ser = new Date(moment(TransServiceVal[i-2]["RePlan_End_Date"]).format("MM-DD-YY"));
     }else{
       if(TransServiceVal[i-2]["Plan_End_Date"] !== null){
        dt_ReportPlanEndDT_Ser = new Date(moment(TransServiceVal[i-2]["Plan_End_Date"]).format("MM-DD-YY"));
       }else{
        dt_ReportPlanEndDT_Ser = '';
       }
     }  
      
    if((dt_ReportPlanStDT_Ser!== '') && (dt_ReportPlanEndDT_Ser!== '')){
      
       if(((TransServiceVal[i-2]["ServiceStatus"] === 'Not Started')) 
       && ((new Date(moment(dt_Report_Ser).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT_Ser).format("MM-DD-YY"))))){
        
        Service_Col=Service_Col+3
        Service_Col_Cnt=Service_Col_Cnt+1
       
       }else if((TransServiceVal[i-2]["ServiceStatus"] === 'Behind Schedule') 
       && ((new Date(moment(dt_Report_Ser).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT_Ser).format("MM-DD-YY"))))){  
       
        Service_Col=Service_Col+3
        Service_Col_Cnt=Service_Col_Cnt+1 

       }else if((TransServiceVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
       
        Service_Col=Service_Col+2
        Service_Col_Cnt=Service_Col_Cnt+1 

       }else if((TransServiceVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransServiceVal[i-2]["ServiceStatus"] === 'Completed')){
       
        Service_Col=Service_Col+1
        Service_Col_Cnt=Service_Col_Cnt+1

       }
    }else{
       if((TransServiceVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
         
        Service_Col=Service_Col+2
        Service_Col_Cnt=Service_Col_Cnt+1 

       }else if((TransServiceVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransServiceVal[i-2]["ServiceStatus"] === 'Completed')){
         
        Service_Col=Service_Col+1
        Service_Col_Cnt=Service_Col_Cnt+1

       }
    } 
  } 

if(Service_Complete_Cnt === TransServiceVal.length){
  Service_RAG = RAGBlue;
}else{
if((Service_Col !== 0) && (Service_Col_Cnt !== 0)){  
  if(Service_Col/Service_Col_Cnt <= 1 ) {
    Service_RAG = RAGGreen;
  }else if(Service_Col/Service_Col_Cnt > 1 && Service_Col/Service_Col_Cnt <= 2){
    Service_RAG = RAGAmber; 
  }else if(Service_Col/Service_Col_Cnt >2  && Service_Col/Service_Col_Cnt <= 3){
    Service_RAG = RAGRed;
  } else {
    Service_RAG = RAGGray;
  }
}else{
  Service_RAG = RAGGray;
}
}

  if(SerStartDtSC.length > 0){
     ATTaskFinDate.push(moment(SerStartDtSC.sort()[0]).format("YYYY-MM-DD"))
  }else{
    ATTaskFinDate.push('');
  }
  if(SerStartDtEC.length > 0){
    ATTaskFinDate.push(moment(SerStartDtEC.sort()[SerStartDtEC.length-1]).format("YYYY-MM-DD"));
  }else{
    ATTaskFinDate.push('');
  }
}else{
    ATTaskFinDate.push('');
    ATTaskFinDate.push('');
}  

ATTaskDates.push([{ '0': '', '1': '',  '2': '',
    '3': '' , '4': '', '5': ATTaskFinDate[0], '6': ATTaskFinDate[1],
    '7': '', '8': '',
    '9': '', '10':'',
    '11': '', '12': '', 
    '13': '', '14': '', 
    '15': '', '16': '',
    '17': '', '18': '', '19': '', '20': '', '21': '', '22': '', '23': '', '24': '', '25': '', '26': '', '27': '',
    '28': '', '29': ''}])

//Start & End Dates Calculation for Sprint backlog
if(TransSrintVal.length >0){
  var SPdt ='';
  var SPStartDtS = [];
  var SPStartDtE = [];
  var SPStartDtSC = [];
  var SPStartDtEC = [];
  let Sprint_Col= '';
  let Sprint_Col_Cnt= '';
  let Sprint_Complete_Cnt= '';

  Sprint_Col= 0;
  Sprint_Col_Cnt= 0;
  Sprint_Complete_Cnt=0;

 for( let i=2; i< TransSrintVal.length+2; i++){  
    if(TransSrintVal[i-2]["ServiceStatus"] === 'Completed'){
      Sprint_Complete_Cnt = Sprint_Complete_Cnt+1;
    }
  }

for( let i=2; i< TransSrintVal.length+2; i++){   
    if (TransSrintVal[i-2]["Replan_Start_Date"] != null ){
      SPdt= moment(TransSrintVal[i-2]["Replan_Start_Date"]);
      SPStartDtS.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
      SPStartDtSC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransSrintVal[i-2]["Plan_Start_Date"] !=null ) {
        SPdt= moment(TransSrintVal[i-2]["Plan_Start_Date"]);
      SPStartDtS.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
      SPStartDtSC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
      }
    }

    if (TransSrintVal[i-2]["RePlan_End_Date"] != null ){
      SPdt= moment(TransSrintVal[i-2]["RePlan_End_Date"]);
      SPStartDtE.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
      SPStartDtEC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
    } else {
      if(TransSrintVal[i-2]["Plan_End_Date"] !=null ) {
        SPdt= moment(TransSrintVal[i-2]["Plan_End_Date"]);
      SPStartDtE.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("DD-MM-YY"));
      SPStartDtEC.push(moment([SPdt.year(), SPdt.month(), SPdt.date()]).format("YYYY-MM-DD"));
      }
    }

    dt_Report_SP = new Date();
  
    if(TransSrintVal[i-2]["Replan_Start_Date"] !== null){
      dt_ReportPlanStDT_SP = new Date(moment(TransSrintVal[i-2]["Replan_Start_Date"]).format("MM-DD-YY"));
    }else{
      if(TransSrintVal[i-2]["Plan_Start_Date"] !== null){
        dt_ReportPlanStDT_SP = new Date(moment(TransSrintVal[i-2]["Plan_Start_Date"]).format("MM-DD-YY"));
      }else{
        dt_ReportPlanStDT_SP = '';
      }
    }  
     
    if(TransSrintVal[i-2]["RePlan_End_Date"] !== null){
      dt_ReportPlanEndDT_SP = new Date(moment(TransSrintVal[i-2]["RePlan_End_Date"]).format("MM-DD-YY"));
    }else{
      if(TransSrintVal[i-2]["Plan_End_Date"] !== null){
        dt_ReportPlanEndDT_SP = new Date(moment(TransSrintVal[i-2]["Plan_End_Date"]).format("MM-DD-YY"));
      }else{
        dt_ReportPlanEndDT_SP = '';
      }
    }  
     
   if((dt_ReportPlanStDT_SP!== '') && (dt_ReportPlanEndDT_SP!== '')){
     
      if(((TransSrintVal[i-2]["ServiceStatus"] === 'Not Started')) 
      && ((new Date(moment(dt_Report_SP).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT_SP).format("MM-DD-YY"))))){
       
       Sprint_Col=Sprint_Col+3
       Sprint_Col_Cnt=Sprint_Col_Cnt+1
      
      }else if((TransSrintVal[i-2]["ServiceStatus"] === 'Behind Schedule') 
      && ((new Date(moment(dt_Report_SP).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT_SP).format("MM-DD-YY"))))){  
      
        Sprint_Col=Sprint_Col+3
        Sprint_Col_Cnt=Sprint_Col_Cnt+1 

      }else if((TransSrintVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
      
        Sprint_Col=Sprint_Col+2
        Sprint_Col_Cnt=Sprint_Col_Cnt+1 

      }else if((TransSrintVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransSrintVal[i-2]["ServiceStatus"] === 'Completed')){
      
        Sprint_Col=Sprint_Col+1
        Sprint_Col_Cnt=Sprint_Col_Cnt+1

      }
   }else{
      if((TransSrintVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
        
        Sprint_Col=Sprint_Col+2
        Sprint_Col_Cnt=Sprint_Col_Cnt+1 

      }else if((TransSrintVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransSrintVal[i-2]["ServiceStatus"] === 'Completed')){
        
        Sprint_Col=Sprint_Col+1
        Sprint_Col_Cnt=Sprint_Col_Cnt+1

      }
   }
} 

if(Sprint_Complete_Cnt === TransSrintVal.length){
  Sprint_RAG = RAGBlue;
}else{
if((Sprint_Col !== 0) && (Sprint_Col_Cnt !== 0)){  
  if(Sprint_Col/Sprint_Col_Cnt <= 1 ) {
   Sprint_RAG = RAGGreen;
  }else if(Sprint_Col/Sprint_Col_Cnt > 1 && Sprint_Col/Sprint_Col_Cnt <= 2){
   Sprint_RAG = RAGAmber; 
  }else if(Sprint_Col/Sprint_Col_Cnt >2  && Sprint_Col/Sprint_Col_Cnt <= 3){
   Sprint_RAG = RAGRed;
  } else {
   Sprint_RAG = RAGGray;
  }
 }else{
   Sprint_RAG = RAGGray;
 }
}

if(SPStartDtSC.length > 0){
  ATTaskFinDate.push(SPStartDtSC.sort()[0]);  
}else{
  ATTaskFinDate.push('');
}
if(SPStartDtEC.length > 0){
  ATTaskFinDate.push(SPStartDtEC.sort()[SPStartDtEC.length-1]);
}else{
  ATTaskFinDate.push('');
}
}else{
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
}  

ATTaskDates.push([{ '0': '', '1': '',  '2': '',
    '3': '' , '4': '', '5': '', '6': '',
    '7': ATTaskFinDate[2], '8': ATTaskFinDate[3],
    '9': '', '10':'',
    '11': '', '12': '', 
    '13': '', '14': '', 
    '15': '', '16': '',
    '17': '', '18': '' , '19': '', '20': '', '21': '', '22': '', '23': '', '24': '', '25': '', '26': '', '27': '',
    '28': '', '29': ''}])
//Start & End Dates Calculation for Sprint backlog

for( let Appcount=0; Appcount< TransATVal.length; Appcount++){

  ATTaskFinDate = [];
  dt='';
  KTStartDt='';
  KTEndDt='';
  ESAT = '';
  ESAT= TransATVal[Appcount]["epicName"]+TransATVal[Appcount]["sprintName"]+TransATVal[Appcount]["AppName"];

  ATTaskFinDate.push(TransATVal[Appcount]["epicName"])
  ATTaskFinDate.push(TransATVal[Appcount]["sprintName"])
  ATTaskFinDate.push(TransATVal[Appcount]["AppName"])  

  if (TransATVal[Appcount]["Actual_Start_Date"] != null ){
    dt= moment(TransATVal[Appcount]["Actual_Start_Date"]);
    KTStartDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
  } else {
    KTStartDt = '';
  }  
  if (TransATVal[Appcount]["Actual_End_Date"] != null ){
    dt= moment(TransATVal[Appcount]["Actual_End_Date"]);
    KTEndDt= moment([dt.year(), dt.month(), dt.date()]).format("DD-MM-YY");
  } else {
    KTEndDt = ''
  }

  ATTaskFinDate.push(KTStartDt)
  ATTaskFinDate.push(KTEndDt)

  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');

  for(let PHcnt=0; PHcnt< Phasevalues.length; PHcnt++){ 
      ATStDt = [];
    ATEnDt = [];

    for( let ATcount=0; ATcount< TransATTaskPLPVal.length; ATcount++){
      
      ESAAT='';  
            
      ESAAT= TransATTaskPLPVal[ATcount]["epicName"]+TransATTaskPLPVal[ATcount]["sprintName"]+TransATTaskPLPVal[ATcount]["AppName"];

    //if((TransATVal[Appcount]["AppName"] === TransATTaskPLPVal[ATcount]["AppName"]) && (TransATTaskPLPVal[ATcount]["PHASE_NAME"] === Phasevalues[PHcnt])){
    if((ESAT === ESAAT) && (TransATTaskPLPVal[ATcount]["PHASE_NAME"] === Phasevalues[PHcnt])){ 

     // console.log(ESAT+":"+ESAAT)
      //console.log(TransATTaskPLPVal[ATcount]["PHASE_NAME"]+":"+Phasevalues[PHcnt])
      if(moment(TransATTaskPLPVal[ATcount]["Replan_Start_Date"]).format("MM-DD-YY") !=='Invalid date'){
        ATStDt.push(moment(TransATTaskPLPVal[ATcount]["Replan_Start_Date"]).format("YYYY-MM-DD"))
     }else{
       if(moment(TransATTaskPLPVal[ATcount]["Plan_Start_Date"]).format("MM-DD-YY") !=='Invalid date') {
         ATStDt.push(moment(TransATTaskPLPVal[ATcount]["Plan_Start_Date"]).format("YYYY-MM-DD"))       
       }  
     }

     if(moment(TransATTaskPLPVal[ATcount]["RePlan_End_Date"]).format("MM-DD-YY") !=='Invalid date'){
       ATEnDt.push(moment(TransATTaskPLPVal[ATcount]["RePlan_End_Date"]).format("YYYY-MM-DD")) 
     }else{
      if(moment(TransATTaskPLPVal[ATcount]["Plan_End_Date"]).format("MM-DD-YY") !=='Invalid date') {
        ATEnDt.push(moment(TransATTaskPLPVal[ATcount]["Plan_End_Date"]).format("YYYY-MM-DD"))       
      }
     }
      }      
    }
 
    if(ATStDt.length > 0){  
      ATTaskFinDate.push(ATStDt.sort()[0]);
     }else{
      ATTaskFinDate.push('');
     }
     if(ATEnDt.length >0){
      ATTaskFinDate.push(ATEnDt.sort()[ATEnDt.length-1]);
     }else{
      ATTaskFinDate.push('');
     }  
    
  }

  dt_Report = new Date();
  
  if(TransATVal[Appcount]["Replan_Start_Date"] !== null){
      dt_ReportPlanStDT = new Date(moment(TransATVal[Appcount]["Replan_Start_Date"]).format("YYYY-MM-DD"));
  }else{
    if(TransATVal[Appcount]["Plan_Start_Date"] !== null){
       dt_ReportPlanStDT = new Date(moment(TransATVal[Appcount]["Plan_Start_Date"]).format("YYYY-MM-DD"));
    }else{
       dt_ReportPlanStDT = '';
    }
  }  
      
  if(TransATVal[Appcount]["RePlan_End_Date"] !== null){
       dt_ReportPlanEndDT = new Date(moment(TransATVal[Appcount]["RePlan_End_Date"]).format("YYYY-MM-DD"));
  }else{
    if(TransATVal[Appcount]["Plan_End_Date"] !== null){
      dt_ReportPlanEndDT = new Date(moment(TransATVal[Appcount]["Plan_End_Date"]).format("YYYY-MM-DD"));
    }else{
      dt_ReportPlanEndDT = '';
    }
  }  
  var AppRAG = '';   
 
  if((dt_ReportPlanStDT!== '') && (dt_ReportPlanEndDT!== '')){
      
    if(((TransATVal[Appcount]["status"] === 'Not Started')) 
    && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))){
     
      AppRAG = RAGRed;  

    }else if((TransATVal[Appcount]["status"] === 'Behind Schedule') 
    && ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))){  
       
      AppRAG = RAGRed; 

    }else if((TransATVal[Appcount]["status"] === 'Behind Schedule') || (TransATVal[Appcount]["status"] === 'Amber')){
       
      AppRAG = RAGAmber; 

    }else if((TransATVal[Appcount]["status"] === 'On Schedule') || (TransATVal[Appcount]["status"] === 'Green')){
       
      AppRAG = RAGGreen; 

    }else if((TransATVal[Appcount]["status"] === 'Completed')){  

      AppRAG = RAGBlue;

    }else if((TransATVal[Appcount]["status"] === 'Red')){       
      AppRAG = RAGRed;

    }else{
      AppRAG = RAGGray;
    }
  }else{
    if((TransATVal[Appcount]["status"] === 'Behind Schedule') || (TransATVal[Appcount]["status"] === 'Amber')){
         
      AppRAG = RAGAmber; 

    }else if((TransATVal[Appcount]["status"] === 'On Schedule') || (TransATVal[Appcount]["status"] === 'Green')){
         
      AppRAG = RAGGreen; 

    }else if((TransATVal[Appcount]["status"] === 'Completed')){
         
      AppRAG = RAGBlue; 

    }else if((TransATVal[Appcount]["status"] === 'Red')){       
        AppRAG = RAGRed;
  
    }else{
      AppRAG = RAGGray;

    }
  } 

  ATTaskFinDate.push(AppRAG);
  if((TransATVal[Appcount]["status"] === null) || (TransATVal[Appcount]["status"] === '') || (TransATVal[Appcount]["status"] === 'null')){
    ATTaskFinDate.push('Not Planned');
  }else{
    ATTaskFinDate.push(TransATVal[Appcount]["status"]);    
  }  
  ATTaskFinDate.push('');
  ATTaskFinDate.push('');
  ATTaskFinDate.push(TransATVal[Appcount]["color"]);
  ATTaskFinDate.push(dt_ReportPlanStDT);
  ATTaskFinDate.push(dt_ReportPlanEndDT);

ATTaskDates.push([{ '0': ATTaskFinDate[0], '1': ATTaskFinDate[1],  '2': ATTaskFinDate[2],
  '3': ATTaskFinDate[3] , '4': ATTaskFinDate[4], '5': ATTaskFinDate[5], '6': ATTaskFinDate[6],
  '7': ATTaskFinDate[7], '8': ATTaskFinDate[8],
  '9': ATTaskFinDate[9], '10':ATTaskFinDate[10],
  '11':  ATTaskFinDate[11], '12': ATTaskFinDate[12], 
  '13': ATTaskFinDate[13], '14': ATTaskFinDate[14], 
  '15': ATTaskFinDate[15], '16': ATTaskFinDate[16], 
  '17': ATTaskFinDate[17], '18': ATTaskFinDate[18], 
  '19': ATTaskFinDate[19], '20':ATTaskFinDate[20], 
  '21':ATTaskFinDate[21],'22':ATTaskFinDate[22],
  '23':ATTaskFinDate[23], '24':ATTaskFinDate[24], '25':ATTaskFinDate[25], 
  '26':ATTaskFinDate[26],'27':ATTaskFinDate[27],'28':ATTaskFinDate[28],'29':ATTaskFinDate[29]}])
 
}  

  //Tranistion closure Dates
if(TransClosureVal.length >0){
   var TCdt ='';
   var TCStartDtS = [];
   var TCStartDtE = [];
   var TCStartDtSC = [];
   var TCStartDtEC = [];
   let TC_Col= '';
   let TC_Col_Cnt= '';
   let TC_Complete_Cnt= '';
 
   TC_Col= 0;
   TC_Col_Cnt= 0;
   TC_Complete_Cnt=0;

   for( let i=2; i< TransClosureVal.length+2; i++){  
    if(TransClosureVal[i-2]["ServiceStatus"] === 'Completed'){
      TC_Complete_Cnt = TC_Complete_Cnt+1;
    }
  }

    for( let i=2; i< TransClosureVal.length+2; i++){   
     if (TransClosureVal[i-2]["Replan_Start_Date"] != null ){
       TCdt= moment(TransClosureVal[i-2]["Replan_Start_Date"]);
       TCStartDtS.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
       TCStartDtSC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
     } else {
       if(TransClosureVal[i-2]["Plan_Start_Date"] !=null ) {
       TCdt= moment(TransClosureVal[i-2]["Plan_Start_Date"]);
       TCStartDtS.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
       TCStartDtSC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
       }
     }
 
     if (TransClosureVal[i-2]["RePlan_End_Date"] != null ){
       TCdt= moment(TransClosureVal[i-2]["RePlan_End_Date"]);
       TCStartDtE.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
       TCStartDtEC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
     } else {
       if(TransClosureVal[i-2]["Plan_End_Date"] !=null ) {
       TCdt= moment(TransClosureVal[i-2]["Plan_End_Date"]);
       TCStartDtE.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("DD-MM-YY"));
       TCStartDtEC.push(moment([TCdt.year(), TCdt.month(), TCdt.date()]).format("YYYY-MM-DD"));
       }
     }
 
    if(TransClosureVal[i-2]["Replan_Start_Date"] !== null){
      dt_ReportPlanStDT_TC = new Date(moment(TransClosureVal[i-2]["Replan_Start_Date"]).format("MM-DD-YY"));
    }else{
      if(TransClosureVal[i-2]["Plan_Start_Date"] !== null){
       dt_ReportPlanStDT_TC = new Date(moment(TransClosureVal[i-2]["Plan_Start_Date"]).format("MM-DD-YY"));
      }else{
       dt_ReportPlanStDT_TC = '';
      }
    }  
     
    if(TransClosureVal[i-2]["RePlan_End_Date"] !== null){
      dt_ReportPlanEndDT_TC = new Date(moment(TransClosureVal[i-2]["RePlan_End_Date"]).format("MM-DD-YY"));
    }else{
      if(TransClosureVal[i-2]["Plan_End_Date"] !== null){
       dt_ReportPlanEndDT_TC = new Date(moment(TransClosureVal[i-2]["Plan_End_Date"]).format("MM-DD-YY"));
      }else{
       dt_ReportPlanEndDT_TC = '';
      }
    }  
     
   if((dt_ReportPlanStDT_TC!== '') && (dt_ReportPlanEndDT_TC!== '')){
     
      if(((TransClosureVal[i-2]["ServiceStatus"] === 'Not Started')) 
      && ((new Date(moment(dt_Report_Ser).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT_TC).format("MM-DD-YY"))))){
       
       TC_Col=TC_Col+3
       TC_Col_Cnt=TC_Col_Cnt+1
      
      }else if((TransClosureVal[i-2]["ServiceStatus"] === 'Behind Schedule') 
      && ((new Date(moment(dt_Report_Ser).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT_TC).format("MM-DD-YY"))))){  
      
       TC_Col=TC_Col+3
       TC_Col_Cnt=TC_Col_Cnt+1 

      }else if((TransClosureVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
      
       TC_Col=TC_Col+2
       TC_Col_Cnt=TC_Col_Cnt+1

      }else if((TransClosureVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransClosureVal[i-2]["ServiceStatus"] === 'Completed')){
      
       TC_Col=TC_Col+1
       TC_Col_Cnt=TC_Col_Cnt+1

      }
   }else{
      if((TransClosureVal[i-2]["ServiceStatus"] === 'Behind Schedule')){
        
       TC_Col=TC_Col+2
       TC_Col_Cnt=TC_Col_Cnt+1 

      }else if((TransClosureVal[i-2]["ServiceStatus"] === 'On Schedule') || (TransClosureVal[i-2]["ServiceStatus"] === 'Completed')){
        
       TC_Col=TC_Col+1
       TC_Col_Cnt=TC_Col_Cnt+1

      }
   } 
 } 

 if(TC_Complete_Cnt === TransClosureVal.length){
  TC_RAG = RAGBlue;
}else{
 if((TC_Col !== 0) && (TC_Col_Cnt !== 0)){
  if(TC_Col/TC_Col_Cnt <= 1 ) {
    TC_RAG = RAGGreen;
  }else if(TC_Col/TC_Col_Cnt > 1 && TC_Col/TC_Col_Cnt <= 2){
    TC_RAG = RAGAmber; 
  }else if(TC_Col/TC_Col_Cnt >2  && TC_Col/TC_Col_Cnt <= 3){
    TC_RAG = RAGRed;
  } else {
    TC_RAG = RAGGray;
  }
 }else{
   TC_RAG = RAGGray;
 }
}

 if(TCStartDtSC.length > 0){
    ATTaskFinDate.push(TCStartDtSC.sort()[0])
 }else{
   ATTaskFinDate.push('');
 }
 if(TCStartDtEC.length > 0){
   ATTaskFinDate.push(TCStartDtEC.sort()[TCStartDtEC.length-1]);
 }else{
   ATTaskFinDate.push('');
 }
}else{
   ATTaskFinDate.push('');
   ATTaskFinDate.push('');
} 
ATTaskFinDate.push('');
ATTaskFinDate.push('');
ATTaskFinDate.push('');

// console.log(ATTaskFinDate)

ATTaskDates.push([{ '0': '', '1': '',  '2': '',
    '3': '' , '4': '', '5': '', '6': '',
    '7': '', '8': '',
    '9': '', '10':'',
    '11': '', '12': '', 
    '13': '', '14': '', 
    '15': '', '16': '',
    '17': '', '18': '' , '19':'', '20':'', '21':'', '22':'', '23':'','24':'', 
    '25': ATTaskFinDate[30],'26': ATTaskFinDate[31], 
    '27':'','28':'', '29':''}])  

  // console.log(ATTaskDates)

if (ATTaskDates.length !== 0) {
  var slrow =[];
  var colW = [];
  var row1 =[];
  var row2 =[];
  var row3=[];
  var rowH = [];
  var rowsval=[];
  var slide2 = '';

  //var numberofslide = 5;
  var NoofRowsh =7;
  var NoofColsh =25;

  var numberofslide = roundTo.up(ATTaskDates.length/NoofRowsh,0); // no of slides based on rows
  var numberofslidecol = roundTo.up(TransNoofweeks/NoofColsh,0); // no of slides based on cols
  if (Currentweeks === NoofColsh+1){
    currentwkslide = 1; // curent week slide
 }else
 {
    currentwkslide = roundTo.up(Currentweeks/NoofColsh,0); // curent week slide
 }

  for( let inum=1; inum<= numberofslide; inum++){
    if (numberofslide === inum){
      inumend=ATTaskDates.length
    }
    else{
     inumend=NoofRowsh+((inum-1)*NoofRowsh)
    }

  for( let inumc=1; inumc<= numberofslidecol; inumc++){
      if (numberofslidecol === inumc){
        inumendc=TransNoofweeks
      }
      else{
       inumendc=NoofColsh+((inumc-1)*NoofColsh)
      } 
    
     
  slide2 = pptx.addNewSlide();   
  TransSchProgressPPTTemplate(pptx, slide2, TransAccount, createdDate, TransNoofweeks, Service_RAG, Sprint_RAG, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform,RAGBlue,RAGGreen,RAGAmber,RAGRed,RAGGray,RAGTranCloseGreen,RAGcommon,PlanLeran,LearnPerform,PlanLeranPerform,RAGEpic,RAGSprint) 
//functiom
//
  colW=[];
  row1 =[];
  row2 =[];
  row3=[];
  rowH = [];

  
  //if(inumendc > 30){
    slrow=[]; 
    rowsval=[]
  //}  
   

  row1 =[{ text:'#',options:{rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
   { text:'Level' ,options:{rowspan:3,bold:true,fill:'#E2EFDA',valign:'m',align:'c',fontSize:6}},
  { text:'Actual Start Date',options:{ rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'Acutal End  Date',options:{ rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'Progress RAG',options:{ rowspan:3,bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}
 ];
  
  row2 =[{ text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}];
  row3 =[{ text:'',options:{fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}}];
 
  colW=[0.2,1.8,0.4,0.4,0.8,0.2]
 
  rowH=[0.4,0.4,0.4]

  var collp = '';
  if(inumc === 1){
    collp = inumendc+2
  }else{
    collp = inumendc
  }
  
   for( let ic=1+((inumc-1)*NoofColsh); ic<= collp; ic++){ 
    row1.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    row2.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    row3.push({ text:'',options:{fill:'#E2EFDA',fontSize:6,fontFace:'Calibri',valign:'m',align:'c'}})
    colW.push(0.2)
  }
  slrow.push(row1,row2,row3)

  var sno =''
  for( let ir=1+((inum-1)*NoofRowsh); ir<= inumend; ir++){     
    rowH.push(0.1)
    if (ir > 2  && ir < ATTaskDates.length) {
      var col='';
      if (ATTaskDates[ir-1][0]["27"] === 'color') {
        col = '#C0C0C0'
      } else {
        col = ATTaskDates[ir-1][0]["27"]
      }
      sno = ir-2
      var levlname='';
      var RAGCol = '';  
     if (ATTaskDates[ir-1][0]["2"] !== '' ){
          levlname= 'Scope:- '+ATTaskDates[ir-1][0]["2"]
          RAGCol = RAGcommon;
     }else if (ATTaskDates[ir-1][0]["1"] !== '' ){
      levlname= 'Sprint:- '+ATTaskDates[ir-1][0]["1"]
      RAGCol = RAGSprint;
     } else{
      levlname= 'Epic:- '+ATTaskDates[ir-1][0]["0"]
      RAGCol = RAGEpic;
     }

      rowsval= [
        { text:sno,options:{fontSize:5, fill:col, fontFace:'Calibri',valign:'m',align:'c'}},
            { text:levlname,options:{fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:ATTaskDates[ir-1][0]["3"],options:{fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:ATTaskDates[ir-1][0]["4"],options:{fontSize:6, fill:col, fontFace:'Calibri'}},
            { text:ATTaskDates[ir-1][0]["24"],options:{fontSize:6, fill:ATTaskDates[ir-1][0]["23"], fontFace:'Calibri'}},
            { text:'',options:{fontSize:6, fontFace:'Calibri'}}
      ];
    } else if(ir===ATTaskDates.length){
           rowsval= [
        { text:'Transition Closure',options:{colspan: 4, fontSize:6, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m'}},
            { text:'',options:{fontSize:6, fill:TC_RAG, fontFace:'Calibri'}},
            { text:'',options:{fontSize:6, fontFace:'Calibri'}}
      ];
    }  else if(ir===1){
      rowsval= [
   { text:'Overall Transition Plan (OTP)',options:{colspan: 4, fontSize:6, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m'}},
          { text:'',options:{fontSize:6, fill:Service_RAG, fontFace:'Calibri'}},
       { text:'',options:{fontSize:6, fontFace:'Calibri'}}
 ];} else if(ir===2){
  rowsval= [
{ text:'Sprint 0',options:{colspan: 4, fontSize:6, fill:RAGOTPSprintTC, fontFace:'Calibri',valign:'m'}},
    { text:'',options:{fontSize:6, fill:Sprint_RAG, fontFace:'Calibri'}},
   { text:'',options:{fontSize:6, fontFace:'Calibri'}}
];
}
 
 
    for( let ic=1+((inumc-1)*NoofColsh); ic<= collp; ic++){ 
      rowsval.push({ text:'',options:{fontSize:6, fontFace:'Calibri'}})
    }

    var planflgsg='';
    var Learnflgsg='';
    var STplanflgsg='';
    var STImpflgsg='';
    var STDefflgsg='';

   // if((ir ===1) && (inumc===1)){
    if((inumc===1)){
      if(((new Date(ATTaskDates[ir-1][0]["5"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["5"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["6"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["6"]) <= new Date(nextFridayF[0])))){
       rowsval[3] = ( { text:KTColorsPahse[0],options:{fill:KTColors[0],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["7"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["7"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["8"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["8"]) <= new Date(nextFridayF[0])))){
        rowsval[3] = ( { text:KTColorsPahse[1],options:{fill:KTColors[1],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["9"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["9"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["10"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["10"]) <= new Date(nextFridayF[0])))){
        planflgsg='Yes';
        rowsval[6] = ( { text:KTColorsPahse[2],options:{fill:KTColors[2],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["11"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["11"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["12"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["12"]) <= new Date(nextFridayF[0])))){
        Learnflgsg='Yes';
        if((planflgsg==='Yes')){
          rowsval[6] = ( { text:'P-L',options:{fill:KTColors[2],fontSize:4, font_face:'Calibri'}})
        }else{  
        rowsval[6] = ( { text:KTColorsPahse[3],options:{fill:KTColors[3],fontSize:4, fontFace:'Calibri'}})
        }
      }
      if(((new Date(ATTaskDates[ir-1][0]["13"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["13"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["14"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["14"]) <= new Date(nextFridayF[0])))){
        if((Learnflgsg==='Yes')){
          rowsval[6] = ( { text:'L-PE',options:{fill:KTColors[3],fontSize:3, font_face:'Calibri'}})
        }else if((planflgsg==='Yes') && (Learnflgsg==='Yes')){
          rowsval[6] = ( { text:'P-L-PE',options:{fill:KTColors[4],fontSize:2, font_face:'Calibri'}})
        }else{  
        rowsval[6] = ( { text:KTColorsPahse[4],options:{fill:KTColors[4],fontSize:4, fontFace:'Calibri'}})
        }
      }

      //ST Start
      if(((new Date(ATTaskDates[ir-1][0]["15"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["15"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["16"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["16"]) <= new Date(nextFridayF[0])))){
        STplanflgsg='Yes';
        rowsval[6] = ( { text:KTColorsPahse[7],options:{fill:KTColors[7],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["17"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["17"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["18"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["18"]) <= new Date(nextFridayF[0])))){
        STDefflgsg='Yes';
        if((STplanflgsg==='Yes')){
          rowsval[6] = ( { text:'P-D',options:{fill:KTColors[7],fontSize:3, font_face:'Calibri'}})
        }else{  
        rowsval[6] = ( { text:KTColorsPahse[8],options:{fill:KTColors[8],fontSize:4, fontFace:'Calibri'}})
        }
      }
      if(((new Date(ATTaskDates[ir-1][0]["19"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["19"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["20"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["20"]) <= new Date(nextFridayF[0])))){
        STImpflgsg='Yes';
        if((STplanflgsg==='Yes') && (STDefflgsg==='Yes')){
         rowsval[6] = ( { text:'P-D-I',options:{fill:KTColors[9],fontSize:2, font_face:'Calibri'}})
        }else if((STDefflgsg==='Yes')){
          rowsval[6] = ( { text:'D-I',options:{fill:KTColors[8],fontSize:3, font_face:'Calibri'}})
        }else if((STplanflgsg==='Yes')){
          rowsval[6] = ( { text:'P-I',options:{fill:KTColors[7],fontSize:3, font_face:'Calibri'}})
        }else{  
        rowsval[6] = ( { text:KTColorsPahse[9],options:{fill:KTColors[9],fontSize:3, fontFace:'Calibri'}})
        }
      }
      if(((new Date(ATTaskDates[ir-1][0]["21"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["21"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["22"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("YYYY-MM-DD"))) && (new Date(ATTaskDates[ir-1][0]["22"]) <= new Date(nextFridayF[0])))){
        if((STplanflgsg==='Yes') && (STImpflgsg==='Yes') && (STDefflgsg==='Yes')){
         rowsval[6] = ( { text:'P-D-I-H',options:{fill:KTColors[10],fontSize:2, font_face:'Calibri'}}) 
        }else if((STImpflgsg==='Yes') && (STDefflgsg==='Yes')){
          rowsval[6] = ( { text:'D-I-H',options:{fill:KTColors[8],fontSize:2, font_face:'Calibri'}}) 
        }else if((STImpflgsg==='Yes')){
          rowsval[6] = ( { text:'I-H',options:{fill:KTColors[9],fontSize:3, font_face:'Calibri'}})
        }else if((STDefflgsg==='Yes')){
          rowsval[6] = ( { text:'D-H',options:{fill:KTColors[9],fontSize:2, font_face:'Calibri'}})       
        }else if((STplanflgsg==='Yes')){
          rowsval[6] = ( { text:'P-H',options:{fill:KTColors[8],fontSize:3, font_face:'Calibri'}})
        }else{
          rowsval[6] = ( { text:KTColorsPahse[10],options:{fill:KTColors[10],fontSize:3, fontFace:'Calibri'}})
        }
      }
      if(((new Date(ATTaskDates[ir-1][0]["25"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["25"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["26"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["26"]) <= new Date(nextFridayF[0])))){
        rowsval[3] = ( { text:KTColorsPahse[5],options:{fill:KTColors[5],fontSize:4, fontFace:'Calibri'}})
      }
      if(((new Date(ATTaskDates[ir-1][0]["28"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["28"]) <= new Date(nextFridayF[0])))  || ((new Date(ATTaskDates[ir-1][0]["29"]) >= new Date(moment(TransAccountVal[0]["TransStartDt"]).format("MM-DD-YY"))) && (new Date(ATTaskDates[ir-1][0]["29"]) <= new Date(nextFridayF[0])))){
        rowsval[6] = ( { text:KTColorsPahse[6],options:{fill:RAGCol,fontSize:4, fontFace:'Calibri'}})
      }
    }
  
    var arrcntS ='';
    var arrcntE ='';

  // Loop for array values of Service, sprint, AT-Plan, AT-Learn, AT-Perform, StPlan, ST-IMPLEMENT, ST-DEFINE, ST-HANDOVER,  epic/sprint/application array

    var lopArr = [5, 7, 9, 11, 13, 25, 28, 15, 17, 19, 21]
    var lopArrST = [9, 11, 13,15, 17, 19, 21]
    var KTColorsPahseC = ['P', 'L', 'PE','P', 'D', 'I', 'H']

    var planflg='';
    var Learnflg='';
    var STplanflg='';
    var STImpflg='';
    var STDefflg='';
   
    for( let la=0; la< lopArr.length; la++){ 
      arrcntS = lopArr[la]
      arrcntE= lopArr[la]+1;

      if((la===0) || (la===1) || (la===5)){
        var colcnt = 3
      }else{
        var colcnt = 6
      }
     if (inumc ===1) {
       var strow =(1+(inumc-1)*NoofColsh)
       var endrow = collp
       var countcell =1
      
     } else {
      var strow =(2+(inumc-1)*NoofColsh)
      var endrow = collp+1
      var countcell =0      
     }

      for( let icb=strow; icb<= endrow; icb++){ 

        var Lval ='';

        for( let laST=0; laST< lopArrST.length; laST++){  
           arrcntS1 = lopArrST[laST]
           arrcntE1 = lopArrST[laST]+1;
          if(((new Date(ATTaskDates[ir-1][0][arrcntS1]) <= new Date(moment(dt1).day(12+((icb-1)*7)).format("YYYY-MM-DD"))) 
      && (new Date(ATTaskDates[ir-1][0][arrcntE1])>= new Date(moment(dt1).day(8+((icb-1)*7)).format("YYYY-MM-DD"))))  
      ){ 
         if(Lval == ''){
            Lval=KTColorsPahseC[laST]
          }else {
            Lval=Lval+'-'+KTColorsPahseC[laST]
          }                  
      }          
    }
       
      if(((new Date(ATTaskDates[ir-1][0][arrcntS]) <= new Date(moment(dt1).day(12+((icb-1)*7)).format("YYYY-MM-DD"))) 
      && (new Date(ATTaskDates[ir-1][0][arrcntE])>= new Date(moment(dt1).day(8+((icb-1)*7)).format("YYYY-MM-DD"))))  
      ){
         if(lopArr[la] === 28){
          rowsval[countcell+colcnt] = ( { text:Lval,options:{fill:RAGCol,fontSize:4, font_face:'Calibri'}})
        }else if(lopArr[la] === 25){
          rowsval[countcell+colcnt] = ( { text:'',options:{fill:RAGTranCloseGreen,fontSize:4, font_face:'Calibri'}})
        }else if(lopArr[la] === 5){          
          rowsval[countcell+colcnt] = ( { text:'',options:{fill:optOTP,fontSize:4, font_face:'Calibri'}})
        }else if(lopArr[la] === 7){
          rowsval[countcell+colcnt] = ( { text:'',options:{fill:optSprint,fontSize:4, font_face:'Calibri'}})
        }else{
          rowsval[countcell+colcnt] = ( { text:Lval,options:{fill:optATPlan,fontSize:4, font_face:'Calibri'}}) 
        }
      }      
       countcell =countcell+1 
    }
   }  
   slrow.push(rowsval) 
 } 
 
 slide2.addTable( slrow, {colW:colW,rowH:rowH ,fontFace:'Calibri',fontSize:6, x:0.3, y:0.7} );
 

slide2.addText('Period', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.5, y:0.48, bold: true});
slide2.addText('Wk.Start', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.5, y:0.93});
slide2.addText('Wk.End', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.5, y:1.33});

var xdir ='';
if(inumc === 1){
  xdir =3.9;
slide2.addText('WK0-1', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.7, y:0.5, bold: true});
slide2.addText(moment(TransAccountVal[0]["TransStartDt"]).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.7, y:0.93});
slide2.addText(nextFriday[0], {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:3.7, y:1.33});

slide2.addText('WK0', {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.48, bold: true});
slide2.addText(moment(dt1).day(8).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.93});
slide2.addText(moment(dt1).day(12).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:1.33});
xdir = xdir+0.2

}else{
  xdir =3.7;
}
  
for( let icc=1+((inumc-1)*NoofColsh); icc<= inumendc; icc++){ 
    var wkcol = icc;
    
    if(Currentweeks === wkcol-1){
      var x = xdir;
    }
    slide2.addText('WK'+wkcol, {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.48, bold: true});
    slide2.addText(moment(dt1).day(8+(icc*7)).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:0.93});
    slide2.addText(moment(dt1).day(12+(icc*7)).format("DD-MM-YY"), {rotate:270 ,fontSize:6,fontFace:'Calibri', w:1.0,x:xdir, y:1.33});
    xdir = xdir+0.2
}
if(Currentweeks <= TransNoofweeks+1){
  if(Currentweeks === 0){
    
      var CW= 0.19*(rowH.length) +2.15;
      var xa = 3.88 + 0.2*(Currentweeks+1);
      var xt =xa;      
      slide2.addShape(pptx.shapes.UP_DOWN_ARROW,{ x:xa, y:0.45, w:0.23, h:CW, line:'660099', lineSize:2 });
      slide2.addText('Current Week', {fontSize:7,fontFace:'Calibri', w:1.0,x:xt, y:0.29, bold: true});
  }else if (inumc===currentwkslide ) {
      if(currentwkslide === 1){
        var CW= 0.19*(rowH.length) +2.15;
        var xa = 3.88 + 0.2*(Currentweeks+1);
        var xt =xa;
               
  }else{
   
        var CW= 0.19*(rowH.length) +2.15;
       // var xa = 3.9+ 0.200*(((currentwkslide-1)*NoofColsh)-Currentweeks );
       var xa = 3.88 + 0.2*(Currentweeks-1-(NoofColsh*(currentwkslide-1)));
             var xt =xdir+0.1;
  } 
  
  slide2.addShape(pptx.shapes.UP_DOWN_ARROW,{ x:xa, y:0.50, w:0.23, h:CW, line:'660099', lineSize:2 });
  slide2.addText('Current Week', {fontSize:7,fontFace:'Calibri', w:1.0,x:xt, y:0.29, bold: true});
  }
  }
  } 
  
  } 

}else{
  //need to write the code for no records avaibale
  colW=[];
  row1 =[];
  slrow=[];

  slide2 = pptx.addNewSlide();
  TransSchProgressPPTTemplate(pptx, slide2, TransAccount, createdDate, TransNoofweeks, slrow, optOTP, optSprint, optATPlan, optATLearn, optATPerform,RAGBlue,RAGGreen,RAGAmber,RAGRed,RAGGray,RAGcommon,PlanLeran,LearnPerform,PlanLeranPerform,RAGEpic,RAGSprint)

  row1 =[{ text:'#',options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'EPIC',options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'} },
  { text:'Sprint' ,options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Application Name' ,options:{bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c'}},
  { text:'Start Date',options:{ bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c',valign:'m',align:'c'} },
  { text:'End  Date',options:{ bold:true,fill:'#E2EFDA',fontSize:6,valign:'m',align:'c',valign:'m',align:'c'} },
 ];

  slrow.push(row1)
  slrow.push([{ text:'No Transition Schedule.',options:{colspan:6,fontSize:6,valign:'m'}}])
  colW=[0.2,0.4,0.4,1.0,0.6,0.6]

  slide2.addTable( slrow, {autoPage:false,colW:colW,fontFace:'Calibri',fontSize:6, x:0.3, y:0.7} );
}

pptx.save(filename);
     
}, 12000)  
  
setTimeout(()=>{
  // filename = "TransitionSchedule-ProgressView-"+USername.replace(/\s/g,'');
  //     var filePath = __dirname+'\\'+filename+'.pptx';
     try {
      //  // console.log('remove2' +filePath)
      fs.unlinkSync(filePath)
      //file removed
    } catch(err) {
      console.error(err)
    }
}, 21000) 

setTimeout(()=>{  
  // filename = "TransitionSchedule-ProgressView-"+USername.replace(/\s/g,'');
  //     var filePath = __dirname+'\\'+filename+'.pptx';
    return res.sendFile(filePath);
}, 20000) 
});
//Transition Schedule Progress PPT End
//***************************** PPT CODE ************************************************
    
  app.post('/getTRA_AdminListAdd',(req,res)=>{
      var TRA_UNID = null;    
      var Risk_ID =req.body.Risk_ID;
      var Risk_Category = req.body.Risk_Category;
      var Risk_Attribute = req.body.Risk_Attribute;    
      var Planned_Mitigation_Action = req.body.Planned_Mitigation_Action;    
      var CREATED_BY  = req.body.createdBy;
      var  LAST_UPDATED_BY = req.body.modifiedBy;
      var dt=moment(new Date());
      var CREATED_AT=moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
      
  
    querygetTRA_AdminListAdd ="insert into transition_risk_analyzer_admin values ("+TRA_UNID +",'"
    + Risk_ID + "','"
    + Risk_Category +"','"
    +Risk_Attribute+"','"
    +Planned_Mitigation_Action+"','"
    + CREATED_AT + "','"
    + LAST_UPDATED_AT +"','"
    +CREATED_BY+"','"  
    + LAST_UPDATED_BY + "')";
  //console.log(querygetTRA_AdminListAdd);
    pool.getConnection().then((conn) =>{
        conn.query(querygetTRA_AdminListAdd).then((querygetTRA_AdminListAddResult)=>{
          res.send({"save" : "success"} )
          conn.end();
        }).catch(err=>{
          console.log(err
            )
          res.send({"save" : "Fail"} )
          conn.end();
        })
    }).catch(err=>{
      //not Connected
    })
  })
  
  app.put('/getTRA_AdminListUpdate',(req,res)=>{
    var TRA_UNID = req.body.TRA_UNID;    
    var Risk_ID =req.body.Risk_ID;
    var Risk_Category = req.body.Risk_Category;
    var Risk_Attribute = req.body.Risk_Attribute;    
    var Planned_Mitigation_Action = req.body.Planned_Mitigation_Action;      
    var  LAST_UPDATED_BY = req.body.modifiedBy;
    var dt=moment(new Date());  
    var  LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");  
  
  querygetTRA_AdminListUpdate ="Update transition_risk_analyzer_admin SET Risk_ID='"+Risk_ID
  +"',Risk_Category='"+Risk_Category
  +"',Risk_Attribute='"+Risk_Attribute
  +"',Planned_Mitigation_Action='"+Planned_Mitigation_Action
  +"',LAST_UPDATED_BY='"+LAST_UPDATED_BY
  +"',LAST_UPDATED_AT='"+LAST_UPDATED_AT
  +"' where TRA_UNID='"+TRA_UNID+"'";
  //console.log(querygetTRA_AdminListUpdate);
  
  pool.getConnection().then((conn) =>{
    conn.query(querygetTRA_AdminListUpdate).then((querygetTRA_AdminListUpdateResult)=>{
      res.send({"insert" : "success"} )
      conn.end();
    }).catch(err=>{
      console.log(err
        )
      res.send({"insert" : "Fail"} )
      conn.end();
    })
  }).catch(err=>{
  //not Connected
  })
  
  })
  
  app.delete('/getTRA_AdminListDelete/:TRA_UNID',(req,res)=>{
    //console.log("delete")
    var TRA_UNID = req.params.TRA_UNID;      
  querygetTRA_AdminListDelete ="Delete from transition_risk_analyzer_admin where TRA_UNID='"+TRA_UNID+"'";
  //console.log(querygetTRA_AdminListDelete);
  pool.getConnection().then(conn => {        
    conn.query(querygetTRA_AdminListDelete).then((querygetTRA_AdminListDeleteResult) => {
        res.send({"Delete" : "success"} )
        conn.end();
      })
      .catch(err => {
        //handle error
        res.send({"Delete" : "Fail" })
        conn.end();
      })    
  }).catch(err => {
    //not connected
  });
  })
  
  // *********************************** Transition Risk Analyzer Admin ***********************************
  
  //***********************************Overall Tran Dash Report Start ***************************************************************
  app.get("/getexportOverallTranDash/:UserNm/:IntegrationID/:AccntNm", (req, res) => {

    var UserNm = req.params.UserNm;
    var ATDashHead = [];
    var ATDashData = [];
    var ATDashDataApp = [];
    var ATDashDataHealth = [];
    var ATDashDataRAID = [];
    var IntegrationID = req.params.IntegrationID;
    var AccntNm = req.params.AccntNm;
  
    var STDashDataApp = [];
    var STDashDataHealth = [];
    var STDashDataRAID = [];
    var STDashHead = [];
  
    var OAllDashDataApp = [];
    var OAllDashDataRAID = [];
  
    fileOveralSchedule = "OverallTransitionDashboard-" + AccntNm.replace(/\s/g, '') + ".xlsx"
    var filePath = __dirname + '\\' + fileOveralSchedule;
    var options = {
      sheetView: {
        'showGridLines': false, // Flag indicating whether the sheet should have gridlines enabled or disabled during view
      }
    };

    //AT Parameter
    setTimeout(() => {
      ATDashHeadQuerry = "SELECT PARAMETER_NAME FROM parameter_custom  " +
        "WHERE TRANSITION_ID='" + IntegrationID + "' AND ADOPTED_PARAMETER in ('Y', 'NA')" +
        " AND RESOURCE_TYPE_MEASURED ='application'"

      pool.getConnection().then(conn => {
          conn.query(ATDashHeadQuerry).then((ATDashHeadQuerryRes) => {
            ATDashHead = JSON.parse(JSON.stringify(ATDashHeadQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    //ST Parameter
    setTimeout(() => {
      var STSCopeLevel = "('ST-scope','ST-scope-Process','ST-scope-Metrics','ST-scope-Reports','ST-scope-Tools','ST-scope-Governance')";

      STDashHeadQuerry = "SELECT PARAMETER_NAME FROM parameter_custom  " +
        "WHERE TRANSITION_ID='" + IntegrationID + "' AND ADOPTED_PARAMETER in ('Y', 'NA')" +
        " AND RESOURCE_TYPE_MEASURED in " + STSCopeLevel + ";"
      pool.getConnection().then(conn => {
          conn.query(STDashHeadQuerry).then((STDashHeadQuerryRes) => {
            STDashHead = JSON.parse(JSON.stringify(STDashHeadQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    //AT Dashboard data
    setTimeout(() => {
      ATDashDataAppQuerry = "SELECT ep.epicName, sp.sprintName, ai.AppName, ai.appCategory, st.status," +
        "st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date, st.RePlan_End_Date, st.Actual_Start_Date," +
        "st.Actual_End_Date,st.ktSummary, st.Remarks," +
        "st.Reason_Not_Green, st.goto_Green, st.Owner_Name " +
        "FROM application_information ai " +
        "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID " +
        "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        "LEFT OUTER JOIN appln_level_sprint_plan st " +
        "ON st.Scope_UNID = sc.Scope_UNID " +
        "WHERE ai.IntegrationID='" + IntegrationID + "' and sc.Scope_Level='AT' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC";
  
      pool.getConnection().then(conn => {
          conn.query(ATDashDataAppQuerry).then((ATDashDataAppQuerryRes) => {
            ATDashDataApp = JSON.parse(JSON.stringify(ATDashDataAppQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)
  
    //ST Dashboard data
    setTimeout(() => {
      STDashDataQuerry = "SELECT ep.epicName, sp.sprintName," +
        "concat(stc.STScopeLevel,'-',stc.STScope,'-',stc.STDetailedScope,'-',stc.STScopeActivity) as STScope," +
        "st.status,st.Plan_Start_Date, " +
        "st.Plan_End_Date, st.Replan_Start_Date, st.RePlan_End_Date, st.Actual_Start_Date," +
        "st.Actual_End_Date,st.ktSummary, st.Remarks,st.Reason_Not_Green, st.goto_Green, sc.Scope_Level," +
        "st.Owner_Name FROM masterstinfo stc" +
        " LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID " +
        "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID " +
        "WHERE stc.IntegrationID='" + IntegrationID + "' and sc.Scope_Level='ST' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC"
  
      pool.getConnection().then(conn => {
          conn.query(STDashDataQuerry).then((STDashDataQuerryRes) => {
            STDashDataApp = JSON.parse(JSON.stringify(STDashDataQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)
  
    //Overall Dashboard data
    setTimeout(() => {
      OAllDashDataQuerry = "SELECT ep.epicName, sp.sprintName," +
        "sc.Scope_BacklogActivity , st.status,st.Plan_Start_Date, " +
        "st.Plan_End_Date, st.Replan_Start_Date, st.RePlan_End_Date, st.Actual_Start_Date," +
        "st.Actual_End_Date,st.ktSummary, st.Remarks,st.Reason_Not_Green, st.goto_Green, sc.Scope_Level," +
        "st.Owner_Name FROM sprintscope sc " +
        "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        "LEFT OUTER JOIN appln_level_sprint_plan st ON st.Scope_UNID = sc.Scope_UNID " +
        "WHERE sc.Scope_IntegrationID='" + IntegrationID + "'and sc.Scope_Level='Others' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC"
  
      pool.getConnection().then(conn => {
          conn.query(OAllDashDataQuerry).then((OAllDashDataQuerryRes) => {
            OAllDashDataApp = JSON.parse(JSON.stringify(OAllDashDataQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    // AT health Parameter Data
    setTimeout(() => {
      ATDashDataHealthQuerry = "SELECT ep.epicName, sp.sprintName, ai.AppName, pc.PARAMETER_NAME, rt.RAG " +
        "FROM application_information ai " +
        "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID " +
        "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        "LEFT OUTER JOIN readiness_question_tracker rt " +
        "ON rt.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE=ai.AppUNID " +
        "LEFT OUTER JOIN parameter_custom pc ON pc.PARAMETER_CUSTOM_ID = rt.PARAMETER_CUSTOM_ID " +
        "WHERE ai.IntegrationID='" + IntegrationID + "' and sc.Scope_Level='AT'";

      pool.getConnection().then(conn => {
          conn.query(ATDashDataHealthQuerry).then((ATDashDataHealthQuerryRes) => {
            ATDashDataHealth = JSON.parse(JSON.stringify(ATDashDataHealthQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    // ST health Parameter Data
    setTimeout(() => {
      STDashDataHealthQuerry = "SELECT ep.epicName, sp.sprintName," +
        "concat(stc.STScopeLevel,'-',stc.STScope,'-',stc.STDetailedScope,'-',stc.STScopeActivity) as STScope," +
        "pc.PARAMETER_NAME, rt.RAG " +
        "FROM masterstinfo stc" +
        " LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID" +
        " LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        " LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID" +
        " LEFT OUTER JOIN readiness_question_tracker rt " +
        " ON rt.READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE=stc.MasterSTInfoid" +
        " LEFT OUTER JOIN parameter_custom pc ON pc.PARAMETER_CUSTOM_ID = rt.PARAMETER_CUSTOM_ID " +
        " WHERE stc.IntegrationID='" + IntegrationID + "' and sc.Scope_Level='ST'";

      pool.getConnection().then(conn => {
          conn.query(STDashDataHealthQuerry).then((STDashDataHealthQuerryRes) => {
            STDashDataHealth = JSON.parse(JSON.stringify(STDashDataHealthQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    //AT Raid
    setTimeout(() => {
      ATDashRaidQuerry = "SELECT ep.epicName, sp.sprintName, ai.AppName, rd.Type," +
        "rd.Status, rd.TargetDate, rd.ImpactConsequences " +
        "FROM application_information ai " +
        "LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID " +
        "LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        "LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        "LEFT OUTER JOIN raid rd " +
        "ON rd.epicUNID=sc.epicUNID AND rd.sprintUNID=sc.sprintUNID AND rd.AppUNID=sc.AppUNID " +
        "WHERE ai.IntegrationID='" + IntegrationID + "' AND rd.status = 'Open'";
  
      pool.getConnection().then(conn => {
          conn.query(ATDashRaidQuerry).then((ATDashRaidQuerryRes) => {
            ATDashDataRAID = JSON.parse(JSON.stringify(ATDashRaidQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)

    //ST Raid
    setTimeout(() => {
      STDashRaidQuerry = "SELECT ep.epicName, sp.sprintName, " +
        "concat(stc.STScopeLevel,'-',stc.STScope,'-',stc.STDetailedScope,'-',stc.STScopeActivity) as STScope," +
        "rd.Type,rd.Status, rd.TargetDate, rd.ImpactConsequences " +
        "FROM masterstinfo stc " +
        "LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID" +
        " LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        " LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        " LEFT OUTER JOIN raid rd " +
        " ON rd.epicUNID=sc.epicUNID AND rd.sprintUNID=sc.sprintUNID AND rd.MasterSTInfoid=sc.STUNID " +
        " WHERE stc.IntegrationID='" + IntegrationID + "' AND rd.status = 'Open'";
      pool.getConnection().then(conn => {
          conn.query(STDashRaidQuerry).then((STDashRaidQuerryRes) => {
            STDashDataRAID = JSON.parse(JSON.stringify(STDashRaidQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)
  
    //Overall Raid
    setTimeout(() => {
      OAllDashRaidQuerry = "SELECT ep.epicName, sp.sprintName, sc.Scope_BacklogActivity," +
        "rd.Type,rd.Status, rd.TargetDate, rd.ImpactConsequences " +
        "FROM sprintscope sc " +
        " LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
        " LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
        " LEFT OUTER JOIN raid rd " +
        " ON rd.epicUNID=sc.epicUNID AND rd.sprintUNID=sc.sprintUNID and rd.scopeOverall=sc.Scope_UNID " +
        " WHERE sc.Scope_IntegrationID='" + IntegrationID + "' AND rd.status = 'Open'";
  
      pool.getConnection().then(conn => {
          conn.query(OAllDashRaidQuerry).then((OAllDashRaidQuerryRes) => {
            OAllDashDataRAID = JSON.parse(JSON.stringify(OAllDashRaidQuerryRes));
            conn.end();
          })
        })
        .catch(err => {
          res.send({
            "Fetch": "Fail"
          })
          conn.end();
        })
        .catch(err => {
          //not connected
        })
    }, 2000)
    // end  
  
    setTimeout(() => {
  
      var wb = new xl.Workbook();
      // Add Worksheets to the workbook
      var border_col = ATDashHead.length + STDashHead.length + 17
      var wsOver = wb.addWorksheet('Overall Transition Summary', options);
  
      wsOver.cell(2, 2).string("OVERALL TRANSITION DASHBOARD");
      var myStyleOver = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#d2d2d2',
          fgColor: '#d2d2d2',
        },
        font: {
          name: 'Tahoma',
          size: 14,
          bold: true,
          color: '#7f7f7f',
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
          wrapText: true
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      wsOver.cell(2, 2, 2, border_col, true).style(myStyleOver)
      //column widths
      wsOver.cell(Row, 5).string("Transition schedule");
      wsOver.row(1).setHeight(3);
      for (let i = 0; i < border_col; i++) {
        if (i === 0) {
          wsOver.column(i + 1).setWidth(0.35);
        } else if (i === 1) {
          wsOver.column(i + 1).setWidth(4.8);
        } else if (i === 2) {
          wsOver.column(i + 1).setWidth(12);
        } else if (i === 3) {
          wsOver.column(i + 1).setWidth(0.4);
        } else {
          wsOver.column(i + 1).setWidth(3.0);
        }
  
      }     

      var myStyleHead = wb.createStyle({
      font: {
        name: 'Tahoma',
        size: 8,
      },
      alignment: {
        horizontal: 'center',
        vertical: 'center',
        wrapText: true
      },
      border: {
        left: {
          style: 'thin'
        },
        right: {
          style: 'thin'
        },
        top: {
          style: 'thin'
        },
        bottom: {
          style: 'thin'
        }
      }
      });
      var myStyleHeading = wb.createStyle({
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'bottom',
          textRotation: 90
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });

     var Epiclength = [];
     var Row = 7;
     var col = 6;
     var rowh = 11;
     var stCol = 0;
     var EpicArry = []; 
     wsOver.row(5).setHeight(22);
     wsOver.row(6).setHeight(5);
     wsOver.row(8).setHeight(5);
     wsOver.row(10).setHeight(5);
     wsOver.cell(9, 3).string("Transition Health"); 
     
    // Application Trantion table start 
    if (ATDashDataApp.length > 0) {       
      EpicArry = [];  
      wsOver.cell(Row, 5).string("Transition schedule");  
      for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
        wsOver.cell(Row, col).string(ATDashHead[headcnt]['PARAMETER_NAME']);
        col = col + 1;
      }
  
      for (let headcnt = 0; headcnt < ATDashDataApp.length; headcnt++) {
        if (EpicArry.includes(ATDashDataApp[headcnt]['epicName']) === false) {
          EpicArry.push(ATDashDataApp[headcnt]['epicName'])
        }
      }
  
      wsOver.cell(Row, col).string("Risks, Issues, Action & Dependency");     
      wsOver.cell(Row - 2, 5, Row - 2, col, true).string('Application Transition (People & Skills)');
      wsOver.cell(Row - 2, 5, Row - 2, col).style(myStyleHead);
      wsOver.cell(9, 5, 9, col).style(myStyleHead);
      wsOver.cell(Row, 5, Row, col).style(myStyleHeading);
  
      //EPIC population  
          for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
        wsOver.cell(rowh, 3).string(EpicArry[Epiccount]);
        rowh = rowh + 1
      }
  
      Epiclength.push({
        stCol: 5,
        EndCol: col
      })


      //Seperate AT  start //
      rowh=rowh-1
    wsOver.cell(rowh+2, 2).string("DASHBOARD - APPLICATION TRANSITION");
      wsOver.cell(rowh+2, 2, rowh+2, border_col, true).style(myStyleOver)

      wsOver.cell(rowh+7, 5).string("Transition schedule");  
      colS=6
      
      for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
        wsOver.cell(rowh+7, colS).string(ATDashHead[headcnt]['PARAMETER_NAME']);
        colS = colS + 1;
      }
    
      wsOver.cell(rowh+7, colS).string("Risks, Issues, Action & Dependency");     
      wsOver.cell(rowh+5, 5, rowh+5, col, true).string('Application Transition (People & Skills)');
      wsOver.row(rowh+5).setHeight(22);
      wsOver.row(rowh+6).setHeight(5);
      wsOver.row(rowh+8).setHeight(5);
      wsOver.row(rowh+10).setHeight(5);

       wsOver.cell(rowh+5, 5, rowh+5, colS).style(myStyleHead);
       wsOver.cell(rowh+7, 5, rowh+7, colS).style(myStyleHeading);
      wsOver.cell(rowh+9, 5, rowh+9, colS).style(myStyleHead);
      
  
      //EPIC population   
      wsOver.cell(rowh+9, 3).string("Transition Health"); 
   var rowhATTra=rowh+9
   var rowhATEpic=rowh+11
      for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
        wsOver.cell(rowh+11, 3).string(EpicArry[Epiccount]);
        rowh = rowh + 1
      }
        //End
    } 
    //Application Trantion table End 
    
    // ST Trantion table start 
    if (STDashDataApp.length > 0) {       
        stCol = col + 2
        col = col + 2
        EpicArry = [];
        wsOver.cell(Row, col).string("Transition schedule");
  
        col = col + 1
        for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
          wsOver.cell(Row, col).string(STDashHead[headcnt]['PARAMETER_NAME']);
          col = col + 1;
        }
  
        for (let headcnt = 0; headcnt < STDashDataApp.length; headcnt++) {
          if (EpicArry.includes(STDashDataApp[headcnt]['epicName']) === false) {
            EpicArry.push(STDashDataApp[headcnt]['epicName'])
          }
        }
  
        wsOver.cell(Row, col).string("Risks, Issues, Action & Dependency");
  
        wsOver.cell(Row, stCol, Row, col).style(myStyleHeading)
  
        wsOver.cell(Row - 2, stCol, Row - 2, col, true).string('Service Transition (Process & Tool)');
        wsOver.cell(Row - 2, stCol, Row - 2, col).style(myStyleHead)

                if(Epiclength.length === 0){
          Epiclength.push({
            stCol: 0,
            EndCol: 0
          });
        }
        Epiclength.push({
          stCol: stCol,
          EndCol: col
        });    
        
        //Seperate ST  start //
   rowh=rowh+EpicArry.length+10
   wsOver.cell(rowh+2, 2).string("DASHBOARD - SERVICE PROCESS TRANSITION");
   wsOver.cell(rowh+2, 2, rowh+2, border_col, true).style(myStyleOver)

   wsOver.cell(rowh+7, 5).string("Transition schedule");  
   colS=6
   
   for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
     wsOver.cell(rowh+7, colS).string(STDashHead[headcnt]['PARAMETER_NAME']);
     colS = colS + 1;
   }

   wsOver.cell(rowh+7, colS).string("Risks, Issues, Action & Dependency");     
   wsOver.cell(rowh+5, 5, rowh+5, colS, true).string('Service Transition (Process & Tool)');
   wsOver.row(rowh+5).setHeight(22);
   wsOver.row(rowh+6).setHeight(5);
   wsOver.row(rowh+8).setHeight(5);
   wsOver.row(rowh+10).setHeight(5);

    wsOver.cell(rowh+5, 5, rowh+5, colS).style(myStyleHead);
    wsOver.cell(rowh+7, 5, rowh+7, colS).style(myStyleHeading);
   wsOver.cell(rowh+9, 5, rowh+9, colS).style(myStyleHead);
   

   //EPIC population   
   wsOver.cell(rowh+9, 3).string("Transition Health"); 
   var rowhSTTra=rowh+9
   var rowhSTEpic=rowh+11
   
   for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
     wsOver.cell(rowh+11, 3).string(EpicArry[Epiccount]);
     rowh = rowh + 1
   }
     //End


 
    }
    //ST Trantion table End
    
    // Overall Trantion table start
   
    if (OAllDashDataApp.length > 0) {        
        stCol = col + 2
        col = col + 2
       
        EpicArry = [];
        wsOver.cell(Row, col).string("Transition schedule");
  
        col = col + 1
  
        for (let headcnt = 0; headcnt < STDashDataApp.length; headcnt++) {
          if (EpicArry.includes(STDashDataApp[headcnt]['epicName']) === false) {
            EpicArry.push(STDashDataApp[headcnt]['epicName'])
          }
        }
  
        wsOver.cell(Row, col).string("Risks, Issues, Action & Dependency");
  
        wsOver.cell(Row, stCol, Row, col).style(myStyleHeading)
  
        wsOver.cell(Row - 2, stCol, Row - 2, col, true).string('Others');
        wsOver.cell(Row - 2, stCol, Row - 2, col).style(myStyleHead)

        
        if(Epiclength.length === 0){
          Epiclength.push({
            stCol: 0,
            EndCol: 0
          });
          Epiclength.push({
            stCol: 0,
            EndCol: 0
          });
        }else if(Epiclength.length === 1){
          Epiclength.push({
            stCol: 0,
            EndCol: 0
          });
        } 

        Epiclength.push({
          stCol: stCol,
          EndCol: col
        })  

         
        //Seperate Overal  start //
   rowh=rowh+EpicArry.length+10
   wsOver.cell(rowh+2, 2).string("DASHBOARD - OTHERS");
   wsOver.cell(rowh+2, 2, rowh+2, border_col, true).style(myStyleOver)

   wsOver.cell(rowh+7, 5).string("Transition schedule");  
   colS=6
   
    wsOver.cell(rowh+7, colS).string("Risks, Issues, Action & Dependency");     
   wsOver.cell(rowh+5, 5, rowh+5, colS, true).string('Others');
   wsOver.row(rowh+5).setHeight(22);
   wsOver.row(rowh+6).setHeight(5);
   wsOver.row(rowh+8).setHeight(5);
   wsOver.row(rowh+10).setHeight(5);

    wsOver.cell(rowh+5, 5, rowh+5, colS).style(myStyleHead);
    wsOver.cell(rowh+7, 5, rowh+7, colS).style(myStyleHeading);
   wsOver.cell(rowh+9, 5, rowh+9, colS).style(myStyleHead);
   

   //EPIC population   
   wsOver.cell(rowh+9, 3).string("Transition Health"); 
   var rowhOTra=rowh+9
   var rowhOEpic=rowh+11
   for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
     wsOver.cell(rowh+11, 3).string(EpicArry[Epiccount]);
     rowh = rowh + 1
   }
     //End


    }
    //Overall Trantion table End 

      //legend 
     
      rowh=rowh+EpicArry.length+10
      wsOver.cell(rowh + 2, 3).string("Legends");
  
      var myStyleOverG = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#00FF00',
          fgColor: '#00FF00',
        },
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      var myStyleOverA = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#FFC000',
          fgColor: '#FFC000',
        },
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      var myStyleOverR = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#FF0000',
          fgColor: '#FF0000',
        },
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      var myStyleOverN = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#BFBFBF',
          fgColor: '#BFBFBF',
        },
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      var myStyleOverText = wb.createStyle({
        font: {
          name: 'Tahoma',
          size: 8,
          color: '#808080'
        },
      });
  
      var myStyleOverT = wb.createStyle({
        font: {
          name: 'Tahoma',
          size: 8,
        },
      });

      var myStyleOverB = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#00B0F0',
          fgColor: '#00B0F0',
        },
        font: {
          name: 'Tahoma',
          size: 8,
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
        },
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
      wsOver.cell(rowh + 2, 5).string("G");
      wsOver.cell(rowh + 2, 5).style(myStyleOverG);
      wsOver.cell(rowh + 3, 5).string("A");
      wsOver.cell(rowh + 3, 5).style(myStyleOverA);
      wsOver.cell(rowh + 4, 5).string("R");
      wsOver.cell(rowh + 4, 5).style(myStyleOverR);
      wsOver.cell(rowh + 5, 5).string("N");
      wsOver.cell(rowh + 5, 5).style(myStyleOverN);
  
      wsOver.cell(rowh + 2, 6).string("On Track/ Completed");
      wsOver.cell(rowh + 3, 6).string("Delayed/ In-progress");
      wsOver.cell(rowh + 4, 6).string("Caution/ Potential Impact");
      wsOver.cell(rowh + 5, 6).string("Not Initiated / Not Available");  
  
      wsOver.cell(rowh, 2, rowh, border_col).style({
        border: {
          bottom: {
            style: 'dashed',
            color: '#92D050'
          },
        }
      });
  
      wsOver.cell(3, 2, rowh, 2).style({
        border: {
          left: {
            style: 'dashed',
            color: '#92D050'
          },
        }
      });
  
      wsOver.cell(3, border_col + 1, rowh, border_col + 1).style({
        border: {
          left: {
            style: 'dashed',
            color: '#92D050'
          },
        }
      })
  
      wsOver.cell(5, 3, rowh + 5, border_col + 1).style(myStyleOverT);
      wsOver.cell(rowh + 2, 6, rowh + 5, 6).style(myStyleOverText);
      wb.write(fileOveralSchedule);

      //Commond Code used-------------------
      var RAID = ['Risk', 'Issue', 'Action', 'Dependency']

      //Commond Code used-------------------
      //-------------AT Stream Start--------------------------------------------
      // 2nd sheet
      var wsAT = wb.addWorksheet('AT Dashboard', options);
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
      wb.write(fileOveralSchedule);
  
      var myStyle = wb.createStyle({
        fill: {
          type: 'pattern',
          patternType: 'solid',
          bgColor: '#1D3649',
          fgColor: '#1D3649',
        },
        font: {
          name: 'Arial',
          size: 8,
          bold: true,
          color: 'FFFFFF',
        },
        alignment: {
          horizontal: 'center',
          vertical: 'center',
          wrapText: true
        },
      });
  
      //worksheet1 data populate
      const sheet1data = [{
          header: 'S.No',
          width: 5
        },
        {
          header: 'EPIC',
          width: 6
        },
        {
          header: 'Sprint',
          width: 7
        },
        {
          header: 'App Name',
          width: 20
        },
        {
          header: 'App Category',
          width: 9
        },
        {
          header: 'RAG',
          width: 11.5
        },
        {
          header: 'Transition Schedule',
          width: 15
        },
        {
          header: 'Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Summary',
          width: 25
        },
        {
          header: 'Remarks',
          width: 25
        }
      ]
      for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
        sheet1data.push({
          header: ATDashHead[headcnt]['PARAMETER_NAME'],
          width: 9.5
        })
      }
  
      for (let RAIDcnt = 0; RAIDcnt < RAID.length; RAIDcnt++) {
        sheet1data.push({
          header: RAID[RAIDcnt],
          width: 8.7
        })
      }
  
      sheet1data.push({
        header: 'Reason for Not Green	',
        width: 25
      }, {
        header: 'Go to Green Plan',
        width: 25
      }, {
        header: 'Action Owner',
        width: 25
      })
  
      var sheet1Row = 1;
      for (let i = 0; i < sheet1data.length; i++) {
        wsAT.cell(sheet1Row, i + 1).string(sheet1data[i].header);
        wsAT.cell(sheet1Row, i + 1).style(myStyle);
        wsAT.column(i + 1).setWidth(sheet1data[i].width);
      }
  
      //for loop
      wsAT.cell(1, 1, 1, sheet1data.length).style({
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });
  
   //Data population sheet1 Start--------
    if (ATDashDataApp.length > 0) {
  
        var ATDashDataFinal = []
        var workbook = new Excel.Workbook();
        for (let APPC = 0; APPC < ATDashDataApp.length; APPC++) {
          ATDashData = [];
          ATDashData.push(ATDashDataApp[APPC]['epicName'])
          ATDashData.push(ATDashDataApp[APPC]['sprintName'])
          ATDashData.push(ATDashDataApp[APPC]['AppName'])
          ATDashData.push(ATDashDataApp[APPC]['appCategory'])
          ATDashData.push(ATDashDataApp[APPC]['status'])
  
          var dt = moment(ATDashDataApp[APPC]['Plan_Start_Date']);
          var Plan_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(Plan_Start_Date)
  
          var dt = moment(ATDashDataApp[APPC]['Plan_End_Date']);
          var Plan_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(Plan_End_Date)
  
          var dt = moment(ATDashDataApp[APPC]['Actual_Start_Date']);
          var Act_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(Act_Start_Date)
  
          var dt = moment(ATDashDataApp[APPC]['Actual_End_Date']);
          var Act_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(Act_End_Date)
  
          ATDashData.push(ATDashDataApp[APPC]['ktSummary'])
          ATDashData.push(ATDashDataApp[APPC]['Remarks'])
          ATDashData.push(ATDashDataApp[APPC]['Reason_Not_Green'])
          ATDashData.push(ATDashDataApp[APPC]['goto_Green'])
          ATDashData.push(ATDashDataApp[APPC]['Owner_Name'])
  
          var RAG = []
          for (let col = 0; col < ATDashHead.length; col++) {
            for (let APPH = 0; APPH < ATDashDataHealth.length; APPH++) {
              if (ATDashHead[col]['PARAMETER_NAME'] === ATDashDataHealth[APPH]['PARAMETER_NAME'] &&
                (ATDashDataHealth[APPH]['AppName'] === ATDashDataApp[APPC]['AppName'])) {
                if (RAG.includes(ATDashDataHealth[APPH]['PARAMETER_NAME'] +
                    '-' + ATDashDataHealth[APPH]['RAG'] +
                    '-' + ATDashDataApp[APPC]['AppName']) === false) {
                  RAG.push(ATDashDataHealth[APPH]['PARAMETER_NAME'] + '-' +
                    ATDashDataHealth[APPH]['RAG'] + '-' +
                    ATDashDataApp[APPC]['AppName'])
  
                }
  
              }
            }
          }
  
  
          if (RAG.length < ATDashHead.length) {
            var RAGFinal = []
            for (let RAGC = 0; RAGC < RAG.length; RAGC++) {
              RAGFinal.push(RAG[RAGC].split(',')[0].split('-')[0])
            }
            for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
              if (RAGFinal.includes(ATDashHead[headcnt]['PARAMETER_NAME']) === false) {
                RAGFinal.push(ATDashHead[headcnt]['PARAMETER_NAME'])
                RAG.push(ATDashHead[headcnt]['PARAMETER_NAME'] + '-' + '-')
              }
            }
          }
  
          var dt = moment(ATDashDataApp[APPC]['Replan_Start_Date']);
          var RePl_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(RePl_Start_Date)
  
          var dt = moment(ATDashDataApp[APPC]['RePlan_End_Date']);
          var RePl_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          ATDashData.push(RePl_End_Date)
  
          ATDashDataFinal.push([{
            'epicName': ATDashData[0],
            'sprintName': ATDashData[1],
            'AppName': ATDashData[2],
            'appCategory': ATDashData[3],
            'status': ATDashData[4],
            'Plan_Start_Date': ATDashData[5],
            'Plan_End_Date': ATDashData[6],
            'Actual_Start_Date': ATDashData[7],
            'Actual_End_Date': ATDashData[8],
            'ktSummary': ATDashData[9],
            'Remarks': ATDashData[10],
            'Reason_Not_Green': ATDashData[11],
            'goto_Green': ATDashData[12],
            'Owner_Name': ATDashData[13],
            'RAG': RAG.join(),
            'Replan_Start_Date': ATDashData[14],
            'RePlan_End_Date': ATDashData[15]
          }])
  
  
        }
  
        function Stringcheck(Row_S, Col_S, FieldName, i_S) {
          var stval = ATDashDataFinal[i_S][0][FieldName]
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsAT.cell(Row_S, Col_S).string("");
          } else {
            stval.toString();
            wsAT.cell(Row_S, Col_S).string(stval);
          }
        }
        for (let i = 0; i < ATDashDataFinal.length; i++) {
          var Row = i + 2
          let RAID_R_O = '';
          let RAID_R_Cnt_O = '';
          RAID_R_O = 0;
          RAID_R_Cnt_O = 0;
  
          wsAT.cell(Row, 1).number(i + 1);
  
          Stringcheck(Row, 2, 'epicName', i)
  
          Stringcheck(Row, 3, 'sprintName', i)
          Stringcheck(Row, 4, 'AppName', i)
          Stringcheck(Row, 5, 'appCategory', i)
          //wsAT.cell( Row, 7).string(ATDashDataFinal[i][0]['status']);
          Stringcheck(Row, 7, 'status', i)
  
  
          dt_Report = new Date();
  
          if (ATDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            dt_ReportPlanStDT = new Date(moment(ATDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
          } else {
            if (ATDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
              dt_ReportPlanStDT = new Date(moment(ATDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanStDT = '';
            }
          }
  
          if (ATDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            dt_ReportPlanEndDT = new Date(moment(ATDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
          } else {
            if (ATDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
              dt_ReportPlanEndDT = new Date(moment(ATDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanEndDT = '';
            }
          }
  
          if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
            if (((ATDashDataFinal[i][0]['status'] === 'Not Started')) &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
              wsAT.cell(Row, 7).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
              wsAT.cell(Row, 7).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsAT.cell(Row, 7).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsAT.cell(Row, 7).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'Completed')) {
              wsAT.cell(Row, 7).style(myStyleOverB);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsAT.cell(Row, 7).style(myStyleOverN);
            }
          } else {
            if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsAT.cell(Row, 7).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsAT.cell(Row, 7).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((ATDashDataFinal[i][0]['status'] === 'Completed')) {
              wsAT.cell(Row, 7).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsAT.cell(Row, 7).style(myStyleOverN);
            }
          }
  
          if (ATDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 8).date(ATDashDataFinal[i][0]["Plan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 8).string("");
          }
  
          if (ATDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 9).date(ATDashDataFinal[i][0]["Plan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 9).string("");
          }

          if (ATDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 10).date(ATDashDataFinal[i][0]["Replan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 10).string("");
          }
  
          if (ATDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 11).date(ATDashDataFinal[i][0]["RePlan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 11).string("");
          }
  
          if (ATDashDataFinal[i][0]["Actual_Start_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 12).date(ATDashDataFinal[i][0]["Actual_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 12).string("");
          }
  
          if (ATDashDataFinal[i][0]["Actual_End_Date"] !== 'Invalid date') {
            wsAT.cell(Row, 13).date(ATDashDataFinal[i][0]["Actual_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsAT.cell(Row, 13).string("");
          }
  
          var stval = ATDashDataFinal[i][0]['ktSummary']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsAT.cell(Row, 14).string("");
          } else {
            stval.toString();
            wsAT.cell(Row, 14).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
  
          var stval = ATDashDataFinal[i][0]['Remarks']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsAT.cell(Row, 15).string("");
          } else {
            stval.toString();
            wsAT.cell(Row, 15).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
          var column = 16
          for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
            for (let RAGcount = 0; RAGcount < ATDashHead.length; RAGcount++) {
              if (ATDashHead[headcnt]['PARAMETER_NAME'] === ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[0]) {
                if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'G') {
                  wsAT.cell(Row, headcnt + 16).style(myStyleOverG);
                  RAID_R_O = RAID_R_O + 1
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'A') {
                  wsAT.cell(Row, headcnt + 16).style(myStyleOverA);
                  RAID_R_O = RAID_R_O + 2
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'R') {
                  wsAT.cell(Row, headcnt + 16).style(myStyleOverR);
                  RAID_R_O = RAID_R_O + 3
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else {
                  wsAT.cell(Row, headcnt + 16).style(myStyleOverN);
                }
                //wsAT.cell( Row, headcnt+14).string(ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1]);
                column = column + 1
              }
            }
  
  
          }
  
          let RAID_R = '';
          let RAID_R_Cnt = '';
  
          dt_Report = new Date();
          dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
          for (let RAID_C = 0; RAID_C < RAID.length; RAID_C++) {
            RAID_R = 0;
            RAID_R_Cnt = 0
            for (let APPR = 0; APPR < ATDashDataRAID.length; APPR++) {
              if (ATDashDataFinal[i][0]['epicName'] === ATDashDataRAID[APPR]['epicName'] &&
                ATDashDataFinal[i][0]['sprintName'] === ATDashDataRAID[APPR]['sprintName'] &&
                ATDashDataFinal[i][0]['AppName'] === ATDashDataRAID[APPR]['AppName']) {
                var dt_targer = moment(ATDashDataRAID[APPR]['TargetDate']);
                Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
                dt_targer = new Date(Tar_Date);
  
                if (ATDashDataRAID[APPR]['Type'] === RAID[RAID_C]) {
  
                  if (((ATDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                      (ATDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                    //Amber
                    RAID_R = RAID_R + 2
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 2
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else {
                    if (ATDashDataRAID[APPR]['ImpactConsequences'] === '') {
                      if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        // Green
                        RAID_R = RAID_R + 1
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 1
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        RAID_R = RAID_R + 3
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 3
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      }
                    } else {
                      RAID_R = RAID_R + 3
                      RAID_R_Cnt = RAID_R_Cnt + 1
                      RAID_R_O = RAID_R_O + 3
                      RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                    }
  
                  }
                }
              }
  
            }
  
            if (RAID_R / RAID_R_Cnt <= 1) {
              wsAT.cell(Row, column).string('');
              wsAT.cell(Row, column).style(myStyleOverG);
            } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
              wsAT.cell(Row, column).string('');
              wsAT.cell(Row, column).style(myStyleOverA);
            } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
              wsAT.cell(Row, column).string('');
              wsAT.cell(Row, column).style(myStyleOverR);
            } else {
              wsAT.cell(Row, column).string('');
              wsAT.cell(Row, column).style(myStyleOverN);
            }
            column = column + 1
          }
  
          if (RAID_R_O / RAID_R_Cnt_O <= 1) {
            wsAT.cell(Row, 6).string('');
            wsAT.cell(Row, 6).style(myStyleOverG);
          } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
            wsAT.cell(Row, 6).string('');
            wsAT.cell(Row, 6).style(myStyleOverA);
          } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
            wsAT.cell(Row, 6).string('');
            wsAT.cell(Row, 6).style(myStyleOverR);
          } else {
            wsAT.cell(Row, 6).string('');
            wsAT.cell(Row, 6).style(myStyleOverN);
          }
  
          Stringcheck(Row, column, 'Reason_Not_Green', i)
          Stringcheck(Row, column + 1, 'goto_Green', i)
          Stringcheck(Row, column + 2, 'Owner_Name', i)
  
        }
        // // console.log(column+3)
        wsAT.cell(1, 1, ATDashDataFinal.length + 1, sheet1data.length).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
  
        // sno number align
        wsAT.cell(1, 1, ATDashDataFinal.length + 1, 1).style(
  
          {
  
            alignment: {
              horizontal: 'center',
              vertical: 'center'
            }
          });
        //Data populatio End
        // Data population for Sheet1 start
  
        // Health
        let RAGval = 0;
        let count_RAG = 0;
        var RAGval_Overal = 0;
        var count_RAG_Overal = 0;
        var rowh = 11;
        var  rowhAT=rowhATEpic;
        var Flag = "No"
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          for (let headcnt = 0; headcnt < ATDashHead.length; headcnt++) {
            RAGval = 0;
            count_RAG = 0;
            RAGval_Overal = 0;
            count_RAG_Overal = 0;
            for (let i = 0; i < ATDashDataFinal.length; i++) {
              for (let RAGcount = 0; RAGcount < ATDashHead.length; RAGcount++) {
                if (EpicArry[Epiccount] === ATDashDataFinal[i][0]['epicName'] &&
                  ATDashHead[headcnt]['PARAMETER_NAME'] === ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[0]) {
                  if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'G') {
                    RAGval = RAGval + 1
                    count_RAG = count_RAG + 1
                  } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'A') {
                    RAGval = RAGval + 2
                    count_RAG = count_RAG + 1
                  } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'R') {
                    RAGval = RAGval + 3
                    count_RAG = count_RAG + 1
                  }
                }
              }
  
  
            }
  
            if (RAGval / count_RAG <= 1) {
              wsOver.cell(rowh, 6 + headcnt).string('G');
              wsOver.cell(rowh, 6 + headcnt).style(myStyleOverG);

              wsOver.cell(rowhAT, 6 + headcnt).string('G');
              wsOver.cell(rowhAT, 6 + headcnt).style(myStyleOverG);

            } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
              wsOver.cell(rowh, 6 + headcnt).string('A');
              wsOver.cell(rowh, 6 + headcnt).style(myStyleOverA);

              wsOver.cell(rowhAT, 6 + headcnt).string('A');
              wsOver.cell(rowhAT, 6 + headcnt).style(myStyleOverA);
            } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
              wsOver.cell(rowh, 6 + headcnt).string('R');
              wsOver.cell(rowh, 6 + headcnt).style(myStyleOverR);

              wsOver.cell(rowhAT, 6 + headcnt).string('R');
              wsOver.cell(rowhAT, 6 + headcnt).style(myStyleOverR);
            } else {
              wsOver.cell(rowh, 6 + headcnt).string('N');
              wsOver.cell(rowh, 6 + headcnt).style(myStyleOverN);

              wsOver.cell(rowhAT, 6 + headcnt).string('N');
              wsOver.cell(rowhAT, 6 + headcnt).style(myStyleOverN);
            }
  
            for (let i = 0; i < ATDashDataFinal.length; i++) {
              for (let RAGcount = 0; RAGcount < ATDashHead.length; RAGcount++) {
                if (ATDashHead[headcnt]['PARAMETER_NAME'] === ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[0]) {
                  if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'G') {
                    RAGval_Overal = RAGval_Overal + 1
                    count_RAG_Overal = count_RAG_Overal + 1
                  } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'A') {
                    RAGval_Overal = RAGval_Overal + 2
                    count_RAG_Overal = count_RAG_Overal + 1
                  } else if (ATDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1] === 'R') {
                    RAGval_Overal = RAGval_Overal + 3
                    count_RAG_Overal = count_RAG_Overal + 1
                  }
                }
              }
            }
  
            if (Flag === "No") {
              if (RAGval_Overal / count_RAG_Overal <= 1) {
                wsOver.cell(rowh - 2, 6 + headcnt).string('G');
                wsOver.cell(rowh - 2, 6 + headcnt).style(myStyleOverG);

                wsOver.cell(rowhAT-2, 6 + headcnt).string('G');
              wsOver.cell(rowhAT-2, 6 + headcnt).style(myStyleOverG);
              } else if (RAGval_Overal / count_RAG_Overal > 1 && RAGval_Overal / count_RAG_Overal <= 2) {
                wsOver.cell(rowh - 2, 6 + headcnt).string('A');
                wsOver.cell(rowh - 2, 6 + headcnt).style(myStyleOverA);

                wsOver.cell(rowhAT-2, 6 + headcnt).string('A');
                wsOver.cell(rowhAT-2, 6 + headcnt).style(myStyleOverA);
              } else if (RAGval_Overal / count_RAG_Overal > 2 && RAGval_Overal / count_RAG_Overal <= 3) {
                wsOver.cell(rowh - 2, 6 + headcnt).string('R');
                wsOver.cell(rowh - 2, 6 + headcnt).style(myStyleOverR);

                wsOver.cell(rowhAT-2, 6 + headcnt).string('R');
                wsOver.cell(rowhAT-2, 6 + headcnt).style(myStyleOverR);
              } else {
                wsOver.cell(rowh - 2, 6 + headcnt).string('N');
                wsOver.cell(rowh - 2, 6 + headcnt).style(myStyleOverN);

                wsOver.cell(rowhAT-2, 6 + headcnt).string('N');
                wsOver.cell(rowhAT-2, 6 + headcnt).style(myStyleOverN);
              }
            }
          }
  
        //  wsOver.cell(rowh, 3).string(EpicArry[Epiccount]);
          wsOver.cell(rowh, Epiclength[0]['stCol'], rowh, Epiclength[0]['EndCol']).style(myStyleHead)
          Flag = 'Yes'
          rowh = rowh + 1
          rowhAT=rowhAT+1
  
        }
  
  
        // Schedule
        var rowh = 11;
        var rowhAT=rowhATEpic;
        RAGval_Overal = 0;
        count_RAG_Overal = 0;
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAGval = 0;
          count_RAG = 0;
          for (let i = 0; i < ATDashDataFinal.length; i++) {
            if (EpicArry[Epiccount] === ATDashDataFinal[i][0]['epicName']) {
  
              dt_Report = new Date();
  
              if (ATDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
                dt_ReportPlanStDT = new Date(moment(ATDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
              } else {
                if (ATDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
                  dt_ReportPlanStDT = new Date(moment(ATDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanStDT = '';
                }
              }
  
              if (ATDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
                dt_ReportPlanEndDT = new Date(moment(ATDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
              } else {
                if (ATDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
                  dt_ReportPlanEndDT = new Date(moment(ATDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanEndDT = '';
                }
              }
  
              if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
                if (((ATDashDataFinal[i][0]['status'] === 'Not Started')) &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((ATDashDataFinal[i][0]['status'] === 'On Schedule') || (ATDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              } else {
                if ((ATDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((ATDashDataFinal[i][0]['status'] === 'On Schedule') || (ATDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              }
  
            }
          }
          if (RAGval / count_RAG <= 1) {
            wsOver.cell(rowh, 5).string('G');
            wsOver.cell(rowh, 5).style(myStyleOverG);

            wsOver.cell(rowhAT, 5).string('G');
            wsOver.cell(rowhAT, 5).style(myStyleOverG);

          } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
            wsOver.cell(rowh, 5).string('A');
            wsOver.cell(rowh, 5).style(myStyleOverA);

            wsOver.cell(rowhAT, 5).string('A');
            wsOver.cell(rowhAT, 5).style(myStyleOverA);
          } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
            wsOver.cell(rowh, 5).string('R');
            wsOver.cell(rowh, 5).style(myStyleOverR);

            wsOver.cell(rowhAT, 5).string('R');
            wsOver.cell(rowhAT, 5).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, 5).string('N');
            wsOver.cell(rowh, 5).style(myStyleOverN);

            wsOver.cell(rowhAT, 5).string('N');
            wsOver.cell(rowhAT, 5).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhAT=rowhAT+1
  
        }
  
        var rowh = 9;
        var rowhAT=rowhATTra;
        if (RAGval_Overal / count_RAG_Overal <= 1) {
          wsOver.cell(rowh, 5).string('G');
          wsOver.cell(rowh, 5).style(myStyleOverG);

          wsOver.cell(rowhAT, 5).string('G');
          wsOver.cell(rowhAT, 5).style(myStyleOverG);

        } else if (RAGval_Overal / count_RAG_Overal > 1 && RAGval_Overal / count_RAG_Overal <= 2) {
          wsOver.cell(rowh, 5).string('A');
          wsOver.cell(rowh, 5).style(myStyleOverA);

          wsOver.cell(rowhAT, 5).string('A');
          wsOver.cell(rowhAT, 5).style(myStyleOverA);
        } else if (RAGval_Overal / count_RAG_Overal > 2 && RAGval_Overal / count_RAG_Overal <= 3) {
          wsOver.cell(rowh, 5).string('R');
          wsOver.cell(rowh, 5).style(myStyleOverR);

          wsOver.cell(rowhAT, 5).string('R');
          wsOver.cell(rowhAT, 5).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, 5).string('N');
          wsOver.cell(rowh, 5).style(myStyleOverN);

          wsOver.cell(rowhAT, 5).string('N');
          wsOver.cell(rowhAT, 5).style(myStyleOverN);
        }
  
        // RAID
        var rowh = 11;
       var rowhAT=rowhATEpic;
        let col_trans = ATDashHead.length + 6
        let RAID_R = '';
        let RAID_R_Cnt = ''
        let RAID_R_O = '';
        let RAID_R_Cnt_O = ''
        dt_Report = new Date();
        dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
  
        RAID_R_Cnt_O = 0;
        RAID_R_O = 0;
  
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAID_R = 0;
          RAID_R_Cnt = 0
          for (let APPR = 0; APPR < ATDashDataRAID.length; APPR++) {
            if (EpicArry[Epiccount] === ATDashDataRAID[APPR]['epicName']) {
              var dt_targer = moment(ATDashDataRAID[APPR]['TargetDate']);
              Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
              dt_targer = new Date(Tar_Date);
  
              if (((ATDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                  (ATDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Red
                RAID_R = RAID_R + 3
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 3
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                //Amber
                RAID_R = RAID_R + 2
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 2
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((ATDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else {
                if (ATDashDataRAID[APPR]['ImpactConsequences'] === '') {
                  if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
  
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) {
  
                    //red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  }
                } else {
                  // Red
                  RAID_R = RAID_R + 3
                  RAID_R_Cnt = RAID_R_Cnt + 1
                  RAID_R_O = RAID_R_O + 3
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                }
  
              }
  
            }
          }
  
          if (RAID_R / RAID_R_Cnt <= 1) {
            wsOver.cell(rowh, col_trans).string('G');
            wsOver.cell(rowh, col_trans).style(myStyleOverG);

            wsOver.cell(rowhAT, col_trans).string('G');
            wsOver.cell(rowhAT, col_trans).style(myStyleOverG);

          } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
            wsOver.cell(rowh, col_trans).string('A');
            wsOver.cell(rowh, col_trans).style(myStyleOverA);

            wsOver.cell(rowhAT, col_trans).string('A');
            wsOver.cell(rowhAT, col_trans).style(myStyleOverA);
          } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
            wsOver.cell(rowh, col_trans).string('R');
            wsOver.cell(rowh, col_trans).style(myStyleOverR);

            wsOver.cell(rowhAT, col_trans).string('R');
            wsOver.cell(rowhAT, col_trans).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, col_trans).string('N');
            wsOver.cell(rowh, col_trans).style(myStyleOverN);

            wsOver.cell(rowhAT, col_trans).string('N');
            wsOver.cell(rowhAT, col_trans).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhAT=rowhAT+1
        }
  
  
        var rowh = 9;
        var rowhAT=rowhATTra;
        if (RAID_R_O / RAID_R_Cnt_O <= 1) {
          wsOver.cell(rowh, col_trans).string('G');
          wsOver.cell(rowh, col_trans).style(myStyleOverG);

          wsOver.cell(rowhAT, col_trans).string('G');
          wsOver.cell(rowhAT, col_trans).style(myStyleOverG);
        } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
          wsOver.cell(rowh, col_trans).string('A');
          wsOver.cell(rowh, col_trans).style(myStyleOverA);

          wsOver.cell(rowhAT, col_trans).string('A');
          wsOver.cell(rowhAT, col_trans).style(myStyleOverA);
        } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
          wsOver.cell(rowh, col_trans).string('R');
          wsOver.cell(rowh, col_trans).style(myStyleOverR);

          wsOver.cell(rowhAT, col_trans).string('R');
          wsOver.cell(rowhAT, col_trans).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, col_trans).string('N');
          wsOver.cell(rowh, col_trans).style(myStyleOverN);

          wsOver.cell(rowhAT, col_trans).string('N');
          wsOver.cell(rowhAT, col_trans).style(myStyleOverN);
        }
    } else {
        wsAT.cell(2, 1).string('No Records Available.');
        wsAT.cell(2, 1, 2, sheet1data.length, true).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
    }
    //Data population sheet1 end-------
    //----------------AT Stream End -------------------------
  
    //-------------------ST Stream Start-----------------------------------
      var wsST = wb.addWorksheet('ST Dashboard', options);
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
      wb.write(fileOveralSchedule); 
  
      //worksheet1 data populate  
      const sheet2data = [{
          header: 'S.No',
          width: 5
        },
        {
          header: 'EPIC',
          width: 6
        },
        {
          header: 'Sprint',
          width: 7
        },
        {
          header: 'ST Scope',
          width: 20
        },
        {
          header: 'RAG',
          width: 11.5
        },
        {
          header: 'Transition Schedule',
          width: 15
        },
        {
          header: 'Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Summary',
          width: 25
        },
        {
          header: 'Remarks',
          width: 25
        }
      ];

      for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
        sheet2data.push({
          header: STDashHead[headcnt]['PARAMETER_NAME'],
          width: 9.5
        })
      }
  
      for (let RAIDcnt = 0; RAIDcnt < RAID.length; RAIDcnt++) {
        sheet2data.push({
          header: RAID[RAIDcnt],
          width: 8.7
        })
      }
  
      sheet2data.push({
        header: 'Reason for Not Green	',
        width: 25
      }, {
        header: 'Go to Green Plan',
        width: 25
      }, {
        header: 'Action Owner',
        width: 25
      });

      var sheet2Row = 1;
      for (let i = 0; i < sheet2data.length; i++) {
        wsST.cell(sheet2Row, i + 1).string(sheet2data[i].header);
        wsST.cell(sheet2Row, i + 1).style(myStyle);
        wsST.column(i + 1).setWidth(sheet2data[i].width);
      }
  
      //for loop
      wsST.cell(1, 1, 1, sheet2data.length).style({
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });  
  
    //Data population ST dashboard Start--------
    if (STDashDataApp.length > 0) {  
        var STDashDataFinal = []
        var workbook = new Excel.Workbook();
        for (let APPC = 0; APPC < STDashDataApp.length; APPC++) {
          STDashData = [];
          STDashData.push(STDashDataApp[APPC]['epicName'])
          STDashData.push(STDashDataApp[APPC]['sprintName'])
          STDashData.push(STDashDataApp[APPC]['STScope'])
          STDashData.push(STDashDataApp[APPC]['status'])
  
          var dt = moment(STDashDataApp[APPC]['Plan_Start_Date']);
          var Plan_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(Plan_Start_Date)
  
          var dt = moment(STDashDataApp[APPC]['Plan_End_Date']);
          var Plan_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(Plan_End_Date)
  
          var dt = moment(STDashDataApp[APPC]['Actual_Start_Date']);
          var Act_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(Act_Start_Date)
  
          var dt = moment(STDashDataApp[APPC]['Actual_End_Date']);
          var Act_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(Act_End_Date)
  
          STDashData.push(STDashDataApp[APPC]['ktSummary'])
          STDashData.push(STDashDataApp[APPC]['Remarks'])
          STDashData.push(STDashDataApp[APPC]['Reason_Not_Green'])
          STDashData.push(STDashDataApp[APPC]['goto_Green'])
          STDashData.push(STDashDataApp[APPC]['Owner_Name'])
 
          var RAG = []
          for (let col = 0; col < STDashHead.length; col++) {
            for (let APPH = 0; APPH < STDashDataHealth.length; APPH++) {
              if (STDashHead[col]['PARAMETER_NAME'] === STDashDataHealth[APPH]['PARAMETER_NAME'] &&
                (STDashDataHealth[APPH]['STScope'] === STDashDataApp[APPC]['STScope'])) {
                if (RAG.includes(STDashDataHealth[APPH]['PARAMETER_NAME'] +
                    '^' + STDashDataHealth[APPH]['RAG'] +
                    '^' + STDashDataApp[APPC]['STScope']) === false) {
                  RAG.push(STDashDataHealth[APPH]['PARAMETER_NAME'] + '^' +
                    STDashDataHealth[APPH]['RAG'] + '^' +
                    STDashDataApp[APPC]['STScope'])
  
                }
  
              }
            }
          }
  
  
          if (RAG.length < STDashHead.length) {
            var RAGFinal = []
            for (let RAGC = 0; RAGC < RAG.length; RAGC++) {
              RAGFinal.push(RAG[RAGC].split('!')[0].split('^')[0])
            }
            for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
              if (RAGFinal.includes(STDashHead[headcnt]['PARAMETER_NAME']) === false) {
                RAGFinal.push(STDashHead[headcnt]['PARAMETER_NAME'])
                RAG.push(STDashHead[headcnt]['PARAMETER_NAME'] + '^' + '^')
              }
            }
          }
  
          var dt = moment(STDashDataApp[APPC]['Replan_Start_Date']);
          var RePl_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(RePl_Start_Date)
  
          var dt = moment(STDashDataApp[APPC]['RePlan_End_Date']);
          var RePl_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          STDashData.push(RePl_End_Date)
  
          STDashDataFinal.push([{
            'epicName': STDashData[0],
            'sprintName': STDashData[1],
            'STScope': STDashData[2],
            'status': STDashData[3],
            'Plan_Start_Date': STDashData[4],
            'Plan_End_Date': STDashData[5],
            'Actual_Start_Date': STDashData[6],
            'Actual_End_Date': STDashData[7],
            'ktSummary': STDashData[8],
            'Remarks': STDashData[9],
            'Reason_Not_Green': STDashData[10],
            'goto_Green': STDashData[11],
            'Owner_Name': STDashData[12],
            'RAG': RAG.join("!"),
            'Replan_Start_Date': STDashData[13],
            'RePlan_End_Date': STDashData[14]
          }])
  
  
        }
  
        function Stringcheck(Row_S, Col_S, FieldName, i_S) {
          var stval = STDashDataFinal[i_S][0][FieldName]
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsST.cell(Row_S, Col_S).string("");
          } else {
            stval.toString();
            wsST.cell(Row_S, Col_S).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
        }
        for (let i = 0; i < STDashDataFinal.length; i++) {
          var Row = i + 2
          let RAID_R_O = '';
          let RAID_R_Cnt_O = '';
          RAID_R_O = 0;
          RAID_R_Cnt_O = 0;
  
          wsST.cell(Row, 1).number(i + 1);
  
          Stringcheck(Row, 2, 'epicName', i)
  
          Stringcheck(Row, 3, 'sprintName', i)
  
          Stringcheck(Row, 4, 'STScope', i)
  
          Stringcheck(Row, 6, 'status', i)
  
  
          dt_Report = new Date();
  
          if (STDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            dt_ReportPlanStDT = new Date(moment(STDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
          } else {
            if (STDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
              dt_ReportPlanStDT = new Date(moment(STDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanStDT = '';
            }
          }
  
          if (STDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            dt_ReportPlanEndDT = new Date(moment(STDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
          } else {
            if (STDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
              dt_ReportPlanEndDT = new Date(moment(STDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanEndDT = '';
            }
          }
  
          if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
            if (((STDashDataFinal[i][0]['status'] === 'Not Started')) &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
              wsST.cell(Row, 6).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
              wsST.cell(Row, 6).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsST.cell(Row, 6).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsST.cell(Row, 6).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'Completed')) {
              wsST.cell(Row, 6).style(myStyleOverB);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsST.cell(Row, 6).style(myStyleOverN);
            }
          } else {
            if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsST.cell(Row, 6).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsST.cell(Row, 6).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((STDashDataFinal[i][0]['status'] === 'Completed')) {
              wsST.cell(Row, 6).style(myStyleOverB);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsST.cell(Row, 6).style(myStyleOverN);
            }
          }
  
          if (STDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
            wsST.cell(Row, 7).date(STDashDataFinal[i][0]["Plan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 7).string("");
          }
  
          if (STDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
            wsST.cell(Row, 8).date(STDashDataFinal[i][0]["Plan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 8).string("");
          }

          if (STDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            wsST.cell(Row, 9).date(STDashDataFinal[i][0]["Replan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 9).string("");
          }
  
          if (STDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            wsST.cell(Row, 10).date(STDashDataFinal[i][0]["RePlan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 10).string("");
          }
  
          if (STDashDataFinal[i][0]["Actual_Start_Date"] !== 'Invalid date') {
            wsST.cell(Row, 11).date(STDashDataFinal[i][0]["Actual_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 11).string("");
          }
  
          if (STDashDataFinal[i][0]["Actual_End_Date"] !== 'Invalid date') {
            wsST.cell(Row, 12).date(STDashDataFinal[i][0]["Actual_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsST.cell(Row, 12).string("");
          }
  
          var stval = STDashDataFinal[i][0]['ktSummary']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsST.cell(Row, 13).string("");
          } else {
            stval.toString();
            wsST.cell(Row, 13).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
  
          var stval = STDashDataFinal[i][0]['Remarks']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsST.cell(Row, 14).string("");
          } else {
            stval.toString();
            wsST.cell(Row, 14).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }

          var column = 15
          for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
            for (let RAGcount = 0; RAGcount < STDashHead.length; RAGcount++) {
              if (STDashHead[headcnt]['PARAMETER_NAME'] === STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[0]) {
                if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'G') {
                  wsST.cell(Row, headcnt + 15).style(myStyleOverG);
                  RAID_R_O = RAID_R_O + 1
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'A') {
                  wsST.cell(Row, headcnt + 15).style(myStyleOverA);
                  RAID_R_O = RAID_R_O + 2
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'R') {
                  wsST.cell(Row, headcnt + 15).style(myStyleOverR);
                  RAID_R_O = RAID_R_O + 3
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                } else {
                  wsST.cell(Row, headcnt + 15).style(myStyleOverN);
                }
                //wsAT.cell( Row, headcnt+14).string(STDashDataFinal[i][0]['RAG'].split(',')[RAGcount].split('-')[1]);
                column = column + 1
              }
            }  
          }
  
          let RAID_R = '';
          let RAID_R_Cnt = '';
  
          dt_Report = new Date();
          dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
          for (let RAID_C = 0; RAID_C < RAID.length; RAID_C++) {
            RAID_R = 0;
            RAID_R_Cnt = 0
            for (let APPR = 0; APPR < STDashDataRAID.length; APPR++) {
              if (STDashDataFinal[i][0]['epicName'] === STDashDataRAID[APPR]['epicName'] &&
                STDashDataFinal[i][0]['sprintName'] === STDashDataRAID[APPR]['sprintName'] &&
                STDashDataFinal[i][0]['STScope'] === STDashDataRAID[APPR]['STScope']) {
                var dt_targer = moment(STDashDataRAID[APPR]['TargetDate']);
                Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
                dt_targer = new Date(Tar_Date);
  
                if (STDashDataRAID[APPR]['Type'] === RAID[RAID_C]) {
  
                  if (((STDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                      (STDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                    //Amber
                    RAID_R = RAID_R + 2
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 2
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else {
                    if (STDashDataRAID[APPR]['ImpactConsequences'] === '') {
                      if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        // Green
                        RAID_R = RAID_R + 1
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 1
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        RAID_R = RAID_R + 3
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 3
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      }
                    } else {
                      RAID_R = RAID_R + 3
                      RAID_R_Cnt = RAID_R_Cnt + 1
                      RAID_R_O = RAID_R_O + 3
                      RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                    }
  
                  }
                }
              }  
            }
  
            if (RAID_R / RAID_R_Cnt <= 1) {
              wsST.cell(Row, column).string('');
              wsST.cell(Row, column).style(myStyleOverG);
            } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
              wsST.cell(Row, column).string('');
              wsST.cell(Row, column).style(myStyleOverA);
            } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
              wsST.cell(Row, column).string('');
              wsST.cell(Row, column).style(myStyleOverR);
            } else {
              wsST.cell(Row, column).string('');
              wsST.cell(Row, column).style(myStyleOverN);
            }
            column = column + 1
          }
 
          if (RAID_R_O / RAID_R_Cnt_O <= 1) {
            wsST.cell(Row, 5).string('');
            wsST.cell(Row, 5).style(myStyleOverG);
          } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
            wsST.cell(Row, 5).string('');
            wsST.cell(Row, 5).style(myStyleOverA);
          } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
            wsST.cell(Row, 5).string('');
            wsST.cell(Row, 5).style(myStyleOverR);
          } else {
            wsST.cell(Row, 5).string('');
            wsST.cell(Row, 5).style(myStyleOverN);
          }
  
          Stringcheck(Row, column, 'Reason_Not_Green', i)
          Stringcheck(Row, column + 1, 'goto_Green', i)
          Stringcheck(Row, column + 2, 'Owner_Name', i)
  
        }
        // // console.log(column+3)
        wsST.cell(1, 1, STDashDataFinal.length + 1, sheet2data.length).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
  
        // sno number align
        wsST.cell(1, 1, STDashDataFinal.length + 1, 1).style({  
            alignment: {
              horizontal: 'center',
              vertical: 'center'
            }
          });
        //Data populatio End
  
  
        // Data population for Sheet1 start
  
        // Health
        let RAGval = 0;
        let count_RAG = 0;
        var RAGval_Overal = 0;
        var count_RAG_Overal = 0;
        var rowh = 11;
        var rowhST=rowhSTEpic;
        var Flag = "No"
        //st
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          for (let headcnt = 0; headcnt < STDashHead.length; headcnt++) {
            RAGval = 0;
            count_RAG = 0;
            RAGval_Overal = 0;
            count_RAG_Overal = 0;
            for (let i = 0; i < STDashDataFinal.length; i++) {
              for (let RAGcount = 0; RAGcount < STDashHead.length; RAGcount++) {
                if (EpicArry[Epiccount] === STDashDataFinal[i][0]['epicName'] &&
                  STDashHead[headcnt]['PARAMETER_NAME'] === STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[0]) {
                  if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'G') {
                    RAGval = RAGval + 1
                    count_RAG = count_RAG + 1
                  } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'A') {
                    RAGval = RAGval + 2
                    count_RAG = count_RAG + 1
                  } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'R') {
                    RAGval = RAGval + 3
                    count_RAG = count_RAG + 1
                  }
                }
              }
  
  
            }
           
            colPar = Epiclength[1]['stCol'] + 1 + headcnt;
            
            if (RAGval / count_RAG <= 1) {
              wsOver.cell(rowh, colPar).string('G');
              wsOver.cell(rowh, colPar).style(myStyleOverG);

              wsOver.cell(rowhST, 6 + headcnt).string('G');
              wsOver.cell(rowhST, 6 + headcnt).style(myStyleOverG);

            } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
              wsOver.cell(rowh, colPar).string('A');
              wsOver.cell(rowh, colPar).style(myStyleOverA);

              wsOver.cell(rowhST, 6 + headcnt).string('A');
              wsOver.cell(rowhST, 6 + headcnt).style(myStyleOverA);
            } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
              wsOver.cell(rowh, colPar).string('R');
              wsOver.cell(rowh, colPar).style(myStyleOverR);

              wsOver.cell(rowhST, 6 + headcnt).string('R');
              wsOver.cell(rowhST, 6 + headcnt).style(myStyleOverR);
            } else {
              wsOver.cell(rowh, colPar).string('N');
              wsOver.cell(rowh, colPar).style(myStyleOverN);

              wsOver.cell(rowhST, 6 + headcnt).string('N');
              wsOver.cell(rowhST, 6 + headcnt).style(myStyleOverN);
            }
  
            for (let i = 0; i < STDashDataFinal.length; i++) {
              for (let RAGcount = 0; RAGcount < STDashHead.length; RAGcount++) {
                if (STDashHead[headcnt]['PARAMETER_NAME'] === STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[0]) {
                  if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'G') {
                    RAGval_Overal = RAGval_Overal + 1
                    count_RAG_Overal = count_RAG_Overal + 1
                  } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'A') {
                    RAGval_Overal = RAGval_Overal + 2
                    count_RAG_Overal = count_RAG_Overal + 1
                  } else if (STDashDataFinal[i][0]['RAG'].split('!')[RAGcount].split('^')[1] === 'R') {
                    RAGval_Overal = RAGval_Overal + 3
                    count_RAG_Overal = count_RAG_Overal + 1
                  }
                }
              }
            }
  
            if (Flag === "No") {
              if (RAGval_Overal / count_RAG_Overal <= 1) {
                wsOver.cell(rowh - 2, colPar).string('G');
                wsOver.cell(rowh - 2, colPar).style(myStyleOverG);

                wsOver.cell(rowhST - 2, 6 + headcnt).string('G');
                wsOver.cell(rowhST - 2, 6 + headcnt).style(myStyleOverG);
              } else if (RAGval_Overal / count_RAG_Overal > 1 && RAGval_Overal / count_RAG_Overal <= 2) {
                wsOver.cell(rowh - 2, colPar).string('A');
                wsOver.cell(rowh - 2, colPar).style(myStyleOverA);

                wsOver.cell(rowhST - 2, 6 + headcnt).string('A');
                wsOver.cell(rowhST - 2, 6 + headcnt).style(myStyleOverA);
              } else if (RAGval_Overal / count_RAG_Overal > 2 && RAGval_Overal / count_RAG_Overal <= 3) {
                wsOver.cell(rowh - 2, colPar).string('R');
                wsOver.cell(rowh - 2, colPar).style(myStyleOverR);

                wsOver.cell(rowhST - 2, 6 + headcnt).string('R');
                wsOver.cell(rowhST - 2, 6 + headcnt).style(myStyleOverR);
              } else {
                wsOver.cell(rowh - 2, colPar).string('N');
                wsOver.cell(rowh - 2, colPar).style(myStyleOverN);

                wsOver.cell(rowhST - 2, 6 + headcnt).string('N');
                wsOver.cell(rowhST - 2, 6 + headcnt).style(myStyleOverN);
              }
            }
          }
        //  wsOver.cell(rowh, 3).string(EpicArry[Epiccount]);
          wsOver.cell(rowh, Epiclength[1]['stCol'], rowh, Epiclength[1]['EndCol']).style(myStyleHead)
          Flag = 'Yes'
          rowh = rowh + 1  
          rowhST=rowhST+1
        }
  
  
        // Schedule
        var rowh = 11;
        var rowhST=rowhSTEpic;
        RAGval_Overal = 0;
        count_RAG_Overal = 0;
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAGval = 0;
          count_RAG = 0;
          for (let i = 0; i < STDashDataFinal.length; i++) {
            if (EpicArry[Epiccount] === STDashDataFinal[i][0]['epicName']) {
  
              dt_Report = new Date();
  
              if (STDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
                dt_ReportPlanStDT = new Date(moment(STDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
              } else {
                if (STDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
                  dt_ReportPlanStDT = new Date(moment(STDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanStDT = '';
                }
              }
  
              if (STDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
                dt_ReportPlanEndDT = new Date(moment(STDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
              } else {
                if (STDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
                  dt_ReportPlanEndDT = new Date(moment(STDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanEndDT = '';
                }
              }
  
              if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
                if (((STDashDataFinal[i][0]['status'] === 'Not Started')) &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((STDashDataFinal[i][0]['status'] === 'On Schedule') || (STDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              } else {
                if ((STDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((STDashDataFinal[i][0]['status'] === 'On Schedule') || (STDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              }
  
            }
          }
          if (RAGval / count_RAG <= 1) {
            wsOver.cell(rowh, Epiclength[1]['stCol']).string('G');
            wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverG);

            wsOver.cell(rowhST,5).string('G');
            wsOver.cell(rowhST, 5).style(myStyleOverG);
          } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
            wsOver.cell(rowh, Epiclength[1]['stCol']).string('A');
            wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverA);

            wsOver.cell(rowhST, 5).string('A');
            wsOver.cell(rowhST, 5).style(myStyleOverA);

          } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
            wsOver.cell(rowh, Epiclength[1]['stCol']).string('R');
            wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverR);

            wsOver.cell(rowhST, 5).string('R');
            wsOver.cell(rowhST, 5).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, Epiclength[1]['stCol']).string('N');
            wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverN);

            wsOver.cell(rowhST, 5).string('N');
            wsOver.cell(rowhST, 5).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhST=rowhST+1
  
        }
  
        var rowh = 9;
        var rowhST=rowhSTTra;
        if (RAGval_Overal / count_RAG_Overal <= 1) {
          wsOver.cell(rowh, Epiclength[1]['stCol']).string('G');
          wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverG);

          wsOver.cell(rowhST, 5).string('G');
          wsOver.cell(rowhST, 5).style(myStyleOverG);
        } else if (RAGval_Overal / count_RAG_Overal > 1 && RAGval_Overal / count_RAG_Overal <= 2) {
          wsOver.cell(rowh, Epiclength[1]['stCol']).string('A');
          wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverA);

          wsOver.cell(rowhST, 5).string('A');
          wsOver.cell(rowhST, 5).style(myStyleOverA);
        } else if (RAGval_Overal / count_RAG_Overal > 2 && RAGval_Overal / count_RAG_Overal <= 3) {
          wsOver.cell(rowh, Epiclength[1]['stCol']).string('R');
          wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverR);

          wsOver.cell(rowhST,5).string('R');
          wsOver.cell(rowhST, 5).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, Epiclength[1]['stCol']).string('N');
          wsOver.cell(rowh, Epiclength[1]['stCol']).style(myStyleOverN);

          wsOver.cell(rowhST, 5).string('N');
          wsOver.cell(rowhST, 5).style(myStyleOverN);
        }
  
        // RAID
        var rowh = 11;
        var rowhST=rowhSTEpic;
        let col_trans = Epiclength[1]['EndCol']
        let RAID_R = '';
        let RAID_R_Cnt = ''
        let RAID_R_O = '';
        let RAID_R_Cnt_O = ''
        dt_Report = new Date();
        dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
  
        RAID_R_Cnt_O = 0;
        RAID_R_O = 0;
  
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAID_R = 0;
          RAID_R_Cnt = 0
          for (let APPR = 0; APPR < STDashDataRAID.length; APPR++) {
            if (EpicArry[Epiccount] === STDashDataRAID[APPR]['epicName']) {
              var dt_targer = moment(STDashDataRAID[APPR]['TargetDate']);
              Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
              dt_targer = new Date(Tar_Date);
  
              if (((STDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                  (STDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Red
                RAID_R = RAID_R + 3
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 3
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                //Amber
                RAID_R = RAID_R + 2
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 2
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((STDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else {
                if (STDashDataRAID[APPR]['ImpactConsequences'] === '') {
                  if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
  
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) {
  
                    //red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  }
                } else {
                  // Red
                  RAID_R = RAID_R + 3
                  RAID_R_Cnt = RAID_R_Cnt + 1
                  RAID_R_O = RAID_R_O + 3
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                }
  
              }
  
            }
          }
          //Epiclength[0]['EndCol']
          var col_transST = STDashHead.length + 6
          if (RAID_R / RAID_R_Cnt <= 1) {
            wsOver.cell(rowh, col_trans).string('G');
            wsOver.cell(rowh, col_trans).style(myStyleOverG);

            wsOver.cell(rowhST, col_transST).string('G');
            wsOver.cell(rowhST, col_transST).style(myStyleOverG);
          } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
            wsOver.cell(rowh, col_trans).string('A');
            wsOver.cell(rowh, col_trans).style(myStyleOverA);

            wsOver.cell(rowhST, col_transST).string('A');
            wsOver.cell(rowhST, col_transST).style(myStyleOverA);
          } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
            wsOver.cell(rowh, col_trans).string('R');
            wsOver.cell(rowh, col_trans).style(myStyleOverR);

            wsOver.cell(rowhST, col_transST).string('R');
            wsOver.cell(rowhST, col_transST).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, col_trans).string('N');
            wsOver.cell(rowh, col_trans).style(myStyleOverN);

            wsOver.cell(rowhST, col_transST).string('N');
            wsOver.cell(rowhST, col_transST).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhST=rowhST+1
        }
  
  
        var rowh = 9;
        var rowhST=rowhSTTra;
        if (RAID_R_O / RAID_R_Cnt_O <= 1) {
          wsOver.cell(rowh, col_trans).string('G');
          wsOver.cell(rowh, col_trans).style(myStyleOverG);

          wsOver.cell(rowhST, col_transST).string('G');
          wsOver.cell(rowhST, col_transST).style(myStyleOverG);
        } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
          wsOver.cell(rowh, col_trans).string('A');
          wsOver.cell(rowh, col_trans).style(myStyleOverA);

          wsOver.cell(rowhST, col_transST).string('A');
          wsOver.cell(rowhST, col_transST).style(myStyleOverA);
        } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
          wsOver.cell(rowh, col_trans).string('R');
          wsOver.cell(rowh, col_trans).style(myStyleOverR);

          wsOver.cell(rowhST, col_transST).string('R');
          wsOver.cell(rowhST, col_transST).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, col_trans).string('N');
          wsOver.cell(rowh, col_trans).style(myStyleOverN);

          wsOver.cell(rowhST, col_transST).string('N');
          wsOver.cell(rowhST, col_transST).style(myStyleOverN);
        }
    } else {
        wsST.cell(2, 1).string('No Records Available.');
        wsST.cell(2, 1, 2, sheet2data.length, true).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
    }
    //Data population ST dashboard End-------
    //-------------ST Stream Data End============---------------
   
    // Overall STream Data Start---------------------------------
      var wsOAll = wb.addWorksheet('Other Dashboard', options);
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
      wb.write(fileOveralSchedule); 
      //worksheet1 data populate  
      const sheet3data = [{
          header: 'S.No',
          width: 5
        },
        {
          header: 'EPIC',
          width: 6
        },
        {
          header: 'Sprint',
          width: 7
        },
        {
          header: 'Backlog Activity',
          width: 20
        },
        {
          header: 'RAG',
          width: 11.5
        },
        {
          header: 'Transition Schedule',
          width: 15
        },
        {
          header: 'Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Re-Planned End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual Start Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Actual End Date',
          width: 8.5,
          style: {
            numFmt: 'dd-mmm-yyyy'
          }
        },
        {
          header: 'Summary',
          width: 25
        },
        {
          header: 'Remarks',
          width: 25
        }
      ]
  
      for (let RAIDcnt = 0; RAIDcnt < RAID.length; RAIDcnt++) {
        sheet3data.push({
          header: RAID[RAIDcnt],
          width: 8.7
        })
      }
  
      sheet3data.push({
        header: 'Reason for Not Green	',
        width: 25
      }, {
        header: 'Go to Green Plan',
        width: 25
      }, {
        header: 'Action Owner',
        width: 25
      })
  
      var sheet3Row = 1;
      for (let i = 0; i < sheet3data.length; i++) {
        wsOAll.cell(sheet3Row, i + 1).string(sheet3data[i].header);
        wsOAll.cell(sheet3Row, i + 1).style(myStyle);
        wsOAll.column(i + 1).setWidth(sheet3data[i].width);
      }
      //for loop
      wsOAll.cell(1, 1, 1, sheet3data.length).style({
        border: {
          left: {
            style: 'thin'
          },
          right: {
            style: 'thin'
          },
          top: {
            style: 'thin'
          },
          bottom: {
            style: 'thin'
          }
        }
      });  
  
      if (OAllDashDataApp.length > 0) {  
        var OAllDashDataFinal = []
        var workbook = new Excel.Workbook();
        for (let APPC = 0; APPC < OAllDashDataApp.length; APPC++) {
          OAllDashData = [];
          OAllDashData.push(OAllDashDataApp[APPC]['epicName'])
          OAllDashData.push(OAllDashDataApp[APPC]['sprintName'])
          OAllDashData.push(OAllDashDataApp[APPC]['Scope_BacklogActivity'])
          OAllDashData.push(OAllDashDataApp[APPC]['status'])
  
          var dt = moment(OAllDashDataApp[APPC]['Plan_Start_Date']);
          var Plan_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(Plan_Start_Date)
  
          var dt = moment(OAllDashDataApp[APPC]['Plan_End_Date']);
          var Plan_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(Plan_End_Date)
  
          var dt = moment(OAllDashDataApp[APPC]['Actual_Start_Date']);
          var Act_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(Act_Start_Date)
  
          var dt = moment(OAllDashDataApp[APPC]['Actual_End_Date']);
          var Act_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(Act_End_Date)
  
          OAllDashData.push(OAllDashDataApp[APPC]['ktSummary'])
          OAllDashData.push(OAllDashDataApp[APPC]['Remarks'])
          OAllDashData.push(OAllDashDataApp[APPC]['Reason_Not_Green'])
          OAllDashData.push(OAllDashDataApp[APPC]['goto_Green'])
          OAllDashData.push(OAllDashDataApp[APPC]['Owner_Name'])
  
          var RAG = []
  
          var dt = moment(OAllDashDataApp[APPC]['Replan_Start_Date']);
          var RePl_Start_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(RePl_Start_Date)
  
          var dt = moment(OAllDashDataApp[APPC]['RePlan_End_Date']);
          var RePl_End_Date = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
          OAllDashData.push(RePl_End_Date)
  
          OAllDashDataFinal.push([{
            'epicName': OAllDashData[0],
            'sprintName': OAllDashData[1],
            'Scope_BacklogActivity': OAllDashData[2],
            'status': OAllDashData[3],
            'Plan_Start_Date': OAllDashData[4],
            'Plan_End_Date': OAllDashData[5],
            'Actual_Start_Date': OAllDashData[6],
            'Actual_End_Date': OAllDashData[7],
            'ktSummary': OAllDashData[8],
            'Remarks': OAllDashData[9],
            'Reason_Not_Green': OAllDashData[10],
            'goto_Green': OAllDashData[11],
            'Owner_Name': OAllDashData[12],
            'RAG': RAG.join(),
            'Replan_Start_Date': OAllDashData[13],
            'RePlan_End_Date': OAllDashData[14]
          }])
  
  
        }
  
        function Stringcheck(Row_S, Col_S, FieldName, i_S) {
          var stval = OAllDashDataFinal[i_S][0][FieldName]
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsOAll.cell(Row_S, Col_S).string("");
          } else {
            stval.toString();
            wsOAll.cell(Row_S, Col_S).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
        }
        for (let i = 0; i < OAllDashDataFinal.length; i++) {
          var Row = i + 2
          let RAID_R_O = '';
          let RAID_R_Cnt_O = '';
          RAID_R_O = 0;
          RAID_R_Cnt_O = 0;
  
          wsOAll.cell(Row, 1).number(i + 1);
  
          Stringcheck(Row, 2, 'epicName', i)
  
          Stringcheck(Row, 3, 'sprintName', i)
  
          Stringcheck(Row, 4, 'Scope_BacklogActivity', i)
  
          Stringcheck(Row, 6, 'status', i)
  
  
          dt_Report = new Date();
  
          if (OAllDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            dt_ReportPlanStDT = new Date(moment(OAllDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
          } else {
            if (OAllDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
              dt_ReportPlanStDT = new Date(moment(OAllDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanStDT = '';
            }
          }
  
          if (OAllDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            dt_ReportPlanEndDT = new Date(moment(OAllDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
          } else {
            if (OAllDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
              dt_ReportPlanEndDT = new Date(moment(OAllDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
            } else {
              dt_ReportPlanEndDT = '';
            }
          }
  
          if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
            if (((OAllDashDataFinal[i][0]['status'] === 'Not Started')) &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
              wsOAll.cell(Row, 6).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
              ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
              wsOAll.cell(Row, 6).style(myStyleOverR);
              RAID_R_O = RAID_R_O + 3;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsOAll.cell(Row, 6).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsOAll.cell(Row, 6).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'Completed')) {
              wsOAll.cell(Row, 6).style(myStyleOverB);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsOAll.cell(Row, 6).style(myStyleOverN);
            }
          } else {
            if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
              wsOAll.cell(Row, 6).style(myStyleOverA);
              RAID_R_O = RAID_R_O + 2;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'On Schedule')) {
              wsOAll.cell(Row, 6).style(myStyleOverG);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else if ((OAllDashDataFinal[i][0]['status'] === 'Completed')) {
              wsOAll.cell(Row, 6).style(myStyleOverB);
              RAID_R_O = RAID_R_O + 1;
              RAID_R_Cnt_O = RAID_R_Cnt_O + 1;
            } else {
              wsOAll.cell(Row, 6).style(myStyleOverN);
            }
          }
  
          if (OAllDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 7).date(OAllDashDataFinal[i][0]["Plan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 7).string("");
          }
  
          if (OAllDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 8).date(OAllDashDataFinal[i][0]["Plan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 8).string("");
          }

          if (OAllDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 9).date(OAllDashDataFinal[i][0]["Replan_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 9).string("");
          }
  
          if (OAllDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 10).date(OAllDashDataFinal[i][0]["RePlan_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 10).string("");
          }
  
          if (OAllDashDataFinal[i][0]["Actual_Start_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 11).date(OAllDashDataFinal[i][0]["Actual_Start_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 11).string("");
          }
  
          if (OAllDashDataFinal[i][0]["Actual_End_Date"] !== 'Invalid date') {
            wsOAll.cell(Row, 12).date(OAllDashDataFinal[i][0]["Actual_End_Date"]).style({
              numberFormat: 'dd-mmm-yyyy'
            });
          } else {
            wsOAll.cell(Row, 12).string("");
          }
  
          var stval = OAllDashDataFinal[i][0]['ktSummary']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsOAll.cell(Row, 13).string("");
          } else {
            stval.toString();
            wsOAll.cell(Row, 13).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
  
          var stval = OAllDashDataFinal[i][0]['Remarks']
          if ((stval === null) || (stval === '') || (stval === 'null')) {
            wsOAll.cell(Row, 14).string("");
          } else {
            stval.toString();
            wsOAll.cell(Row, 14).string(stval).style({
              alignment: {
                wrapText: true
              }
            });
          }
          // console.log(OAllDashDataFinal)
  
          var column = 15  
          let RAID_R = '';
          let RAID_R_Cnt = '';
  
          dt_Report = new Date();
          dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
          for (let RAID_C = 0; RAID_C < RAID.length; RAID_C++) {
            RAID_R = 0;
            RAID_R_Cnt = 0
            for (let APPR = 0; APPR < OAllDashDataRAID.length; APPR++) {
              if (OAllDashDataFinal[i][0]['epicName'] === OAllDashDataRAID[APPR]['epicName'] &&
                OAllDashDataFinal[i][0]['sprintName'] === OAllDashDataRAID[APPR]['sprintName'] &&
                OAllDashDataFinal[i][0]['Scope_BacklogActivity'] === OAllDashDataRAID[APPR]['Scope_BacklogActivity']) {
                var dt_targer = moment(OAllDashDataRAID[APPR]['TargetDate']);
                Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
                dt_targer = new Date(Tar_Date);
  
                if (OAllDashDataRAID[APPR]['Type'] === RAID[RAID_C]) {
  
                  if (((OAllDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                      (OAllDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                    // Red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                    //Amber
                    RAID_R = RAID_R + 2
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 2
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                    (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else {
                    if (OAllDashDataRAID[APPR]['ImpactConsequences'] === '') {
                      if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        // Green
                        RAID_R = RAID_R + 1
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 1
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
                        RAID_R = RAID_R + 3
                        RAID_R_Cnt = RAID_R_Cnt + 1
                        RAID_R_O = RAID_R_O + 3
                        RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                      }
                    } else {
                      RAID_R = RAID_R + 3
                      RAID_R_Cnt = RAID_R_Cnt + 1
                      RAID_R_O = RAID_R_O + 3
                      RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                    }
  
                  }
                }
              }
  
            }
  
            if (RAID_R / RAID_R_Cnt <= 1) {
              wsOAll.cell(Row, column).string('');
              wsOAll.cell(Row, column).style(myStyleOverG);
            } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
              wsOAll.cell(Row, column).string('');
              wsOAll.cell(Row, column).style(myStyleOverA);
            } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
              wsOAll.cell(Row, column).string('');
              wsOAll.cell(Row, column).style(myStyleOverR);
            } else {
              wsOAll.cell(Row, column).string('');
              wsOAll.cell(Row, column).style(myStyleOverN);
            }
            column = column + 1
          }
  
          if (RAID_R_O / RAID_R_Cnt_O <= 1) {
            wsOAll.cell(Row, 5).string('');
            wsOAll.cell(Row, 5).style(myStyleOverG);
          } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
            wsOAll.cell(Row, 5).string('');
            wsOAll.cell(Row, 5).style(myStyleOverA);
          } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
            wsOAll.cell(Row, 5).string('');
            wsOAll.cell(Row, 5).style(myStyleOverR);
          } else {
            wsOAll.cell(Row, 5).string('');
            wsOAll.cell(Row, 5).style(myStyleOverN);
          }
  
          Stringcheck(Row, column, 'Reason_Not_Green', i)
          Stringcheck(Row, column + 1, 'goto_Green', i)
          Stringcheck(Row, column + 2, 'Owner_Name', i)
  
        }
        // // console.log(column+3)
        wsOAll.cell(1, 1, OAllDashDataFinal.length + 1, sheet3data.length).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
  
        // sno number align
        wsOAll.cell(1, 1, OAllDashDataFinal.length + 1, 1).style(
  
          {
  
            alignment: {
              horizontal: 'center',
              vertical: 'center'
            }
          });
        //Data populatio End
  
  
        // Data population for Sheet1 start
  
        // Health
        let RAGval = 0;
        let count_RAG = 0;
        var RAGval_Overal = 0;
        var count_RAG_Overal = 0;
        var rowh = 11;
        var rowhO=rowhOEpic;
        var Flag = "No"
        //st
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          colPar = Epiclength[2]['stCol'] + 1;
         
          if (RAGval / count_RAG <= 1) {
            wsOver.cell(rowh, colPar).string('G');
            wsOver.cell(rowh, colPar).style(myStyleOverG);

            wsOver.cell(rowhO, 6).string('G');
            wsOver.cell(rowhO, 6).style(myStyleOverG);

          } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
            wsOver.cell(rowh, colPar).string('A');
            wsOver.cell(rowh, colPar).style(myStyleOverA);

            wsOver.cell(rowhO, 6 ).string('A');
            wsOver.cell(rowhO, 6).style(myStyleOverA);
          } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
            wsOver.cell(rowh, colPar).string('R');
            wsOver.cell(rowh, colPar).style(myStyleOverR);

            wsOver.cell(rowhO, 6).string('R');
            wsOver.cell(rowhO, 6 ).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, colPar).string('N');
            wsOver.cell(rowh, colPar).style(myStyleOverN);

            wsOver.cell(rowhO, 6 ).string('N');
            wsOver.cell(rowhO, 6 ).style(myStyleOverN);
          }
          //wsOver.cell(rowh, 3).string(EpicArry[Epiccount]);
        }       
        wsOver.cell(rowh, Epiclength[2]['stCol'], rowh, Epiclength[2]['stCol']+1).style(myStyleHead)
        Flag = 'Yes'
        rowh = rowh + 1  
        rowhO=rowhO+1
      }
  //Over All Stream Data Start ------------------
  if (OAllDashDataApp.length > 0) {
        // Schedule
        var rowh = 11;
        var rowhO=rowhOEpic;
        RAGval_Overal = 0;
        count_RAG_Overal = 0;
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAGval = 0;
          count_RAG = 0;
          for (let i = 0; i < OAllDashDataFinal.length; i++) {
            if (EpicArry[Epiccount] === OAllDashDataFinal[i][0]['epicName']) {
  
              dt_Report = new Date();
  
              if (OAllDashDataFinal[i][0]["Replan_Start_Date"] !== 'Invalid date') {
                dt_ReportPlanStDT = new Date(moment(OAllDashDataFinal[i][0]["Replan_Start_Date"]).format("MM-DD-YY"));
              } else {
                if (OAllDashDataFinal[i][0]["Plan_Start_Date"] !== 'Invalid date') {
                  dt_ReportPlanStDT = new Date(moment(OAllDashDataFinal[i][0]["Plan_Start_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanStDT = '';
                }
              }
  
              if (OAllDashDataFinal[i][0]["RePlan_End_Date"] !== 'Invalid date') {
                dt_ReportPlanEndDT = new Date(moment(OAllDashDataFinal[i][0]["RePlan_End_Date"]).format("MM-DD-YY"));
              } else {
                if (OAllDashDataFinal[i][0]["Plan_End_Date"] !== 'Invalid date') {
                  dt_ReportPlanEndDT = new Date(moment(OAllDashDataFinal[i][0]["Plan_End_Date"]).format("MM-DD-YY"));
                } else {
                  dt_ReportPlanEndDT = '';
                }
              }
  
              if ((dt_ReportPlanStDT !== '') && (dt_ReportPlanEndDT !== '')) {
  
                if (((OAllDashDataFinal[i][0]['status'] === 'Not Started')) &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanStDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule') &&
                  ((new Date(moment(dt_Report).format("MM-DD-YY")) >= new Date(moment(dt_ReportPlanEndDT).format("MM-DD-YY"))))) {
                  RAGval = RAGval + 3
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 3
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((OAllDashDataFinal[i][0]['status'] === 'On Schedule') || (OAllDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              } else {
                if ((OAllDashDataFinal[i][0]['status'] === 'Behind Schedule')) {
                  RAGval = RAGval + 2
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 2
                  count_RAG_Overal = count_RAG_Overal + 1
                } else if ((OAllDashDataFinal[i][0]['status'] === 'On Schedule') || (OAllDashDataFinal[i][0]['status'] === 'Completed')) {
                  RAGval = RAGval + 1
                  count_RAG = count_RAG + 1
                  RAGval_Overal = RAGval_Overal + 1
                  count_RAG_Overal = count_RAG_Overal + 1
                }
              }
  
            }
          }
          if (RAGval / count_RAG <= 1) {
            wsOver.cell(rowh, Epiclength[2]['stCol']).string('G');
            wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverG);

            wsOver.cell(rowhO, 5).string('G');
            wsOver.cell(rowhO, 5).style(myStyleOverG);
          } else if (RAGval / count_RAG > 1 && RAGval / count_RAG <= 2) {
            wsOver.cell(rowh, Epiclength[2]['stCol']).string('A');
            wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverA);

            wsOver.cell(rowhO, 5).string('A');
            wsOver.cell(rowhO, 5).style(myStyleOverA);
          } else if (RAGval / count_RAG > 2 && RAGval / count_RAG <= 3) {
            wsOver.cell(rowh, Epiclength[2]['stCol']).string('R');
            wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverR);

            wsOver.cell(rowhO, 5).string('R');
            wsOver.cell(rowhO, 5).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, Epiclength[2]['stCol']).string('N');
            wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverN);

            wsOver.cell(rowhO, 5).string('N');
            wsOver.cell(rowhO, 5).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhO=rowhO+1
  
        }
  
        var rowh = 9;
        var rowhO=rowhOTra;
        if (RAGval_Overal / count_RAG_Overal <= 1) {
          wsOver.cell(rowh, Epiclength[2]['stCol']).string('G');
          wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverG);

          wsOver.cell(rowhO, 5).string('G');
            wsOver.cell(rowhO, 5).style(myStyleOverG);
        } else if (RAGval_Overal / count_RAG_Overal > 1 && RAGval_Overal / count_RAG_Overal <= 2) {
          wsOver.cell(rowh, Epiclength[2]['stCol']).string('A');
          wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverA);

          wsOver.cell(rowhO, 5).string('A');
            wsOver.cell(rowhO, 5).style(myStyleOverA);
        } else if (RAGval_Overal / count_RAG_Overal > 2 && RAGval_Overal / count_RAG_Overal <= 3) {
          wsOver.cell(rowh, Epiclength[2]['stCol']).string('R');
          wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverR);

          wsOver.cell(rowhO, 5).string('R');
            wsOver.cell(rowhO, 5).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, Epiclength[2]['stCol']).string('N');
          wsOver.cell(rowh, Epiclength[2]['stCol']).style(myStyleOverN);

          wsOver.cell(rowhO, 5).string('N');
            wsOver.cell(rowhO, 5).style(myStyleOverN);
        }
  
        // RAID
        var rowh = 11;
        var rowhO=rowhOEpic;
         let col_trans = Epiclength[2]['EndCol']
        let RAID_R = '';
        let RAID_R_Cnt = ''
        let RAID_R_O = '';
        let RAID_R_Cnt_O = ''
        dt_Report = new Date();
        dt_ReportNetWeek = new Date((moment(dt_Report).day(12).format("MM-DD-YY")))
  
        RAID_R_Cnt_O = 0;
        RAID_R_O = 0;
  
        for (let Epiccount = 0; Epiccount < EpicArry.length; Epiccount++) {
          RAID_R = 0;
          RAID_R_Cnt = 0
          for (let APPR = 0; APPR < OAllDashDataRAID.length; APPR++) {
            if (EpicArry[Epiccount] === OAllDashDataRAID[APPR]['epicName']) {
              var dt_targer = moment(OAllDashDataRAID[APPR]['TargetDate']);
              Tar_Date = moment([dt_targer.year(), dt_targer.month(), dt_targer.date()]).format("YYYY-MM-DD");
              dt_targer = new Date(Tar_Date);
  
              if (((OAllDashDataRAID[APPR]['ImpactConsequences'] === '1-Low') ||
                  (OAllDashDataRAID[APPR]['ImpactConsequences'] === '2-Medium')) &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_Report).format("YYYY-MM-DD")))) {
                // Red
                RAID_R = RAID_R + 3
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 3
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                //Amber
                RAID_R = RAID_R + 2
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 2
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
              } else if ((OAllDashDataRAID[APPR]['ImpactConsequences'] === '3-High') &&
                (new Date(moment(dt_targer).format("YYYY-MM-DD")) > new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD")))) {
  
                // Green
                RAID_R = RAID_R + 1
                RAID_R_Cnt = RAID_R_Cnt + 1
                RAID_R_O = RAID_R_O + 1
                RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
              } else {
                if (OAllDashDataRAID[APPR]['ImpactConsequences'] === '') {
                  if (new Date(moment(dt_targer).format("YYYY-MM-DD")) >= new Date(moment(dt_Report).format("YYYY-MM-DD"))) {
  
                    // Green
                    RAID_R = RAID_R + 1
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 1
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
  
                  } else if (new Date(moment(dt_targer).format("YYYY-MM-DD")) <= new Date(moment(dt_ReportNetWeek).format("YYYY-MM-DD"))) {
  
                    //red
                    RAID_R = RAID_R + 3
                    RAID_R_Cnt = RAID_R_Cnt + 1
                    RAID_R_O = RAID_R_O + 3
                    RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                  }
                } else {
                  // Red
                  RAID_R = RAID_R + 3
                  RAID_R_Cnt = RAID_R_Cnt + 1
                  RAID_R_O = RAID_R_O + 3
                  RAID_R_Cnt_O = RAID_R_Cnt_O + 1
                }
  
              }
  
            }
          }
          //Epiclength[0]['EndCol']
          if (RAID_R / RAID_R_Cnt <= 1) {
            wsOver.cell(rowh, col_trans).string('G');
            wsOver.cell(rowh, col_trans).style(myStyleOverG);

            wsOver.cell(rowhO, 6).string('G');
            wsOver.cell(rowhO, 6).style(myStyleOverG);

          } else if (RAID_R / RAID_R_Cnt > 1 && RAID_R / RAID_R_Cnt <= 2) {
            wsOver.cell(rowh, col_trans).string('A');
            wsOver.cell(rowh, col_trans).style(myStyleOverA);

            wsOver.cell(rowhO, 6).string('A');
            wsOver.cell(rowhO, 6).style(myStyleOverA);
          } else if (RAID_R / RAID_R_Cnt > 2 && RAID_R / RAID_R_Cnt <= 3) {
            wsOver.cell(rowh, col_trans).string('R');
            wsOver.cell(rowh, col_trans).style(myStyleOverR);

            wsOver.cell(rowhO, 6).string('R');
            wsOver.cell(rowhO, 6).style(myStyleOverR);
          } else {
            wsOver.cell(rowh, col_trans).string('N');
            wsOver.cell(rowh, col_trans).style(myStyleOverN);

            wsOver.cell(rowhO, 6).string('N');
            wsOver.cell(rowhO, 6).style(myStyleOverN);
          }
          rowh = rowh + 1
          rowhO=rowhO+1
        }
  
  
        var rowh = 9;
        var rowhO=rowhOTra;
        if (RAID_R_O / RAID_R_Cnt_O <= 1) {
          wsOver.cell(rowh, col_trans).string('G');
          wsOver.cell(rowh, col_trans).style(myStyleOverG);

          wsOver.cell(rowhO, 6).string('G');
          wsOver.cell(rowhO, 6).style(myStyleOverG);

        } else if (RAID_R_O / RAID_R_Cnt_O > 1 && RAID_R_O / RAID_R_Cnt_O <= 2) {
          wsOver.cell(rowh, col_trans).string('A');
          wsOver.cell(rowh, col_trans).style(myStyleOverA);

          
          wsOver.cell(rowhO, 6).string('A');
          wsOver.cell(rowhO, 6).style(myStyleOverA);
        } else if (RAID_R_O / RAID_R_Cnt_O > 2 && RAID_R_O / RAID_R_Cnt_O <= 3) {
          wsOver.cell(rowh, col_trans).string('R');
          wsOver.cell(rowh, col_trans).style(myStyleOverR);

          
          wsOver.cell(rowhO, 6).string('R');
          wsOver.cell(rowhO, 6).style(myStyleOverR);
        } else {
          wsOver.cell(rowh, col_trans).string('N');
          wsOver.cell(rowh, col_trans).style(myStyleOverN);

          
          wsOver.cell(rowhO, 6).string('N');
          wsOver.cell(rowhO, 6).style(myStyleOverN);
        }
  } else {
        wsOAll.cell(2, 1).string('No Records Available.');
        wsOAll.cell(2, 1, 2, sheet3data.length, true).style({
          font: {
            name: 'Arial',
            size: 8,
          },
  
          border: {
            left: {
              style: 'thin'
            },
            right: {
              style: 'thin'
            },
            top: {
              style: 'thin'
            },
            bottom: {
              style: 'thin'
            }
          }
        });
  }
  //Over All Stream Data End----------------
      
  //************************************Read Sheet Start*********************************************/
    var wsReadme = wb.addWorksheet('Readme', options);
		res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
    wb.write(fileOveralSchedule);
    var Headingstyle = wb.createStyle({

			font: {
				name: 'Tahoma',
        size: 24,
        color: '#00B0F0',
        bold : true,
        italics: true,
			},
			alignment: {
        vertical: 'center',
       
			},
			
		});

    var Datastyle = wb.createStyle({
			font: {
				name: 'Tahoma',
        size: 10,
          },
			alignment: {
      vertical: 'top',
      wrapText: true
      },
			
    });
    
    var StyleR = wb.createStyle({
      font: {
				name: 'Tahoma',
        size: 10,
        color: '#FF0000',
               },
			alignment: {
      vertical: 'top',
      wrapText: true
      },
		
    });

    var StyleA = wb.createStyle({
      font: {
				name: 'Tahoma',
        size: 10,
        color: '#FFC000',
               },
			alignment: {
      vertical: 'top',
      wrapText: true
      },		
    });

    var StyleG = wb.createStyle({
      font: {
				name: 'Tahoma',
        size: 10,
        color: '#00FF00',
      
        },
			alignment: {
      vertical: 'top',
      wrapText: true
      },		
    });

    var StyleN = wb.createStyle({
      font: {
				name: 'Tahoma',
        size: 10,
        color: '#BFBFBF',
      
        },
			alignment: {
      vertical: 'top',
      wrapText: true
      },		
    });

    var StyleB= wb.createStyle({
      font: {
				name: 'Tahoma',
        size: 10,
        color: '#00B0F0',
      
        },
			alignment: {
      vertical: 'top',
      wrapText: true
      },		
    });

    wsReadme.column(1).setWidth(0.50);
    wsReadme.row(1).setHeight(2);
    wsReadme.row(3).setHeight(2);

    wsReadme.column(2).setWidth(27);
    wsReadme.column(3).setWidth(100);

    wsReadme.cell(2, 2).string('Transition Program Dashboard').style(Headingstyle);
    wsReadme.cell(5, 2).string('Instructions').style(Headingstyle);

    // 1st Column data , 2 coulmn data, Row number,Column number
    const Readmedata = [
     {
      ColumnHeading: 'Overall Transition Summary',
      ColumnData: 'RAG health statistics on overall transition program (AT/ ST/ Other) & health of transition project across EPICs.',
      Row: 7,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: 'AT Dashboard',
      ColumnData: 'Tracks AT health across all applications.',
      Row: 8,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: 'ST Dashboard',
      ColumnData: 'Tracks ST health as per Transition scope. AT sprints may not map to ST sprints & hence, TM is advised to follow ST specific transition timelines for this dashboard.',
      Row: 9,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: 'Other Dashboard',
      ColumnData: 'Tracks other health as per Transition scope. TM is advised to customize it based on the scope. Other sprints may not map to AT/ST sprints & hence, TM is advised to follow scope specific transition timelines for this dashboard.',
      Row: 10,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: 'Transition Schedule Logic (AT/ST/Other Dashboard Sheets)',
      ColumnData: 'RAG health Computed for each of the Applications, ST scope & Backlog Activity in respective AT/ST/Other Dashboard Sheets and it depends on the below criteria based on the Status and the plan/re-plan dates.',
      Row: 11,
       Col: 2,
       style:Datastyle,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Status is Not Started/Not Planned/ and if there are No Actual or Plan Dates - Grey. There is no weightage assigned',
      Row: 12,
       Col: 2,
       style:StyleN,
    },
    {
      ColumnHeading: '',
      ColumnData:   '* Status is Not Started and Report generated date is greater than plan/Re-plan End date - Red (Rating of 3 considered for computation purposes)',
      Row: 13,
       Col: 2,
       style:StyleR,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Status is Behind schedule and Report generated date is greater than plan/Re-plan End date - Red (Rating of 3 considered for computation purposes)',
      Row: 14,
       Col: 2,
       style:StyleR,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Status is Behind schedule and Report generated date is less than plan/Re-plan End date. - Amber (Rating of 2 considered for computation purposes)',
      Row: 15,
       Col: 2,
       style:StyleA,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Status is Onschedule. - Green (Rating of 1 considered for computation purposes)',
      Row: 16,
       Col: 2,
       style:StyleG,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Status is Completed. - Blue (Rating of 1 considered for computation purposes)',
      Row: 17,
       Col: 2,
       style:StyleB,
    }, 
    {
      ColumnHeading: 'Tracker RAG Logic        (AT/ST/Other Dashboard Sheets)',
      ColumnData: 'RAG health assigned by the user for each of the Trackers across Applications, ST scope & Backlog Activity in respective AT/ST/Other Dashboard Sheets',
       Row: 18,
      Col: 2,
      style:Datastyle,
    },   
    {
      ColumnHeading: '',
      ColumnData: '* If the User Input is "Red" (Rating of 3 considered for computation purposes)',
       Row: 19,
      Col: 2,
      style:StyleR,
    },
    {
    ColumnHeading: '',
    ColumnData: '* If the User Input is "Amber" (Rating of 2 considered for computation purposes)',
    Row: 20,
    Col: 2,
    style:StyleA,
  },
  {
  ColumnHeading: '',
  ColumnData:  '* If the User Input is "Green" (Rating of 1 considered for computation purposes)',
  Row: 21,
  Col: 2,
  style:StyleG,
},
{
  ColumnHeading: 'RAID RAG Logic          (AT/ST/Other Dashboard Sheets)',
  ColumnData: 'RAG health computed for RAID of each of the Applications, ST scope & Backlog Activity in respective AT/ST/Other Dashboard Sheets and it depends on the below criteria based on the Status, target Date and Impact.',
   Row: 22,
  Col: 2,
  style:Datastyle,
},
    {
      ColumnHeading: '',
      ColumnData: '* Any overdue RAID which is in Open status as on report generation date will be rated Red (Rating of 3 considered for computation purposes)',
       Row: 23,
      Col: 2,
      style:StyleR,
    },
    {
      ColumnHeading: '',
      ColumnData:  '* Any RAID which is in Open status categorized as high impact and within the target  date (falling due in next 7 days)  will be rated Amber (Rating of 2 considered for computation purposes)',
      Row: 24,
      Col: 2,
      style:StyleA,
    },
    {
      ColumnHeading: '',
      ColumnData: '* Any RAID which is in Open status categorized as low/medium impact and within the target date will be rated Green (Rating of 1 considered for computation purposes)',
      Row: 25,
      Col: 2,
      style:StyleG,
    },
    {
      ColumnHeading: 'RAG Logic                           (Overall Transition Summary Sheet)',
      ColumnData: 'Transition Health RAG - It is the average calculated RAG Weightage for all the EPICs(across AT,ST,Others) and RAG assigned as per the following values ',
       Row: 26,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Red - If the calculated weighted average is > 2 and <= 3',
       Row: 27,
      Col: 2,
      style:StyleR,
    },
    {
      ColumnHeading: '',
      ColumnData:  'Amber - If the calculated weighted average is > 1 and <= 2',
      Row: 28,
      Col: 2,
      style:StyleA,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Green - If the calculated weighted average is < = 1',
       Row: 29,
      Col: 2,
      style:StyleG,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Epic RAG - It is Epic wise average calculated RAG health for all the Transition Status, Tracker and RAID in respective AT/ST/Other dashboard Sheets. RAG assigned as per the following values',
       Row: 30,
      Col: 2,
      style:Datastyle,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Red - If the calculated weighted average is > 2 and <= 3',
       Row: 31,
      Col: 2,
      style:StyleR,
    },
    {
      ColumnHeading: '',
      ColumnData:  'Amber - If the calculated weighted average is > 1 and <= 2',
      Row: 32,
      Col: 2,
      style:StyleA,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Green - If the calculated weighted average is < = 1',
       Row: 33,
      Col: 2,
      style:StyleG,
    },
    {
      ColumnHeading: '',
      ColumnData: 'Note: The calculated weightage is same as per the individual sheets.',
       Row: 34,
      Col: 2,
      style:Datastyle,
    },    
  ]

  for (let i = 0; i < Readmedata.length; i++) {
    wsReadme.cell(Readmedata[i].Row,Readmedata[i].Col).string(Readmedata[i].ColumnHeading).style(Datastyle);
        wsReadme.cell(Readmedata[i].Row,Readmedata[i].Col+1).string(Readmedata[i].ColumnData).style(Readmedata[i].style);
    
  }
    // end array
    //************************************Read Sheet End************************************************/
  
  
      wb.write(fileOveralSchedule);
    }, 10000)
  
    setTimeout(() => {
      var filePath = __dirname + '\\' + fileOveralSchedule;
      res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
      //  res.setHeader('Content-Type', 'application/octet-stream');
      res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
      setTimeout(() => {
        try {
          // //// console.log('remove' +filePath)
          fs.unlinkSync(filePath)
          //file removed
        } catch (err) {
          console.error(err)
        }
      }, 21000)
      return res.sendFile(filePath);
    }, 20000)
  
  
  });
//***********************************Overall Tran Dash End ***************************************************************
//***********************************AT Schedule Summary Report Start ********************************
app.get("/getexportATSchSummary/:UserNm/:IntegrationID/:AccntNm", (req, res) => {

	var ATSumSchval = [];
	var STSumSchval = [];
	var OAllSumSchval = [];
	var UserNm = req.params.UserNm;
	var IntegrationID = req.params.IntegrationID;
	var AccntNm = req.params.AccntNm;
	//fileATSumSchedule = "ATSummarySchedule-"+UserNm.replace(/\s/g,'')+".xlsx"
	fileATSumSchedule = "ScopeSummarySchedule-" + AccntNm.replace(/\s/g, '') + ".xlsx"
	var filePath = __dirname + '\\' + fileATSumSchedule;
	var options = {
		sheetView: {
			'showGridLines': false, // Flag indicating whether the sheet should have gridlines enabled or disabled during view
		}
	};

	var wb = new xl.Workbook();
	// Add Worksheets to the workbook
	var ws = wb.addWorksheet('AT Schedule Summary', options);
	var wsST = wb.addWorksheet('ST Schedule Summary', options);
	var wsOAll = wb.addWorksheet('Schedule Summary for Others', options);
	res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
	res.setHeader('Content-Disposition', 'attachment; filename=' + fileATSumSchedule);
	wb.write(fileATSumSchedule);


	//AT Summary
	setTimeout(() => {
		queryATSumSchedule = "SELECT ep.epicName, sp.sprintName, ai.AppName,ai.appCategory," +
			"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date," +
			"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,st.psCompleted_per,st.asCompleted_per," +
			"st.sch_Var, st.ktSummary, st.Remarks " +
			"FROM application_information ai " +
			"LEFT OUTER JOIN sprintscope sc ON ai.AppUNID=sc.AppUNID " +
			"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
			"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
			"LEFT OUTER JOIN appln_level_sprint_plan st " +
			"ON st.Scope_UNID = sc.Scope_UNID " +
			"WHERE ai.IntegrationID='" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC";
		pool.getConnection().then(conn => {
				conn.query(queryATSumSchedule).then((queryATSumScheduleValues) => {
					ATSumSchval = JSON.parse(JSON.stringify(queryATSumScheduleValues));
					conn.end();
				})
			})
			.catch(err => {
				res.send({
					"Fetch": "Fail"
				})
				conn.end();
			})
			.catch(err => {
				//not connected
			})
	}, 2000);

	//ST Summary
	setTimeout(() => {
		querySTSumSchedule = "SELECT ep.epicName, sp.sprintName," +
			"concat(stc.STScopeLevel,'-',stc.STScope,'-',stc.STDetailedScope,'-',stc.STScopeActivity) as STScope," +
			"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date," +
			"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,st.psCompleted_per,st.asCompleted_per," +
			"st.sch_Var, st.ktSummary, st.Remarks " +
			"FROM masterstinfo stc " +
			" LEFT OUTER JOIN sprintscope sc ON stc.MasterSTInfoid=sc.STUNID " +
			"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
			"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
			"LEFT OUTER JOIN appln_level_sprint_plan st " +
			"ON st.Scope_UNID = sc.Scope_UNID " +
			"WHERE stc.IntegrationID='" + IntegrationID + "' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC";
		pool.getConnection().then(conn => {
				conn.query(querySTSumSchedule).then((querySTSumScheduleValues) => {
					STSumSchval = JSON.parse(JSON.stringify(querySTSumScheduleValues));
					conn.end();
				})
			})
			.catch(err => {
				res.send({
					"Fetch": "Fail"
				})
				conn.end();
			})
			.catch(err => {
				//not connected
			})
	}, 2000);

	//OAll Summary
	setTimeout(() => {
		queryOAllSumSchedule = "SELECT ep.epicName, sp.sprintName,sc.Scope_BacklogActivity," +
			"st.status,st.Plan_Start_Date, st.Plan_End_Date, st.Replan_Start_Date," +
			"st.RePlan_End_Date,st.Actual_Start_Date, st.Actual_End_Date,st.psCompleted_per,st.asCompleted_per," +
			"st.sch_Var, st.ktSummary, st.Remarks " +
			"FROM sprintscope sc " +
			"LEFT OUTER JOIN epics ep ON ep.epicUNID=sc.epicUNID " +
			"LEFT OUTER JOIN sprint sp ON sp.sprintUNID=sc.sprintUNID " +
			"LEFT OUTER JOIN appln_level_sprint_plan st " +
			"ON st.Scope_UNID = sc.Scope_UNID " +
			"WHERE sc.Scope_IntegrationID='" + IntegrationID + "'and sc.Scope_Level='Others' and ep.epicName<>'' and sp.sprintName<>'' ORDER BY 1 & 2 ASC";

		pool.getConnection().then(conn => {
				conn.query(queryOAllSumSchedule).then((queryOAllSumScheduleValues) => {
					OAllSumSchval = JSON.parse(JSON.stringify(queryOAllSumScheduleValues));
					conn.end();
				})
			})
			.catch(err => {
				res.send({
					"Fetch": "Fail"
				})
				conn.end();
			})
			.catch(err => {
				//not connected
			})
	}, 2000);

	var myStyle = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#1D3649',
			fgColor: '#1D3649',
		},
		font: {
			name: 'Arial',
			size: 8,
			bold: true,
			color: 'FFFFFF',
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
			wrapText: true
		},
	});

	var myStyleOverB = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#00B0F0',
			fgColor: '#00B0F0',
		},
		font: {
			name: 'Tahoma',
			size: 8,
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
		},
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});

	var myStyleOverG = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#00FF00',
			fgColor: '#00FF00',
		},
		font: {
			name: 'Tahoma',
			size: 8,
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
		},
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
  });

	var myStyleOverA = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#FFC000',
			fgColor: '#FFC000',
		},
		font: {
			name: 'Tahoma',
			size: 8,
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
		},
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});

	var myStyleOverR = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#FF0000',
			fgColor: '#FF0000',
		},
		font: {
			name: 'Tahoma',
			size: 8,
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
		},
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});

	var myStyleOverN = wb.createStyle({
		fill: {
			type: 'pattern',
			patternType: 'solid',
			bgColor: '#BFBFBF',
			fgColor: '#BFBFBF',
		},
		font: {
			name: 'Tahoma',
			size: 8,
		},
		alignment: {
			horizontal: 'center',
			vertical: 'center',
		},
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});

	//AT data heading populate
	const sheet1data = [{
			header: 'S.No',
			width: 5
		},
		{
			header: 'EPIC',
			width: 15
		},
		{
			header: 'Sprint',
			width: 15
		},
		{
			header: 'App Name',
			width: 20
		},
		{
			header: 'App Category',
			width: 8
		},
		{
			header: 'Transition Schedule',
			width: 15
		},
		{
			header: 'Planned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Actual Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Schedule Variance',
			width: 7.4,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Summary',
			width: 25
		},
		{
			header: 'Remarks',
			width: 25
		},
	];

	var sheet1Row = 1;
	for (let i = 0; i < sheet1data.length; i += 1) {
		ws.cell(sheet1Row, i + 1).string(sheet1data[i].header);
		ws.cell(sheet1Row, i + 1).style(myStyle);
		ws.column(i + 1).setWidth(sheet1data[i].width);
	}

	ws.cell(1, 1, 1, sheet1data.length).style({
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});
	// Heading population AT End


	//ST data heading populate
	const sheet2data = [{
			header: 'S.No',
			width: 5
		},
		{
			header: 'EPIC',
			width: 15
		},
		{
			header: 'Sprint',
			width: 15
		},
		{
			header: 'ST Scope',
			width: 20
		},
		{
			header: 'Transition Schedule',
			width: 15
		},
		{
			header: 'Planned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Actual Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Schedule Variance',
			width: 7.4,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Summary',
			width: 25
		},
		{
			header: 'Remarks',
			width: 25
		},
	];

	var sheet2Row = 1;
	for (let i = 0; i < sheet2data.length; i += 1) {
		wsST.cell(sheet2Row, i + 1).string(sheet2data[i].header);
		wsST.cell(sheet2Row, i + 1).style(myStyle);
		wsST.column(i + 1).setWidth(sheet2data[i].width);
	}

	wsST.cell(1, 1, 1, sheet2data.length).style({
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});
	// Heading population ST End

	//OAll data heading populate
	const sheet3data = [{
			header: 'S.No',
			width: 5
		},
		{
			header: 'EPIC',
			width: 15
		},
		{
			header: 'Sprint',
			width: 15
		},
		{
			header: 'Backlog Activity',
			width: 20
		},
		{
			header: 'Transition Schedule',
			width: 15
		},
		{
			header: 'Planned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Replanned End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual Start Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Actual End Date',
			width: 8.5,
			style: {
				numFmt: 'mm-dd-yyyy'
			}
		},
		{
			header: 'Planned Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Actual Sprint % Completion',
			width: 12,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Schedule Variance',
			width: 7.4,
			style: {
				numFmt: '0'
			}
		},
		{
			header: 'Summary',
			width: 25
		},
		{
			header: 'Remarks',
			width: 25
		},
	];

	var sheet3Row = 1;
	for (let i = 0; i < sheet3data.length; i += 1) {
		wsOAll.cell(sheet3Row, i + 1).string(sheet3data[i].header);
		wsOAll.cell(sheet3Row, i + 1).style(myStyle);
		wsOAll.column(i + 1).setWidth(sheet3data[i].width);
	}

	wsOAll.cell(1, 1, 1, sheet3data.length).style({
		border: {
			left: {
				style: 'thin'
			},
			right: {
				style: 'thin'
			},
			top: {
				style: 'thin'
			},
			bottom: {
				style: 'thin'
			}
		}
	});
	// Heading population OAll End


	setTimeout(() => {

		//AT Data population start
		if (ATSumSchval.length > 0) {
			for (let i = 2; i < ATSumSchval.length + 2; i++) {
				ws.cell(i, 1).number(i - 1);
				ws.cell(i, 1).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				})
				ws.cell(i, 2).string(ATSumSchval[i - 2]["epicName"]);
				ws.cell(i, 3).string(ATSumSchval[i - 2]["sprintName"]);
				ws.cell(i, 4).string(ATSumSchval[i - 2]["AppName"]);
				ws.cell(i, 4).style({
					alignment: {
						wrapText: true,
					}
				});
				var appcatval = ATSumSchval[i - 2]["appCategory"];
				if ((appcatval === null) || (appcatval === '') || (appcatval === 'null')) {
					ws.cell(i, 5).string("");
				} else {
					appcatval.toString();
					ws.cell(i, 5).string(appcatval);
				}
				var stval = ATSumSchval[i - 2]["status"];
				if ((stval === null) || (stval === '') || (stval === 'null')) {
					ws.cell(i, 6).string("Not Planned");
				} else {
					stval.toString();
					ws.cell(i, 6).string(stval);
				}

				dt_Report = new Date();

				if (moment(ATSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanStDT = new Date(moment(ATSumSchval[i - 2]["Replan_Start_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanStDT = new Date(ATSumSchval[i-2]["Replan_Start_Date"]);
				} else {
					if (moment(ATSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanStDT = new Date(moment(ATSumSchval[i - 2]["Plan_Start_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanStDT = new Date(ATSumSchval[i-2]["Plan_Start_Date"]);
					} else {
						dt_ReportPlanStDT = '';
					}
				}

				if (moment(ATSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanEndDT = new Date(moment(ATSumSchval[i - 2]["RePlan_End_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanEndDT = new Date(ATSumSchval[i-2]["RePlan_End_Date"]);
				} else {
					if (moment(ATSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanEndDT = new Date(moment(ATSumSchval[i - 2]["Plan_End_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanEndDT = new Date(ATSumSchval[i-2]["Plan_End_Date"]);
					} else {
						dt_ReportPlanEndDT = '';
					}
				}

				if ((dt_ReportPlanStDT !== 'Invalid Date') && (dt_ReportPlanEndDT !== 'Invalid Date')) {
					if ((ATSumSchval[i - 2]['status'] === 'Not Started') &&
						(new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanStDT).format("YYYY-MM-DD")))) {
						ws.cell(i, 6).style(myStyleOverR);

					} else if ((ATSumSchval[i - 2]['status'] === 'Behind Schedule') &&
						((new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanEndDT).format("YYYY-MM-DD"))))) {
						ws.cell(i, 6).style(myStyleOverR);

					} else if ((ATSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						ws.cell(i, 6).style(myStyleOverA);

					} else if ((ATSumSchval[i - 2]['status'] === 'On Schedule')) {
						ws.cell(i, 6).style(myStyleOverG);

					} else if ((ATSumSchval[i - 2]['status'] === 'Completed')) {
						ws.cell(i, 6).style(myStyleOverB);

					} else {
						ws.cell(i, 6).style(myStyleOverN);

					}
				} else {
					if ((ATSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						ws.cell(i, 6).style(myStyleOverA);
					} else if ((ATSumSchval[i - 2]['status'] === 'On Schedule')) {
						ws.cell(i, 6).style(myStyleOverG);
					} else if ((ATSumSchval[i - 2]['status'] === 'Completed')) {
						ws.cell(i, 6).style(myStyleOverB);
					} else {
						ws.cell(i, 6).style(myStyleOverN);
					}
				}

				var plstval = ATSumSchval[i - 2]["Plan_Start_Date"];
				if ((plstval === null) || (plstval === '') || (plstval === 'null')) {
					ws.cell(i, 7).string("");
				} else {
					//.style({numberFormat: 'dd-mmm-yyyy'})
					var dt = moment(ATSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 7).string(moment(ATSumSchval[i - 2]["Plan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 7).string("");
					}
				}
				var pletval = ATSumSchval[i - 2]["Plan_End_Date"];
				if ((pletval === null) || (pletval === '') || (pletval === 'null')) {
					ws.cell(i, 8).string("");
				} else {
					var dt = moment(ATSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 8).string(moment(ATSumSchval[i - 2]["Plan_End_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 8).string("");
					}
				}
				var restval = ATSumSchval[i - 2]["Replan_Start_Date"];
				if ((restval === null) || (restval === '') || (restval === 'null')) {
					ws.cell(i, 9).string("");
				} else {
					var dt = moment(ATSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 9).string(moment(ATSumSchval[i - 2]["Replan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 9).string("");
					}
				}
				var reetval = ATSumSchval[i - 2]["RePlan_End_Date"];
				if ((reetval === null) || (reetval === '') || (reetval === 'null')) {
					ws.cell(i, 10).string("");
				} else {
					var dt = moment(ATSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 10).string(moment(ATSumSchval[i - 2]["RePlan_End_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 10).string("");
					}
				}
				var Acstval = ATSumSchval[i - 2]["Actual_Start_Date"];
				if ((Acstval === null) || (Acstval === '') || (Acstval === 'null')) {
					ws.cell(i, 11).string("");
				} else {
					var dt = moment(ATSumSchval[i - 2]["Actual_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 11).string(moment(ATSumSchval[i - 2]["Actual_Start_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 11).string("");
					}
				}
				var Acetval = ATSumSchval[i - 2]["Actual_End_Date"];
				if ((Acetval === null) || (Acetval === '') || (Acetval === 'null')) {
					ws.cell(i, 12).string("");
				} else {
					var dt = moment(ATSumSchval[i - 2]["Actual_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						ws.cell(i, 12).string(moment(ATSumSchval[i - 2]["Actual_End_Date"]).format("DD-MMM-YY"));
					} else {
						ws.cell(i, 12).string("");
					}
				}
				var psperval = ATSumSchval[i - 2]["psCompleted_per"];
				if ((psperval === null) || (psperval === '') || (psperval === 'null')) {
					ws.cell(i, 13).string("");
				} else {
					ws.cell(i, 13).number(psperval);
				}
				var asperval = ATSumSchval[i - 2]["asCompleted_per"];
				if ((asperval === null) || (asperval === '') || (asperval === 'null')) {
					ws.cell(i, 14).string("");
				} else {
					ws.cell(i, 14).number(asperval);
				}
				var shval = ATSumSchval[i - 2]["sch_Var"];
				if ((shval === null) || (shval === '') || (shval === 'null')) {
					ws.cell(i, 15).string("");
				} else {
					ws.cell(i, 15).number(shval);
				}
				var KTval = ATSumSchval[i - 2]["ktSummary"];
				if ((KTval === null) || (KTval === '') || (KTval === 'null')) {
					ws.cell(i, 16).string("");
				} else {
					KTval.toString();
					ws.cell(i, 16).string(KTval);
					ws.cell(i, 16).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				var Remval = ATSumSchval[i - 2]["Remarks"];
				if ((Remval === null) || (Remval === '') || (Remval === 'null')) {
					ws.cell(i, 17).string("");
				} else {
					Remval.toString();
					ws.cell(i, 17).string(Remval);
					ws.cell(i, 17).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				ws.cell(1, 1, i, sheet1data.length).style({
					font: {
						name: 'Arial',
						size: 8,
					},
					border: {
						left: {
							style: 'thin'
						},
						right: {
							style: 'thin'
						},
						top: {
							style: 'thin'
						},
						bottom: {
							style: 'thin'
						}
					}
				});
				ws.cell(1, 7, i, 15).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				});


				wb.write(fileATSumSchedule);
			}
		} else {

			ws.cell(2, 1).string("No Record Exists");
			ws.cell(2, 1, 2, sheet1data.length, true).style({
				border: {
					left: {
						style: 'thin'
					},
					right: {
						style: 'thin'
					},
					top: {
						style: 'thin'
					},
					bottom: {
						style: 'thin'
					}
				}
			});
			wb.write(fileATSumSchedule);
		}
		//AT Data population End

		//ST Data population start
		if (STSumSchval.length > 0) {
			for (let i = 2; i < STSumSchval.length + 2; i++) {
				wsST.cell(i, 1).number(i - 1);
				wsST.cell(i, 1).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				})
				wsST.cell(i, 2).string(STSumSchval[i - 2]["epicName"]);
				wsST.cell(i, 3).string(STSumSchval[i - 2]["sprintName"]);
				wsST.cell(i, 4).string(STSumSchval[i - 2]["STScope"]).style({
					alignment: {
						wrapText: true
					}
				});;
				var stval = STSumSchval[i - 2]["status"];
				if ((stval === null) || (stval === '') || (stval === 'null')) {
					wsST.cell(i, 5).string("Not Planned");
				} else {
					stval.toString();
					wsST.cell(i, 5).string(stval);
				}

				dt_Report = new Date();

				if (moment(STSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanStDT = new Date(moment(STSumSchval[i - 2]["Replan_Start_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanStDT = new Date(STSumSchval[i-2]["Replan_Start_Date"]);
				} else {
					if (moment(STSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanStDT = new Date(moment(STSumSchval[i - 2]["Plan_Start_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanStDT = new Date(STSumSchval[i-2]["Plan_Start_Date"]);
					} else {
						dt_ReportPlanStDT = '';
					}
				}

				if (moment(STSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanEndDT = new Date(moment(STSumSchval[i - 2]["RePlan_End_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanEndDT = new Date(STSumSchval[i-2]["RePlan_End_Date"]);
				} else {
					if (moment(STSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanEndDT = new Date(moment(STSumSchval[i - 2]["Plan_End_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanEndDT = new Date(STSumSchval[i-2]["Plan_End_Date"]);
					} else {
						dt_ReportPlanEndDT = '';
					}
				}

				if ((dt_ReportPlanStDT !== 'Invalid Date') && (dt_ReportPlanEndDT !== 'Invalid Date')) {
					if ((STSumSchval[i - 2]['status'] === 'Not Started') &&
						(new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanStDT).format("YYYY-MM-DD")))) {
						wsST.cell(i, 5).style(myStyleOverR);

					} else if ((STSumSchval[i - 2]['status'] === 'Behind Schedule') &&
						((new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanEndDT).format("YYYY-MM-DD"))))) {
						wsST.cell(i, 5).style(myStyleOverR);

					} else if ((STSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						wsST.cell(i, 5).style(myStyleOverA);

					} else if ((STSumSchval[i - 2]['status'] === 'On Schedule')) {
						wsST.cell(i, 5).style(myStyleOverG);

					} else if ((STSumSchval[i - 2]['status'] === 'Completed')) {
						wsST.cell(i, 5).style(myStyleOverB);

					} else {
						wsST.cell(i, 5).style(myStyleOverN);

					}
				} else {
					if ((STSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						wsST.cell(i, 5).style(myStyleOverA);
					} else if ((STSumSchval[i - 2]['status'] === 'On Schedule')) {
						wsST.cell(i, 5).style(myStyleOverG);
					} else if ((STSumSchval[i - 2]['status'] === 'Completed')) {
						wsST.cell(i, 5).style(myStyleOverB);
					} else {
						wsST.cell(i, 5).style(myStyleOverN);
					}
				}

				var plstval = STSumSchval[i - 2]["Plan_Start_Date"];
				if ((plstval === null) || (plstval === '') || (plstval === 'null')) {
					wsST.cell(i, 6).string("");
				} else {
					//.style({numberFormat: 'dd-mmm-yyyy'})
					var dt = moment(STSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 6).string(moment(STSumSchval[i - 2]["Plan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 6).string("");
					}
				}
				var pletval = STSumSchval[i - 2]["Plan_End_Date"];
				if ((pletval === null) || (pletval === '') || (pletval === 'null')) {
					wsST.cell(i, 7).string("");
				} else {
					var dt = moment(STSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 7).string(moment(STSumSchval[i - 2]["Plan_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 7).string("");
					}
				}
				var restval = STSumSchval[i - 2]["Replan_Start_Date"];
				if ((restval === null) || (restval === '') || (restval === 'null')) {
					wsST.cell(i, 8).string("");
				} else {
					var dt = moment(STSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 8).string(moment(STSumSchval[i - 2]["Replan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 8).string("");
					}
				}
				var reetval = STSumSchval[i - 2]["RePlan_End_Date"];
				if ((reetval === null) || (reetval === '') || (reetval === 'null')) {
					wsST.cell(i, 9).string("");
				} else {
					var dt = moment(STSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 9).string(moment(STSumSchval[i - 2]["RePlan_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 9).string("");
					}
				}
				var Acstval = STSumSchval[i - 2]["Actual_Start_Date"];
				if ((Acstval === null) || (Acstval === '') || (Acstval === 'null')) {
					wsST.cell(i, 10).string("");
				} else {
					var dt = moment(STSumSchval[i - 2]["Actual_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 10).string(moment(STSumSchval[i - 2]["Actual_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 10).string("");
					}
				}
				var Acetval = STSumSchval[i - 2]["Actual_End_Date"];
				if ((Acetval === null) || (Acetval === '') || (Acetval === 'null')) {
					wsST.cell(i, 11).string("");
				} else {
					var dt = moment(STSumSchval[i - 2]["Actual_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsST.cell(i, 11).string(moment(STSumSchval[i - 2]["Actual_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsST.cell(i, 11).string("");
					}
				}
				var psperval = STSumSchval[i - 2]["psCompleted_per"];
				if ((psperval === null) || (psperval === '') || (psperval === 'null')) {
					wsST.cell(i, 12).string("");
				} else {
					wsST.cell(i, 12).number(psperval);
				}
				var asperval = STSumSchval[i - 2]["asCompleted_per"];
				if ((asperval === null) || (asperval === '') || (asperval === 'null')) {
					wsST.cell(i, 13).string("");
				} else {
					wsST.cell(i, 13).number(asperval);
				}
				var shval = STSumSchval[i - 2]["sch_Var"];
				if ((shval === null) || (shval === '') || (shval === 'null')) {
					wsST.cell(i, 14).string("");
				} else {
					wsST.cell(i, 14).number(shval);
				}
				var KTval = STSumSchval[i - 2]["ktSummary"];
				if ((KTval === null) || (KTval === '') || (KTval === 'null')) {
					wsST.cell(i, 15).string("");
				} else {
					KTval.toString();
					wsST.cell(i, 15).string(KTval);
					wsST.cell(i, 15).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				var Remval = STSumSchval[i - 2]["Remarks"];
				if ((Remval === null) || (Remval === '') || (Remval === 'null')) {
					wsST.cell(i, 16).string("");
				} else {
					Remval.toString();
					wsST.cell(i, 16).string(Remval);
					wsST.cell(i, 16).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				wsST.cell(1, 1, i, sheet2data.length).style({
					font: {
						name: 'Arial',
						size: 8,
					},
					border: {
						left: {
							style: 'thin'
						},
						right: {
							style: 'thin'
						},
						top: {
							style: 'thin'
						},
						bottom: {
							style: 'thin'
						}
					}
				});
				wsST.cell(1, 7, i, 14).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				});


				wb.write(fileATSumSchedule);
			}
		} else {

			wsST.cell(2, 1).string("No Record Exists");
			wsST.cell(2, 1, 2, sheet2data.length, true).style({
				border: {
					left: {
						style: 'thin'
					},
					right: {
						style: 'thin'
					},
					top: {
						style: 'thin'
					},
					bottom: {
						style: 'thin'
					}
				}
			});
			wb.write(fileATSumSchedule);
		}
		//ST Data population End

		//Over All Data population start
		if (OAllSumSchval.length > 0) {
			for (let i = 2; i < OAllSumSchval.length + 2; i++) {
				wsOAll.cell(i, 1).number(i - 1);
				wsOAll.cell(i, 1).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				})
				wsOAll.cell(i, 2).string(OAllSumSchval[i - 2]["epicName"]);
				wsOAll.cell(i, 3).string(OAllSumSchval[i - 2]["sprintName"]);
				wsOAll.cell(i, 4).string(OAllSumSchval[i - 2]["Scope_BacklogActivity"]).style({
					alignment: {
						wrapText: true
					}
				});;
				var stval = OAllSumSchval[i - 2]["status"];
				if ((stval === null) || (stval === '') || (stval === 'null')) {
					wsOAll.cell(i, 5).string("Not Planned");
				} else {
					stval.toString();
					wsOAll.cell(i, 5).string(stval);
				}

				dt_Report = new Date();

				if (moment(OAllSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanStDT = new Date(moment(OAllSumSchval[i - 2]["Replan_Start_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanStDT = new Date(OAllSumSchval[i-2]["Replan_Start_Date"]);
				} else {
					if (moment(OAllSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanStDT = new Date(moment(OAllSumSchval[i - 2]["Plan_Start_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanStDT = new Date(OAllSumSchval[i-2]["Plan_Start_Date"]);
					} else {
						dt_ReportPlanStDT = '';
					}
				}

				if (moment(OAllSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
					dt_ReportPlanEndDT = new Date(moment(OAllSumSchval[i - 2]["RePlan_End_Date"]).format("YYYY-MM-DD"));
					// dt_ReportPlanEndDT = new Date(OAllSumSchval[i-2]["RePlan_End_Date"]);
				} else {
					if (moment(OAllSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY") !== 'Invalid date') {
						dt_ReportPlanEndDT = new Date(moment(OAllSumSchval[i - 2]["Plan_End_Date"]).format("YYYY-MM-DD"));
						//dt_ReportPlanEndDT = new Date(OAllSumSchval[i-2]["Plan_End_Date"]);
					} else {
						dt_ReportPlanEndDT = '';
					}
				}

				if ((dt_ReportPlanStDT !== 'Invalid Date') && (dt_ReportPlanEndDT !== 'Invalid Date')) {
					if ((OAllSumSchval[i - 2]['status'] === 'Not Started') &&
						(new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanStDT).format("YYYY-MM-DD")))) {
						wsOAll.cell(i, 5).style(myStyleOverR);

					} else if ((OAllSumSchval[i - 2]['status'] === 'Behind Schedule') &&
						((new Date(moment(dt_Report).format("YYYY-MM-DD")) >= new Date(moment(dt_ReportPlanEndDT).format("YYYY-MM-DD"))))) {
						wsOAll.cell(i, 5).style(myStyleOverR);

					} else if ((OAllSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						wsOAll.cell(i, 5).style(myStyleOverA);

					} else if ((OAllSumSchval[i - 2]['status'] === 'On Schedule')) {
						wsOAll.cell(i, 5).style(myStyleOverG);

					} else if ((OAllSumSchval[i - 2]['status'] === 'Completed')) {
						wsOAll.cell(i, 5).style(myStyleOverB);

					} else {
						wsOAll.cell(i, 5).style(myStyleOverN);

					}
				} else {
					if ((OAllSumSchval[i - 2]['status'] === 'Behind Schedule')) {
						wsOAll.cell(i, 5).style(myStyleOverA);
					} else if ((OAllSumSchval[i - 2]['status'] === 'On Schedule')) {
						wsOAll.cell(i, 5).style(myStyleOverG);
					} else if ((OAllSumSchval[i - 2]['status'] === 'Completed')) {
						wsOAll.cell(i, 5).style(myStyleOverB);
					} else {
						wsOAll.cell(i, 5).style(myStyleOverN);
					}
				}

				var plstval = OAllSumSchval[i - 2]["Plan_Start_Date"];
				if ((plstval === null) || (plstval === '') || (plstval === 'null')) {
					wsOAll.cell(i, 6).string("");
				} else {
					//.style({numberFormat: 'dd-mmm-yyyy'})
					var dt = moment(OAllSumSchval[i - 2]["Plan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 6).string(moment(OAllSumSchval[i - 2]["Plan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 6).string("");
					}
				}
				var pletval = OAllSumSchval[i - 2]["Plan_End_Date"];
				if ((pletval === null) || (pletval === '') || (pletval === 'null')) {
					wsOAll.cell(i, 7).string("");
				} else {
					var dt = moment(OAllSumSchval[i - 2]["Plan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 7).string(moment(OAllSumSchval[i - 2]["Plan_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 7).string("");
					}
				}
				var restval = OAllSumSchval[i - 2]["Replan_Start_Date"];
				if ((restval === null) || (restval === '') || (restval === 'null')) {
					wsOAll.cell(i, 8).string("");
				} else {
					var dt = moment(OAllSumSchval[i - 2]["Replan_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 8).string(moment(OAllSumSchval[i - 2]["Replan_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 8).string("");
					}
				}
				var reetval = OAllSumSchval[i - 2]["RePlan_End_Date"];
				if ((reetval === null) || (reetval === '') || (reetval === 'null')) {
					wsOAll.cell(i, 9).string("");
				} else {
					var dt = moment(OAllSumSchval[i - 2]["RePlan_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 9).string(moment(OAllSumSchval[i - 2]["RePlan_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 9).string("");
					}
				}
				var Acstval = OAllSumSchval[i - 2]["Actual_Start_Date"];
				if ((Acstval === null) || (Acstval === '') || (Acstval === 'null')) {
					wsOAll.cell(i, 10).string("");
				} else {
					var dt = moment(OAllSumSchval[i - 2]["Actual_Start_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 10).string(moment(OAllSumSchval[i - 2]["Actual_Start_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 10).string("");
					}
				}
				var Acetval = OAllSumSchval[i - 2]["Actual_End_Date"];
				if ((Acetval === null) || (Acetval === '') || (Acetval === 'null')) {
					wsOAll.cell(i, 11).string("");
				} else {
					var dt = moment(OAllSumSchval[i - 2]["Actual_End_Date"]).format("MM-DD-YY");
					if (dt !== 'Invalid Date') {
						wsOAll.cell(i, 11).string(moment(OAllSumSchval[i - 2]["Actual_End_Date"]).format("DD-MMM-YY"));
					} else {
						wsOAll.cell(i, 11).string("");
					}
				}
				var psperval = OAllSumSchval[i - 2]["psCompleted_per"];
				if ((psperval === null) || (psperval === '') || (psperval === 'null')) {
					wsOAll.cell(i, 12).string("");
				} else {
					wsOAll.cell(i, 12).number(psperval);
				}
				var asperval = OAllSumSchval[i - 2]["asCompleted_per"];
				if ((asperval === null) || (asperval === '') || (asperval === 'null')) {
					wsOAll.cell(i, 13).string("");
				} else {
					wsOAll.cell(i, 13).number(asperval);
				}
				var shval = OAllSumSchval[i - 2]["sch_Var"];
				if ((shval === null) || (shval === '') || (shval === 'null')) {
					wsOAll.cell(i, 14).string("");
				} else {
					wsOAll.cell(i, 14).number(shval);
				}
				var KTval = OAllSumSchval[i - 2]["ktSummary"];
				if ((KTval === null) || (KTval === '') || (KTval === 'null')) {
					wsOAll.cell(i, 15).string("");
				} else {
					KTval.toString();
					wsOAll.cell(i, 15).string(KTval);
					wsOAll.cell(i, 15).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				var Remval = OAllSumSchval[i - 2]["Remarks"];
				if ((Remval === null) || (Remval === '') || (Remval === 'null')) {
					wsOAll.cell(i, 16).string("");
				} else {
					Remval.toString();
					wsOAll.cell(i, 16).string(Remval);
					wsOAll.cell(i, 16).style({
						alignment: {
							wrapText: true,
						}
					});
				}
				wsOAll.cell(1, 1, i, sheet3data.length).style({
					font: {
						name: 'Arial',
						size: 8,
					},
					border: {
						left: {
							style: 'thin'
						},
						right: {
							style: 'thin'
						},
						top: {
							style: 'thin'
						},
						bottom: {
							style: 'thin'
						}
					}
				});
				wsOAll.cell(1, 7, i, 14).style({
					alignment: {
						horizontal: 'center',
						vertical: 'center',
					}
				});


				wb.write(fileATSumSchedule);
			}
		} else {

			wsOAll.cell(2, 1).string("No Record Exists");
			wsOAll.cell(2, 1, 2, sheet3data.length, true).style({
				border: {
					left: {
						style: 'thin'
					},
					right: {
						style: 'thin'
					},
					top: {
						style: 'thin'
					},
					bottom: {
						style: 'thin'
					}
				}
			});
			wb.write(fileATSumSchedule);
		}
		//OVer All Data population End
		wb.write(fileATSumSchedule);
	}, 3000);

	setTimeout(() => {
		var filePath = __dirname + '\\' + fileATSumSchedule;
		res.setHeader('Content-Type', 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet');
		res.setHeader('Content-Disposition', 'attachment; filename=' + fileATSumSchedule);
		setTimeout(() => {
			try {
				// //console.log('remove' +filePath)
				fs.unlinkSync(filePath)
				//file removed
			} catch (err) {
				console.error(err)
			}
		}, 19000)
		return res.sendFile(filePath);
	}, 18000)


});  
//***********************************AT Schedule Summary Report End **********************************
//*****TRA Export Excel Start*/
app.get("/TRAExportExcel/:UserNm/:IntegrationID/:AccntNm", (req, res)=>{

  var UserNm = req.params.UserNm;  
  UserNm=UserNm.split(' ')[0]; 
  var IntegrationID = req.params.IntegrationID;  
  var AccntNm = req.params.AccntNm; 

  dt=moment(new Date());
  var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()+parseInt(4)]).format("YYYY-MM-DDTHH:mm:ss");
  queryReportTemp ="insert into reporttemplate values (null,'"+ UserNm + "','"+ IntegrationID + 
  "','"+ AccntNm + "', '"+CREATED_AT+"','TRAReport')"
setTimeout(() => {

   pool.getConnection().then(conn => {        
         conn.query(queryReportTemp).then((queryReportTempRes) => {
                        conn.end();
           })
           .catch(err => {
                         conn.end();
           })

       }).catch(err => {
               });
}, 2000);
setTimeout(() => {
  fileOveralSchedule = "Transition Risk Calculator.xls"
   var filePath = __dirname+'\\'+fileOveralSchedule;
   res.setHeader('Content-Type', 'application/vnd.ms-excel');
  res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
    res.download(filePath)
  }, 4000);

});
//*****TRA Export Excel End*/


// Service transition master start 
app.post('/ServiceTransitionInfo_post',(req,res)=>{
  var MasterSTInfoid = null;
  var IntegrationID  =req.body.IntegrationID
  var STScopeLevel   =req.body.STScopeLevel
  var STScope        =req.body.STScope
  var STDetailedScope=req.body.STDetailedScope.replace(/'/g, "\\'");
  var STScopeActivity=req.body.STScopeActivity
  var STToolUsage    =req.body.STToolUsage
  var Others         =req.body.Others
  var CREATED_BY     =req.body.CREATED_BY
  var MODIFIED_BY    =req.body.MODIFIED_BY 
  var dt=moment(new Date());
  var CREATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  var LAST_UPDATED_AT =moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");

  const selectQuery = "select count(*) as cnt from masterstinfo where STScopeLevel ='"+STScopeLevel+"' and STScope='"+STScope+"' and STDetailedScope='"+STDetailedScope+"' and STScopeActivity ='"+STScopeActivity+"' and IntegrationID='"+IntegrationID+"'";
  
  queryServiceTransitionInfo_post="insert into masterstinfo values("+
  +MasterSTInfoid
  + ",'"+IntegrationID
  +"','"+STScopeLevel
  +"','"+STScope
  +"','"+STDetailedScope
  +"','"+STScopeActivity
  +"','"+STToolUsage
  +"','"+Others
  +"','"+CREATED_AT
  +"','"+LAST_UPDATED_AT
  +"','"+CREATED_BY
  +"','"+MODIFIED_BY
  +"')";

  pool.getConnection().then(conn => {  
    var result;
      console.log(selectQuery)
      conn.query(selectQuery).then((selectQueryResult) => {  
           result =selectQueryResult[0].cnt; 
           console.log(result)
           if (result === 0){
             console.log("inside")
                  conn.query(queryServiceTransitionInfo_post).then((queryServiceTransitionInfo_postResult) => {
                  res.send({"save" : "success"} )       
                  conn.end();
            })
            .catch(err => {
                //handle error
                console.log(err)
                res.send({"save" : "Fail" })
                conn.end();
        })
          }else{
            //console.log("dup")
            // res.send({"duplicate" : "success"} )
            res.send({"save" : "Duplicate record exist" })
            conn.end();
          }

        })
        .catch(err => {
          //handle error
          res.send({"save" : "Fail" })
          conn.end();
        })
        
    }).catch(err => {
      //not connected
    });

})

app.put('/ServiceTransitionInfo_put',(req,res)=>{
  var MasterSTInfoid = req.body.MasterSTInfoid
  var IntegrationID  =req.body.IntegrationID
  var STScopeLevel   =req.body.STScopeLevel
  var STScope        =req.body.STScope
  var STDetailedScope=req.body.STDetailedScope.replace(/'/g, "\\'");
  var STScopeActivity=req.body.STScopeActivity
  var STToolUsage    =req.body.STToolUsage  
  var Others    =req.body.Others  
  var MODIFIED_BY    =req.body.MODIFIED_BY 
  var dt=moment(new Date());  
  var LAST_UPDATED_AT = moment([dt.year(), dt.month(), dt.date()]).format("YYYY-MM-DD");
  
  const selectQueryPut = "select count(*) as cnt from masterstinfo where STScopeLevel ='"+STScopeLevel+"' and STScope='"+STScope+"' and STDetailedScope='"+STDetailedScope+"' and STScopeActivity ='"+STScopeActivity+"' and IntegrationID='"+IntegrationID+"' and MasterSTInfoid <> '"+MasterSTInfoid+"'";
  
  queryServiceTransitionInfo_put="update masterstinfo set STScopeLevel='"+STScopeLevel
  +"',STScope='"+STScope
  +"',STDetailedScope='"+STDetailedScope
  +"',STScopeActivity='"+STScopeActivity
  +"',STToolUsage='"+STToolUsage
  +"',Others='"+Others  
  // +"','"+CREATED_AT
  +"',LAST_UPDATED_AT='"+LAST_UPDATED_AT
  // +"','"+CREATED_BY
  +"',MODIFIED_BY='"+MODIFIED_BY
  +"' where MasterSTInfoid='"+MasterSTInfoid+"'";
console.log(queryServiceTransitionInfo_put)

pool.getConnection().then(conn => {  
  var result;
    console.log(selectQueryPut)
    conn.query(selectQueryPut).then((selectQueryputResult) => {  
         result =selectQueryputResult[0].cnt; 
         console.log(result)
         if (result === 0){
           console.log("inside")
                conn.query(queryServiceTransitionInfo_put).then((ServiceTransitionInfo_put_result) => {
                res.send({"insert" : "success"} )       
                conn.end();
          })
          .catch(err => {
              //handle error
              console.log(err)
              res.send({"insert" : "Update Fail" })
              conn.end();
      })
        }else{
          //console.log("dup")
          // res.send({"duplicate" : "success"} )
          res.send({"insert" : "Duplicate record exist" })
          conn.end();
        }

      })
      .catch(err => {
        //handle error
        res.send({"insert" : "Update Fail" })
        conn.end();
      })
      
  }).catch(err => {
    //not connected
  });


})

app.delete('/ServiceTransitionInfo_delete/:MasterSTInfoid/:measureAgainst', (req, res) => {
  MasterSTInfoid = req.params.MasterSTInfoid;
  measureAgainstParam = req.params.measureAgainst;

  const Table = [{
    "TableName": "readiness_question_tracker",
    "CoulmnName": "READINESS_QUESTION_MEASURED_AGAINST_PARAMETER_VALUE",
    "UITable": "* Manage Sprint >> Health & Readiness Tracking"
  },
  {
    "TableName": "sprintscope",
    "CoulmnName": "STUNID",
    "UITable": "* Transition Plan >> Sprint Execution Plan >> Sprint scope"
  }
  ];

  
if (measureAgainstParam === 'Metrics' )
{
  MeasuredAganist = 'ST-scope-Metrics'
}else if (measureAgainstParam === 'Process' )
{
  MeasuredAganist = 'ST-scope-process'
}else if (measureAgainstParam === 'Tools' )
{
  MeasuredAganist = 'ST-scope-tools'
}else if (measureAgainstParam === 'Reports' )
{
  MeasuredAganist = 'ST-scope-reports'
}else if (measureAgainstParam === 'Governance' )
{
  MeasuredAganist = 'ST-scope-Governance'
}


  const Result = ['Service Transtion Info mapped to below functionalities:',
      ''
  ];
  setTimeout(() => {
    deleteCheck(Table, Result, MasterSTInfoid,MeasuredAganist)
},1000)

  setTimeout(() => {

      if (Result.length === 2) {    
          pool.getConnection().then(conn => {
              // querytraineeDelete = "DELETE FROM traineeinfo WHERE (Trainee_SNO ='" + Trainee_SNO + "')"
              queryServiceTransitionInfo_delete="delete from masterstinfo where MasterSTInfoid='"+MasterSTInfoid+"'"
              conn.query(queryServiceTransitionInfo_delete).then((queryServiceTransitionInfo_deleteResult) => {

                      res.send({
                          "Delete": "success"
                      })
                      conn.end();
                  })
                  .catch(err => {
                      //handle error
                      res.send({
                          "Delete": "Fail"
                      })
                      conn.end();
                  })

          }).catch(err => {
              //not connected
          });
      } else {       
          res.send({
              "Delete": Result
          })
      }
  }, 1500);
});

app.get('/ServiceTransitionInfo_get/:Id',(req,res)=>{
  var id = req.params.Id;
  queryServiceTransitionInfo_get = "select * from masterstinfo where IntegrationID ='"+id +"'" ; 
  pool.getConnection().then(conn => {        
        conn.query(queryServiceTransitionInfo_get).then((queryServiceTransitionInfo_get_result) => {
            
            res.send(queryServiceTransitionInfo_get_result)
            conn.end();
          })
          .catch(err => {
            //handle error
            res.send({"Fetch" : "Fail" })
            conn.end();
          })
          
      }).catch(err => {
        //not connected
      });
})

app.get('/serviceTransitionInfoParameters',(req,res)=>{
  
  queryserviceTransitionInfoParameters_get =  "select FieldCategoryName,Categoryvalues from adminprofile where "+
  "FieldCategoryName ='STScopeLevel'"
  queryserviceTransitionInfoParameters_get1 = "select FieldCategoryName,Categoryvalues from adminprofile where "+  
  "FieldCategoryName  in (";
  
  pool.getConnection().then(conn=>{
      conn.query(queryserviceTransitionInfoParameters_get).then((queryserviceTransitionInfoParameters_get_result) =>{         
          var keywords="";
          queryserviceTransitionInfoParameters_get_result.forEach(res =>{
              keywords += "'"+ res.Categoryvalues + "',"
          })
          queryserviceTransitionInfoParameters_get1 += keywords+"'STScopeLevel','STScopeActivity','StandardTools')"          
          console.log(queryserviceTransitionInfoParameters_get1)
         conn.query(queryserviceTransitionInfoParameters_get1).then((queryserviceTransitionInfoParameters_get1_result)=>{
              res.send(queryserviceTransitionInfoParameters_get1_result)
              conn.end();    
         }).catch(err=>{
          res.send({"Fetch" : "Fail"});
          conn.end();
         })
      }).catch(err => {
        res.send({"Fetch" : "Fail"});
        conn.end();
      })
  }) . catch(err => {
    //not connected
  });

});

//service transition Master end

//Tranistion Programm Dashboard Start--------------------------
app.get("/TransProgramDashExport/:UserNm/:IntegrationID/:AccntNm", (req, res)=>{
  var UserNm = req.params.UserNm;  
  UserNm=UserNm.split(' ')[0]; 
  var IntegrationID = req.params.IntegrationID;  
  var AccntNm = req.params.AccntNm; 
  dt=moment(new Date());
  var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()+parseInt(4)]).format("YYYY-MM-DDTHH:mm:ss");
  queryReportTemp ="insert into reporttemplate values (null,'"+ UserNm + "','"+ IntegrationID + 
  "','"+ AccntNm + "', '"+CREATED_AT+"', 'TransitionDashboard')"
setTimeout(() => {
   pool.getConnection().then(conn => {        
         conn.query(queryReportTemp).then((queryReportTempRes) => {
                        conn.end();
           })
           .catch(err => {
                         conn.end();
           })
       }).catch(err => {
               });
}, 2000);
setTimeout(() => {
  fileOveralSchedule = "Transition Program Dashboard.xls"
   var filePath = __dirname+'\\'+fileOveralSchedule;
   res.setHeader('Content-Type', 'application/vnd.ms-excel');
  res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralSchedule);
    res.download(filePath)
  }, 4000);
});
//Tranistion Programm Dashboard END--------------------------

//OTP Start--------------------------
app.get("/OTPDocExport/:UserNm/:IntegrationID/:AccntNm", (req, res)=>{
  var UserNmFull = req.params.UserNm;  
  UserNm=UserNmFull.split(' ')[0]; 
  var IntegrationID = req.params.IntegrationID;  
  var AccntNm = req.params.AccntNm.split('.')[0]; 
  var OTPStream = req.params.AccntNm.split('.')[1].split('&^')[1]; 
  var OTPDocReport='OTP'+OTPStream+'Report'
  dt=moment(new Date());
  var CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()+parseInt(4)]).format("YYYY-MM-DDTHH:mm:ss");
  var VER_CREATED_AT=moment([dt.year(), dt.month(), dt.date(),dt.hours(),dt.minutes(),dt.seconds()+parseInt(4)]).format("DD-MMM-YYYY");
  queryReportTemp ="insert into reporttemplate values (null,'"+ UserNm + "','"+ IntegrationID + 
  "','"+ AccntNm + "', '"+CREATED_AT+"','"+ OTPDocReport +"')"
setTimeout(() => {
   pool.getConnection().then(conn => {        
         conn.query(queryReportTemp).then((queryReportTempRes) => {
                        conn.end();
           })
           .catch(err => {
                         conn.end();
           })
       }).catch(err => {
               });
}, 2000);
queryReportVer = "select * FROM report_version where IntegrationID ='"+ IntegrationID +"' AND Report_Name='"+ OTPDocReport +"';"
setTimeout(() => {
  pool.getConnection().then(conn => {        
        conn.query(queryReportVer).then((queryReportVerResult) => {   
          if(queryReportVerResult.length > 0){   
            var Ver_List=queryReportVerResult[0].Version_List+1
            var Date_List=[];
            Date_List.push(queryReportVerResult[0].Date_List)
            Date_List.push(VER_CREATED_AT)
            Date_List = Date_List.join(',')
            var Author_List=[];
            Author_List.push(queryReportVerResult[0].Author_List)
            Author_List.push(UserNmFull)
            Author_List = Author_List.join(',')
            queryReportTempVer ="Update report_version SET Version_List="+Ver_List
                                +",Date_List='"+Date_List
                                +"',Author_List='"+Author_List
                            +"' WHERE ID='"+queryReportVerResult[0]['ID']+"'"     
             setTimeout(() => {
                  pool.getConnection().then(conn => {        
                    conn.query(queryReportTempVer).then((queryReportVerResult) => {
                        conn.end();
                    })
                    .catch(err => {
                           conn.end();
                     })
                    }).catch(err => {
                 });
             }, 2000);
          }else{
            queryReportTempVer ="insert into report_version values (null,'"+ IntegrationID +"','"+ AccntNm + 
            "','"+ OTPDocReport +"','1.0','"+VER_CREATED_AT+"','"+ UserNmFull + "')"
             setTimeout(() => {
                  pool.getConnection().then(conn => {        
                    conn.query(queryReportTempVer).then((queryReportVerResult) => {
                        conn.end();
                    })
                    .catch(err => {
                           conn.end();
                     })
                    }).catch(err => {
                 });
             }, 2000);
          }
          conn.end();
        })
        .catch(err => {
             conn.end();
        })
      }).catch(err => {
              });
}, 5000);
setTimeout(() => {
  fileOveralOPT = OTPDocReport+".docm"
   var filePath = __dirname+'\\'+fileOveralOPT;
   res.setHeader('Content-Type', 'application/vnd.ms-word.document.macroEnabled.12');
  res.setHeader('Content-Disposition', 'attachment; filename=' + fileOveralOPT);
    res.download(filePath)
  }, 7000);
});
//OTP END--------------------------


